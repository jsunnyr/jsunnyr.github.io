{"meta":{"title":"InSo","subtitle":"","description":"Liar never lies.","author":"susu","url":"http://jsunnyr.github.io","root":"/"},"pages":[{"title":"categories","date":"2020-01-06T05:53:12.000Z","updated":"2021-12-05T13:21:31.430Z","comments":true,"path":"categories/index.html","permalink":"http://jsunnyr.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-01-06T05:21:38.000Z","updated":"2021-12-05T13:23:18.597Z","comments":true,"path":"tags/index.html","permalink":"http://jsunnyr.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"security/os-secure/linux-capability-利用capability进行Linux提权","date":"2021-12-21T04:32:21.332Z","updated":"2021-12-21T04:32:21.332Z","comments":true,"path":"2021/12/21/security/os-secure/linux-capability-利用capability进行Linux提权/","link":"","permalink":"http://jsunnyr.github.io/2021/12/21/security/os-secure/linux-capability-%E5%88%A9%E7%94%A8capability%E8%BF%9B%E8%A1%8CLinux%E6%8F%90%E6%9D%83/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"security/os-secure/linux-pam-pam设置","date":"2021-12-21T04:29:47.942Z","updated":"2021-12-21T05:25:44.283Z","comments":true,"path":"2021/12/21/security/os-secure/linux-pam-pam设置/","link":"","permalink":"http://jsunnyr.github.io/2021/12/21/security/os-secure/linux-pam-pam%E8%AE%BE%E7%BD%AE/","excerpt":"","text":"123456# 设置连续输错三次密码，账号锁定五分钟, /etc/pam.d/common-auth添加auth required pam_tally.so onerr=fail deny=3 unlock_time=300# 只允许test组用户su到root，则etc/pam.d/su添加auth required pam_wheel.so group=test","categories":[],"tags":[]},{"title":"","slug":"os/rpm/linux-file-profile","date":"2021-12-21T04:21:47.171Z","updated":"2021-12-21T04:22:22.943Z","comments":true,"path":"2021/12/21/os/rpm/linux-file-profile/","link":"","permalink":"http://jsunnyr.github.io/2021/12/21/os/rpm/linux-file-profile/","excerpt":"","text":"1","categories":[],"tags":[]},{"title":"","slug":"os/performance-tuning/linux-kernel-parameters-sysctl","date":"2021-12-19T09:25:55.370Z","updated":"2021-12-19T09:26:59.820Z","comments":true,"path":"2021/12/19/os/performance-tuning/linux-kernel-parameters-sysctl/","link":"","permalink":"http://jsunnyr.github.io/2021/12/19/os/performance-tuning/linux-kernel-parameters-sysctl/","excerpt":"","text":"PArameter usage link vm.min_free_kbytes 保留给内核使用的；当到达min，系统会启动 kswapd0 进行内存回收","categories":[],"tags":[]},{"title":"","slug":"os/performance-tuning/linux-cpu-analyse","date":"2021-12-19T07:59:26.633Z","updated":"2021-12-19T08:04:48.605Z","comments":true,"path":"2021/12/19/os/performance-tuning/linux-cpu-analyse/","link":"","permalink":"http://jsunnyr.github.io/2021/12/19/os/performance-tuning/linux-cpu-analyse/","excerpt":"","text":"共识 load average是对CPU负载进行评估的，其值越高说明其任务队列越长，处于等待执行的任务越多。出现此种情况时，可能是由于僵死进程导致的。可以通过ps -axjf命令查看是否存在 D+ 状态进程，该状态是指不可中断的睡眠状态。处于该状态的进程无法终止，也无法自行退出。只能通过恢复其依赖的资源或者重启系统来解决。 CPU analyse 在Linux系统中，查看进程的常用命令如下所示。本文主要介绍vmstat和top。 vmstat top ps -aux ps -ef for example Linux系统CPU负载的查询和案例分析 123456procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st 1 0 0 2684984 310452 2364304 0 0 5 17 19 35 4 2 94 0 0 0 0 0 2687504 310452 2362268 0 0 0 252 1942 4326 5 2 93 0 0 0 0 0 2687356 310460 2362252 0 0 0 68 1891 4449 3 2 95 0 0 0 0 0 2687252 310460 2362256 0 0 0 0 1906 4616 4 1 95 0 0 注：返回结果中的主要数据列说明如下。 r：表示系统中CPU等待处理的线程。一个CPU每次只能处理一个线程，所以该数值越大，通常表示系统运行越慢。 us：用户模式消耗的CPU时间百分比。该值较高时，说明用户进程消耗的CPU时间比较多。如果该值长期超过50%，则需要对程序算法或代码等进行优化。 sy：内核模式消耗的CPU时间百分比。 wa：IO等待消耗的CPU时间百分比。该值较高时，说明IO等待比较严重，这可能磁盘大量作随机访问造成的，也可能是磁盘性能出现了瓶颈。 id：处于空闲状态的CPU时间百分比。如果该值持续为0，同时sy是us的两倍，则通常说明系统面临CPU资源短缺。","categories":[],"tags":[]},{"title":"","slug":"os/rpm/linux-rhel-history-variable-history命令变量说明","date":"2021-12-19T03:47:05.012Z","updated":"2021-12-19T04:21:52.077Z","comments":true,"path":"2021/12/19/os/rpm/linux-rhel-history-variable-history命令变量说明/","link":"","permalink":"http://jsunnyr.github.io/2021/12/19/os/rpm/linux-rhel-history-variable-history%E5%91%BD%E4%BB%A4%E5%8F%98%E9%87%8F%E8%AF%B4%E6%98%8E/","excerpt":"","text":"history History events The basic structure of shell history starts with a list of events. An event is anything you’ve entered into the shell, followed by the Return or Enter key. Each event is assigned an index number (a line number), and you can view and recall events by using event designators. 12345HISTTIMEFORMAT=&#x27;%F %T &#x27;HISTCONTROL=$HISTCONTROL:ignorespace:ignoredupsHISTSIZE=100HISTFILESIZE=100HISTIGNORE=&#x27;ls&#x27; reference Stupid Bash tricks","categories":[],"tags":[]},{"title":"","slug":"os/rpm/os-management-job-management","date":"2021-12-09T06:43:22.435Z","updated":"2021-12-09T06:43:22.435Z","comments":true,"path":"2021/12/09/os/rpm/os-management-job-management/","link":"","permalink":"http://jsunnyr.github.io/2021/12/09/os/rpm/os-management-job-management/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"os/rpm/linux-autofs-安装autofs","date":"2021-12-09T06:16:32.336Z","updated":"2021-12-10T03:47:22.138Z","comments":true,"path":"2021/12/09/os/rpm/linux-autofs-安装autofs/","link":"","permalink":"http://jsunnyr.github.io/2021/12/09/os/rpm/linux-autofs-%E5%AE%89%E8%A3%85autofs/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"Untitled","date":"2021-12-08T05:48:09.649Z","updated":"2021-12-08T05:48:09.649Z","comments":true,"path":"2021/12/08/Untitled/","link":"","permalink":"http://jsunnyr.github.io/2021/12/08/Untitled/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"db/oracle/oracle-11-role-privileges-角色与权限","date":"2021-12-07T05:18:03.215Z","updated":"2021-12-07T05:44:55.667Z","comments":true,"path":"2021/12/07/db/oracle/oracle-11-role-privileges-角色与权限/","link":"","permalink":"http://jsunnyr.github.io/2021/12/07/db/oracle/oracle-11-role-privileges-%E8%A7%92%E8%89%B2%E4%B8%8E%E6%9D%83%E9%99%90/","excerpt":"","text":"锁定与解锁 123456select username,account_status from dba_users;alter user username account lock;alter user username account unlock;alter user username identified by new_password;alter user username identified by new_password account unlock; 角色权限 123456789# 查看某个用户有哪些角色select * from dba_role_privs where grantee=&#x27;HR&#x27;;# 查看某个角色被赋予了哪些用户select * from dba_role_privs where granted_role=&#x27;DBA&#x27;;# 对象权限select * from dba_tab_privs; 授予权限 123456789101112131415# 查看roleselect * from dba_roles;# 授予HR用户某些角色GRANT connect,resource TO &#x27;HR&#x27;;# 授予HR用户dba角色时，要重新连接才能生效GRANT dba to &#x27;HR&#x27;;REVOKE dba to &#x27;HR&#x27;;# 直接授予HR用户某些权限GRANT CREATE VIEW TO &#x27;HR&#x27;;# 查看某个系统用户是否有SYSDBA或者SYSOPER权限select * from v$pwfile_users;","categories":[],"tags":[]},{"title":"Virt-manager","slug":"kvm/kvm-related","date":"2021-12-05T13:57:53.764Z","updated":"2021-12-05T13:57:53.765Z","comments":true,"path":"2021/12/05/kvm/kvm-related/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/kvm/kvm-related/","excerpt":"","text":"Virt-manager official: virt-manger official: virt-manger’s git The virt-manager application is a desktop user interface for managing virtual machines through libvirt. It primarily targets KVM VMs, but also manages Xen and LXC (linux containers). It presents a summary view of running domains, their live performance &amp; resource utilization statistics. Wizards enable the creation of new domains, and configuration &amp; adjustment of a domain’s resource allocation &amp; virtual hardware. An embedded VNC and SPICE client viewer presents a full graphical console to the guest domain. virt-install is a command line tool which provides an easy way to provision operating systems into virtual machines. virt-viewer is a lightweight UI interface for interacting with the graphical display of virtualized guest OS. It can display VNC or SPICE, and uses libvirt to lookup the graphical connection details. virt-clone is a command line tool for cloning existing inactive guests. It copies the disk images, and defines a config with new name, UUID and MAC address pointing to the copied disks. virt-xml is a command line tool for easily editing libvirt domain XML using virt-install’s command line options. virt-bootstrap is a command tool providing an easy way to setup the root file system for libvirt-based containers. install virt-manager on each Linux Distribution https://virt-manager.org/download/ 1234yum install virt-manager (Fedora)apt-get install virt-manager (Debian)emerge virt-manager (Gentoo)pkg_add virt-manager (OpenBSD)","categories":[{"name":"文章分类","slug":"文章分类","permalink":"http://jsunnyr.github.io/categories/%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"文章标签","slug":"文章标签","permalink":"http://jsunnyr.github.io/tags/%E6%96%87%E7%AB%A0%E6%A0%87%E7%AD%BE/"}]},{"title":"Powershell Programming","slug":"win/windows-powershell-01-basic","date":"2021-12-05T13:56:02.722Z","updated":"2021-12-07T00:58:40.484Z","comments":true,"path":"2021/12/05/win/windows-powershell-01-basic/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/win/windows-powershell-01-basic/","excerpt":"","text":"powershell基础 Windows PowerShell (Figure 1) Windows PowerShell ISE (Figure 2) 1234&lt;command -name &gt; -&lt; Required Parameter Name &gt; &lt;Required Parameter Value &gt; [ -&lt; Optional Parameter Name &gt; &lt;Optional Parameter Value &gt;] [ -&lt; Optional Switch Parameters &gt;] [ -&lt; Optional Parameter Name &gt;] &lt;Required Parameter Value &gt; 帮助 1234567help helphelp verb-nounman verb-nounhelp abouthelp about_forhelp about_foreachhelp about_if 常用函数 123456789get-aliasclear-host cls, clearformat-list flget-childitem gci, ls, dirget-content gc, cat, typeget-location gl, pwdget-member gmremove-item ri, rm, rmdir, del, erase, rdwrite-output write, echo 12read-hostwrite-host 数据类型 integers doubles strings arrays hash tables objects processes services event logs computers XML anything else… Powershell 环境 Within a shell the environment is the term to describe the current settings. These settings are exposed in environment variables 123(get-item $env:\\username).value$env:username 语法要点 Windows不区分大小写 PowerShell casts the result based on the first variable type. 1234567PS M:\\&gt; [ string ] $a=&quot;4&quot;PS M:\\&gt; [ int] $b =7PS M:\\&gt; $a+$b47PS M:\\&gt; $b+$a11PS M:\\&gt; arrays 12345PS M:\\&gt; $city =(&quot; Edinburgh &quot;,&quot; Glasgow &quot;,&quot; Dundee &quot;,&quot; Aberdeen &quot;)PS M:\\&gt; $city [3]AberdeenPS M:\\&gt; ( $city ). Length4 hash tables 123456789101112PS M:\\&gt; $pops =@&#123;&quot; Glasgow &quot; =976970; &quot; Edinburgh &quot; =488610;&gt;&gt; &quot; Aberdeen &quot; =209460; &quot; Dundee &quot; =157690&#125;&gt;&gt;PS M:\\&gt; $popsName Value---- -----Edinburgh 488610Glasgow 976970Dundee 157690Aberdeen 209460PS M:\\&gt; $pops.Values | Measure-Object -average |gmPS M:\\&gt; ($pops.Values | Measure-Object -average ).Average","categories":[{"name":"Programming","slug":"Programming","permalink":"http://jsunnyr.github.io/categories/Programming/"},{"name":"Powershell","slug":"Programming/Powershell","permalink":"http://jsunnyr.github.io/categories/Programming/Powershell/"}],"tags":[{"name":"Powershell","slug":"Powershell","permalink":"http://jsunnyr.github.io/tags/Powershell/"}]},{"title":"","slug":"win/windows-powershell-book","date":"2021-12-05T12:32:55.905Z","updated":"2021-12-05T12:32:55.906Z","comments":true,"path":"2021/12/05/win/windows-powershell-book/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/win/windows-powershell-book/","excerpt":"","text":"batch file programmging complete book premkumar.S batch scripting learn batch file programming by john albert online reference","categories":[],"tags":[]},{"title":"","slug":"sdn-vxlan","date":"2021-12-05T12:32:55.895Z","updated":"2021-12-05T12:32:55.895Z","comments":true,"path":"2021/12/05/sdn-vxlan/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/sdn-vxlan/","excerpt":"","text":"Reference [S] csdn: 什么是VXLAN？ csdn: overlay技术–理解VXLAN（L2 over UDP）、NVGRE（L2 over GRE）、STT(L2 over TCP)","categories":[],"tags":[]},{"title":"","slug":"db/redis/redis-安装","date":"2021-12-05T12:32:55.891Z","updated":"2021-12-05T12:32:55.891Z","comments":true,"path":"2021/12/05/db/redis/redis-安装/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/db/redis/redis-%E5%AE%89%E8%A3%85/","excerpt":"","text":"groupadd -g 1862 redis useradd -u 1862 -g 1862 -d /redis redis chmod -R 750 /redis echo abcd1234 | passwd --stdin redis chown -R redis:redis /redis su - redis cp -r /etc/skel/. ./ source .bash_profile exit usermod -a -G redis patrol sed -i ‘/vm.overcommit_memory/d’ /etc/sysctl.conf echo “vm.overcommit_memory = 1” &gt;&gt; /etc/sysctl.conf sysctl -p echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled vi /etc/rc.local echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled vi /etc/security/limits.conf soft core unlimited hard core unlimited soft nofile 65536 hard nofile 65536 soft nproc 65536 hard nproc 65536 vi /etc/security/limits.d/20-nproc.conf vi /etc/rc.local sh /home/AppAutoStart_Redis.sh touch /home/AppAutoStart_Redis.sh chown redis:redis /home/AppAutoStart_Redis.sh chmod 744 /home/AppAutoStart_Redis.sh vi /etc/hosts mkdir -p /redis/install chown redis. -R /redis su - redis cd /redis/install/ &amp;&amp; tar zxf redis-4.0.12.tar.gz cd /redis/install/redis-4.0.12 REDIS_HOME=/redis/redis-4.0.12 cd deps &amp;&amp; make hiredis lua jemalloc linenoise cd /redis/install/redis-4.0.12 &amp;&amp; make make PREFIX=${REDIS_HOME} install ls ${REDIS_HOME}/bin export REDIS_HOME=/redis/redis-4.0.12 export PATH=REDISHOME/bin:REDIS_HOME/bin:REDIS​H​​OME/bin:PATH mkdir -p ${REDIS_HOME}/conf/ mkdir -p ${REDIS_HOME}/tools/ cp /redis/install/redis-4.0.12/redis.conf ${REDIS_HOME}/conf/ cd ${REDIS_HOME}/conf/ sed -i “s/daemonize no/daemonize yes/g” redis.conf sed -i “s/pidfile /var/run/redis_6379.pid/pidfile /redis/R_instance_name/redis.pid/g” redis.conf sed -i “s/logfile “”/logfile /redis/R_instance_name/log/redis.log/g” redis.conf sed -i “s/dir .//dir /redis/R_instance_name/snapshot/g” redis.conf sed -i “s/# maxmemory /maxmemory R_maxmemory/g” redis.conf sed -i “s/bind 127.0.0.1/bind R_IP/g” redis.conf sed -i “s/port 6379/port R_PORT/g” redis.conf vi ${REDIS_HOME}/tools/env.instance export instance_name=gdlf export REDIS_HOME=/redis/redis-4.0.12 vi ${REDIS_HOME}/tools/instance.start.sh . /redis/R_instance_name/env.R_instance_name REDIS_BASE_DIR=/redis/R_instance_name redis-server ${REDIS_BASE_DIR}/conf/redis.conf vi ${REDIS_HOME}/tools/instance.stop.sh . /redis/R_instance_name/env.R_instance_name REDIS_BASE_DIR=/redis/R_instance_name PW=cat $REDIS_BASE_DIR/conf/redis.conf | grep ^requirepass | awk -F &quot;requirepass &quot; '&#123;print $2&#125;' | sed &quot;s/\\&quot;//g&quot; B_IP=cat $REDIS_BASE_DIR/conf/redis.conf | grep ^bind | awk -F &quot;bind &quot; '&#123;print $2&#125;' PORT=cat $REDIS_BASE_DIR/conf/redis.conf | grep ^port | awk -F &quot;port &quot; '&#123;print $2&#125;' redis-cli -h ${B_IP} -p PORT−a&quot;{PORT} -a &quot;PORT−a&quot;{PW}&quot; shutdown vi ${REDIS_HOME}/tools/instance.cli.sh . /redis/R_instance_name/env.R_instance_name REDIS_BASE_DIR=/redis/R_instance_name PW=cat $REDIS_BASE_DIR/conf/redis.conf | grep ^requirepass | awk -F &quot;requirepass &quot; '&#123;print $2&#125;' | sed &quot;s/\\&quot;//g&quot; B_IP=cat $REDIS_BASE_DIR/conf/redis.conf | grep ^bind | awk -F &quot;bind &quot; '&#123;print $2&#125;' PORT=cat $REDIS_BASE_DIR/conf/redis.conf | grep ^port | awk -F &quot;port &quot; '&#123;print $2&#125;' redis-cli -h ${B_IP} -p PORT−a&quot;{PORT} -a &quot;PORT−a&quot;{PW}&quot; instance_name=gdlf mkdir -p /redis/${instance_name}/{conf,log,snapshot} cp REDISHOME/conf/redis.conf/redis/{REDIS_HOME}/conf/redis.conf /redis/REDIS​H​​OME/conf/redis.conf/redis/{instance_name}/conf/ R_PORT=7379 R_instance_name=${instance_name} R_maxmemory=1073741824 R_IP=10.240.37.231 cd /redis/instancename/conf/sed−i&quot;s/RIP/{instance_name}/conf/ sed -i &quot;s/R_IP/instance​n​​ame/conf/sed−i&quot;s/R​I​​P/{R_IP}/g&quot; redis.conf sed -i “s/R_PORT/RPORT/g&quot;redis.confsed−i&quot;s/Rinstancename/{R_PORT}/g&quot; redis.conf sed -i &quot;s/R_instance_name/R​P​​ORT/g&quot;redis.confsed−i&quot;s/R​i​​nstance​n​​ame/{R_instance_name}/g” redis.conf sed -i &quot;s/R_maxmemory/Rmaxmemory/g&quot;redis.confcat/redis/{R_maxmemory}/g&quot; redis.conf cat /redis/R​m​​axmemory/g&quot;redis.confcat/redis/{instance_name}/conf/redis.conf | grep -e “^daemonize” -e “^pidfile” -e “^logfile” -e “^dir” -e “^maxmemory” -e “^bind” -e “^port” cd /redis/${instance_name}/ cp REDISHOME/tools/env.instanceenv.{REDIS_HOME}/tools/env.instance env.REDIS​H​​OME/tools/env.instanceenv.{instance_name} cp ${REDIS_HOME}/tools/instance.start.sh start.sh cp ${REDIS_HOME}/tools/instance.stop.sh stop.sh cp ${REDIS_HOME}/tools/instance.cli.sh cli.sh cd /redis/instancename/sed−i&quot;s/Rinstancename/{instance_name}/ sed -i &quot;s/R_instance_name/instance​n​​ame/sed−i&quot;s/R​i​​nstance​n​​ame/{instance_name}/g&quot; env.instancenamesed−i&quot;s/Rinstancename/{instance_name} sed -i &quot;s/R_instance_name/instance​n​​amesed−i&quot;s/R​i​​nstance​n​​ame/{instance_name}/g&quot; start.sh sed -i “s/R_instance_name/instancename/g&quot;stop.shsed−i&quot;s/Rinstancename/{instance_name}/g&quot; stop.sh sed -i &quot;s/R_instance_name/instance​n​​ame/g&quot;stop.shsed−i&quot;s/R​i​​nstance​n​​ame/{instance_name}/g” cli.sh chmod +x /redis/instancename/start.shchmod+x/redis/{instance_name}/start.sh chmod +x /redis/instance​n​​ame/start.shchmod+x/redis/{instance_name}/stop.sh chmod +x /redis/instancename/cli.shcat&gt;&gt;/home/AppAutoStartRedis.sh&lt;&lt;EOFsu−lredis−c&quot;/redis/{instance_name}/cli.sh cat &gt;&gt; /home/AppAutoStart_Redis.sh &lt;&lt; EOF su -l redis -c &quot;/redis/instance​n​​ame/cli.shcat&gt;&gt;/home/AppAutoStart​R​​edis.sh&lt;&lt;EOFsu−lredis−c&quot;/redis/{instance_name}/start.sh&quot; EOF /redis/${instance_name}/start.sh /redis/${instance_name}/cli.sh 集群： cd /redis/{instance_name}/conf/ sed -i \"s/\\# cluster-config-file nodes-6379.conf/cluster-config-file ..\\/conf\\/nodes-{instance_name}.conf/g&quot; redis.conf sed -i “s/# cluster-enabled yes/cluster-enabled yes/g” redis.conf sed -i “s/# cluster-node-timeout 15000/cluster-node-timeout 5000/g” redis.conf sed -i “s/# cluster-require-full-coverage yes/cluster-require-full-coverage yes/g” redis.conf cd /redis/${instance_name}/conf/ cat redis.conf | grep -e “^cluster-config-file” -e “^cluster-enabled” -e “^cluster-node-timeout” -e “^cluster-require-full-coverage” /redis/${instance_name}/start.sh root: cd /redis/install umask 022 yum -y install ruby cd /redis/install gem install -l redis-3.3.5.gem cp /redis/install/redis-4.0.12/src/redis-trib.rb ${REDIS_HOME}/bin redis-trib.rb create 10.240.37.226:7379 10.240.37.245:7379 10.240.37.231:7379 redis-trib.rb add-node --slave 10.240.37.231:7380 10.240.37.231:7379 redis-trib.rb check 10.240.37.245:7380 config set masterauth okcenno config set requirepass okcenno auth okcenno config rewrite 处一节点 cd /usr/local/share/gems/gems/redis-3.3.5/lib/redis/ PW=okcenno sed -i “s/:password =&gt; nil,/:password =&gt; “${PW}”,/g” client.rb redis-trib.rb check 10.240.37.231:7380 哨兵： sentinel_name=sentinel instance_name=gdlf mkdir -p /redis/${sentinel_name}/{conf,log,snapshot} cp REDISHOME/conf/sentinel.conf/redis/{REDIS_HOME}/conf/sentinel.conf /redis/REDIS​H​​OME/conf/sentinel.conf/redis/{sentinel_name}/conf/sentinel.conf B_IP=10.240.54.190 MASTER_IP=10.240.54.190 L_PORT=27379 master_name=${instance_name} master_port=7379 PW=okcenno cd /redis/sentinelname/conf/sed−i&quot;s/BIP/{sentinel_name}/conf/ sed -i &quot;s/B_IP/sentinel​n​​ame/conf/sed−i&quot;s/B​I​​P/{B_IP}/g&quot; sentinel.conf sed -i “s/MASTER_IP/MASTERIP/g&quot;sentinel.confsed−i&quot;s/LPORT/{MASTER_IP}/g&quot; sentinel.conf sed -i &quot;s/L_PORT/MASTER​I​​P/g&quot;sentinel.confsed−i&quot;s/L​P​​ORT/{L_PORT}/g” sentinel.conf sed -i “s/R_sentinel/sentinelname/g&quot;sentinel.confsed−i&quot;s/mastername/{sentinel_name}/g&quot; sentinel.conf sed -i &quot;s/master_name/sentinel​n​​ame/g&quot;sentinel.confsed−i&quot;s/master​n​​ame/{master_name}/g” sentinel.conf sed -i “s/master_port/masterport/g&quot;sentinel.confsed−i&quot;s/PW/{master_port}/g&quot; sentinel.conf sed -i &quot;s/PW/master​p​​ort/g&quot;sentinel.confsed−i&quot;s/PW/{PW}/g” sentinel.conf cat /redis/${sentinel_name}/conf/sentinel.conf cd /redis/${sentinel_name}/ cp REDISHOME/tools/env.sentinelenv.{REDIS_HOME}/tools/env.sentinel env.REDIS​H​​OME/tools/env.sentinelenv.{sentinel_name} cp ${REDIS_HOME}/tools/sentinel.start.sh start.sh cp ${REDIS_HOME}/tools/sentinel.stop.sh stop.sh cp ${REDIS_HOME}/tools/sentinel.cli.sh cli.sh cd /redis/sentinelname/sed−i&quot;s/Rsentinelname/{sentinel_name}/ sed -i &quot;s/R_sentinel_name/sentinel​n​​ame/sed−i&quot;s/R​s​​entinel​n​​ame/{sentinel_name}/g&quot; env.sentinelnamesed−i&quot;s/Rsentinelname/{sentinel_name} sed -i &quot;s/R_sentinel_name/sentinel​n​​amesed−i&quot;s/R​s​​entinel​n​​ame/{sentinel_name}/g&quot; start.sh sed -i “s/R_sentinel_name/sentinelname/g&quot;stop.shsed−i&quot;s/Rsentinelname/{sentinel_name}/g&quot; stop.sh sed -i &quot;s/R_sentinel_name/sentinel​n​​ame/g&quot;stop.shsed−i&quot;s/R​s​​entinel​n​​ame/{sentinel_name}/g” cli.sh chmod +x /redis/sentinelname/start.shchmod+x/redis/{sentinel_name}/start.sh chmod +x /redis/sentinel​n​​ame/start.shchmod+x/redis/{sentinel_name}/stop.sh chmod +x /redis/sentinelname/cli.shcat&gt;&gt;/home/AppAutoStartRedis.sh&lt;&lt;EOFsu−lredis−c&quot;/redis/{sentinel_name}/cli.sh cat &gt;&gt; /home/AppAutoStart_Redis.sh &lt;&lt; EOF su -l redis -c &quot;/redis/sentinel​n​​ame/cli.shcat&gt;&gt;/home/AppAutoStart​R​​edis.sh&lt;&lt;EOFsu−lredis−c&quot;/redis/{sentinel_name}/start.sh&quot; EOF","categories":[],"tags":[]},{"title":"","slug":"python-pip-configuration","date":"2021-12-05T12:32:55.888Z","updated":"2021-12-10T11:17:45.748Z","comments":true,"path":"2021/12/05/python-pip-configuration/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/python-pip-configuration/","excerpt":"","text":"Linux / Mac / Windows 安装/配置/使用pip 安装 123456curl curl https://bootstrap.pypa.io/get-pip.py -o get-pip.pypython get-pip.pypython3 get-pip.py# 部分Linux可以通过包管理器sudo apt-get install python-pip 配置国内源 UNIX 12345vim ~/.pip/pip.conf[global]index-url = https://mirrors.aliyun.com/pypi/simple[install]trusted-host = https://mirrors.aliyun.com NT 123456md %HOMEPATH%\\piptouch %HOMEPATH%\\pip\\pip.ini[global]index-url = https://mirrors.aliyun.com/pypi/simple[install]trusted-host = https://mirrors.aliyun.com 用法 123456789101112131415161718192021222324252627282930pip --versionpip3 --versionpip --help# 升级pippip install -U pipsudo easy_install --upgrade pippython -m pip install -U pippip install packagepip install package==versionpip install package&gt;=versionpython2 -m pip install packagepython3 -m pip install packagepip install --upgrade packagepip uninstall packagepip search pacakge# 显示安装包信息pip show# 查看指定包的详细信息pip show -f package# 列出已安装的包pip list# 查看可升级的包pip list -o Reference cnblogs: Python pip配置国内源 runoob.com: Python pip 安装与使用","categories":[],"tags":[]},{"title":"","slug":"npm","date":"2021-12-05T12:32:55.859Z","updated":"2021-12-10T05:36:01.893Z","comments":true,"path":"2021/12/05/npm/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/npm/","excerpt":"","text":"npm npm更换源 1234567891011npm get registrynpm config set registry http://registry.npm.taobao.org/yarn config set registry http://registry.npm.taobao.org/# 安装淘宝npmnpm install -g cnpm --registry=https://registry.npm.taobao.orgnpm list -g --depth 0npm cache verifynpm cache clean --forcenpm uninstall * https://nodejs.org/en/","categories":[],"tags":[]},{"title":"","slug":"os/rpm/linux_tool_network_related","date":"2021-12-05T12:32:55.840Z","updated":"2021-12-05T12:32:55.841Z","comments":true,"path":"2021/12/05/os/rpm/linux_tool_network_related/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/os/rpm/linux_tool_network_related/","excerpt":"","text":"&lrm; /* @licstart The following is the entire license notice for the JavaScript code in this tag. Copyright (C) 2012-2020 Free Software Foundation, Inc. The JavaScript code in this tag is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License (GNU GPL) as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. The code is distributed WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU GPL for more details. As additional permission under GNU GPL version 3 section 7, you may distribute non-source (e.g., minimized or compacted) forms of that code without the copy of the GNU GPL normally required by section 4, provided you include this license notice and a URL through which recipients can access the Corresponding Source. @licend The above is the entire license notice for the JavaScript code in this tag. */ #title: Linux中网络分析工具 Created: 2021-01-25 周一 14:28 Validate","categories":[],"tags":[]},{"title":"","slug":"os/rpm/linux-sftp-server","date":"2021-12-05T12:32:55.828Z","updated":"2021-12-05T12:32:55.828Z","comments":true,"path":"2021/12/05/os/rpm/linux-sftp-server/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/os/rpm/linux-sftp-server/","excerpt":"","text":"ftp server 构建 ftp server[1][2] 1yum install vsftpd ftp的配置文件主要有三个，位于/etc/vsftpd/目录下. ftpusers 该文件用来指定那些用户不能访问ftp服务器 user_list 该文件用来指示的默认账户在默认情况下也不能访问ftp vsftpd.conf vsftpd的主配置文件 12345678vim /etc/vsftpd/vsftpd.confanon_upload_enable=NOanon_mkdir_write_enable=NOuserlist_enable=YESuserlist_file=/etc/vsftpd/vsftpd.user_listuserlist_deny=NOpasv_min_port=50000pasv_max_port=60000 sftp server[3][4][5] 构建sftp的目标 安全隔离 访问控制 用户控制 登陆控制 日志审计[6] 操作审计 命令审计 构建 sftp server 透过ssh的sftp sftp采用的是ssh加密隧道，安装性方面较ftp强，而且依赖的是系统自带的ssh服务，不像ftp还需要额外的进行安装. 123456789101112131415161718192021mkdir /data/sftp/mysftpgroupadd sftpuseradd -g sftp -d /data/sftp/mysftp -s /bin/false -M mysftpvim /etc/sshd/sshd_config # Subsystem sftp /usr/libexec/openssh/sftp-server -l INFO -f AUTH Subsystem sftp internal-sftp -l INFO -f AUTH # 指定使用sftp服务使用系统自带的internal-sftp LogLevel INFO Match Group sftp # 匹配sftp组的用户,若要匹配多个组,可用逗号分开,也可用“Match User USERNAME”来匹配用户 ChrootDirectory /data/sftp/%u # 限制用户的根目录,将用户锁定在自己的home目录中，使其不可浏览上级目录。并且该行一定要在“Match”语句下方. %u 或者 %h ForceCommand internal-sftp # 只能用于sftp登录 AllowTcpForwarding no # 禁止用户使用端口转发 X11Forwarding no # 禁止用户使用端口转发chown root:sftp /data/sftp/mysftp //据说属主必须为root,可以不是rootchmod 755 /data/sftp/mysftp //据说权限应低于等于755,否则登陆报错mkdir /data/sftp/mysftp/uploadchown mysftp:sftp /data/sftp/mysftp/uploadchmod 755 /data/sftp/mysftp/uploadsetenforce 0systemctl stop firewalldsftp mysftp@ip-addr 注意事项[7] ChrootDirectory设置的目录权限及其所有的上级文件夹权限，属主和属组必须是root； ChrootDirectory设置的目录权限及其所有的上级文件夹权限，只有属主能拥有写权限，也就是说权限最大设置只能是755 常见报错 /data/sftp目录权限分配不当,属主必须为root,属组可以为sftp组 1234$ sftp -P 12012 userrenwolecom@10.28.204.62userrenwolecom@10.28.204.62&#x27;s password:packet_write_wait: Connection to 10.28.204.62 port 12012: Broken pipeCouldn&#x27;t read packet: Connection reset by peer 重启sshd后，当前终端不会断开，新建终端输入正确密码后会出现SSH登录闪退（自动关闭终端）问题 12vim /etc/sshd/sshd_configMatch Group username # 此处不应该使用sftp组内的具体某个sftp服务的用户,用该写 sftp组(但是和另一博客的内容有冲突) sshd 启动报错: /var/empty must be owned by root and not group or world-writable. 12chmod 744 /var/emptychown -R root. /var/empty sublime sftp 插件 123456789&quot;upload_on_save&quot;: true, # 保存的时候自动上传到服务器&quot;sync_down_on_open&quot;: true, # 开本地文件编辑的时候，自动下载远程文件来更新本地 &quot;host&quot;: &quot;xxx.com&quot;,&quot;user&quot;: &quot;xxx&quot;,&quot;password&quot;: &quot;xxx&quot;,&quot;port&quot;: &quot;22&quot;,&quot;remote_path&quot;: &quot;/xxx/xxx&quot;, Linux环境下快速搭建ftp服务器方法介绍 ↩︎ Linux中FTP服务器 ↩︎ sftp 多用户安装与配置 ↩︎ linux如何搭建sftp服务器 ↩︎ Linux 下sftp配置之密钥方式登录详解 ↩︎ CentOS下配置SFTP操作日志 ↩︎ Linux下搭建SFTP服务器 ↩︎","categories":[],"tags":[]},{"title":"","slug":"os/rpm/linux-rhel-systemd-tmpfiles","date":"2021-12-05T12:32:55.824Z","updated":"2021-12-05T12:32:55.825Z","comments":true,"path":"2021/12/05/os/rpm/linux-rhel-systemd-tmpfiles/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/os/rpm/linux-rhel-systemd-tmpfiles/","excerpt":"","text":"systemd-tmpfiles定时清理任务 access.redhat.com How to auto clean up files in a specific directory regularly on RHEL7 access.redhat.com How to exclude a folder from getting deleted by “tmpwatch” access.redhat.com How to exclude files or directories from periodic clean up by tmpfiles-clean access.redhat.com Oracle application or database failures due to files being deleted within the /tmp or /var/tmp directories","categories":[],"tags":[]},{"title":"","slug":"kvm/kvm-迁移","date":"2021-12-05T12:32:55.810Z","updated":"2021-12-05T12:32:55.811Z","comments":true,"path":"2021/12/05/kvm/kvm-迁移/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/kvm/kvm-%E8%BF%81%E7%A7%BB/","excerpt":"","text":"vmdk迁移至KVM virt-v2v 工具自动化的解决了 VMware ESX/ESXi 服务器上的 RHEL 虚拟机和 Windows 虚拟机迁移到 KVM 主机的问题。而且在迁移的过程中尽量的使用 virtio 驱动提高 IO 设备的性能。但是，virt-2v2 工具也有一些局限性。比如只支持虚拟机关机情况下的静态迁移；只支持 RHEL 虚拟机和 Windows 虚拟机的迁移；不支持 VMware 虚拟机快照的迁移。对于创建在 VMware Workstation/Player 上的虚拟机，目前 virt-v2v 还不支持自动迁移。 host machine 1yum install libguestfs-winsupport virtio-win VMware虚拟机转KVM 1234567891011qemu-img convert -f vmdk -O qcow2 Metasploitable.vmdk Metasploitable.imgqemu-img info Metasploitable.img@ https://launchpad.net/ubuntu/+source/virt-goodies/0.4vmware2libvirt -f Metasploitable.vmx &gt; Metasploitable.xmlvirsh -c qemu://system define Metasploitable.xmlsudo virt-manager Reference IBM: 迁移 VMware 虚拟机到 VM Redhat: Converting virtual machines from other hypervisors to KVM with virt-v2v in RHEL 7 and RHEL 8","categories":[],"tags":[]},{"title":"","slug":"kvm/kvm-virtulization","date":"2021-12-05T12:32:55.806Z","updated":"2021-12-05T12:32:55.807Z","comments":true,"path":"2021/12/05/kvm/kvm-virtulization/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/kvm/kvm-virtulization/","excerpt":"","text":"Kernel.org KVM Reference howstuffworks: How Server Virtualization Works Wikipedia: OS-level Virtualization csdn: 虚拟化及KVM相关介绍 csdn: kvm虚拟化之CPU虚拟化 csdn: 虚拟化的发展历程和实现方式 it168: X86虚拟化之三种服务器虚拟化战略架构 csdn 全虚拟化与半虚拟化的实现方式 csdn: 虚拟化技术的分类及介绍","categories":[],"tags":[]},{"title":"","slug":"kvm/kvm-virtio","date":"2021-12-05T12:32:55.802Z","updated":"2021-12-05T12:32:55.803Z","comments":true,"path":"2021/12/05/kvm/kvm-virtio/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/kvm/kvm-virtio/","excerpt":"","text":"KVM Linux开启virtio 123456789101112131415161718192021222324252627[root@kvm-host]# virsh domblklist --domain vm01hda /var/lib/libvirt/iamges/vm01-os.qcow2[root@vm01]# lsmod | grep -i virtiovirtio_ballon 18015 0virtio_console 28076 0virtio_pci 22985 0virtio_ring 22746 0virtio[root@vm01]# cat &gt;&gt; /etc/sysconfig/modules/virtio.modules&lt;&lt;EOFmodprobe virtio_blkmodprobe virtio_scsi[root@vm01]# chmod a+x /etc/sysconfig/modules/virtio.modules[root@vm01]# mkinitrd --with virtio --with virtio_pci --with virtio_blk --with virtio_net -f boot/initrd-$(uname -r).img $(uname -r)[root@vm01]# sync[root@vm01]# reboot[root@kvm-host]# virsh domblklist vm01vda /var/lib/libvirt/iamges/vm01-os.qcow2[root@vm01]# lsmod | grep -i virtiovirtio_scsi 18463 0virtio_blk 18323 0virtio_ballon 18015 0virtio_console 28076 0virtio_pci 22985 0virtio_ring 22746 0virtio[root@vm01]# lspci | grep -i virtioß Reference Fedora: virtio-win iso Fedora: virtio iso Fedora: Creating Windows virtual machines using virtIO drivers csdn: Linux开启virtio cnblogs: kvm上的Linux虚拟机使用virtio磁盘 cnblogs: KVM下windows虚拟机使用virtio驱动","categories":[],"tags":[]},{"title":"","slug":"kvm/kvm-virt-install","date":"2021-12-05T12:32:55.800Z","updated":"2021-12-05T12:32:55.801Z","comments":true,"path":"2021/12/05/kvm/kvm-virt-install/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/kvm/kvm-virt-install/","excerpt":"","text":"KVM virt-install 123456789101112virt-install --name=win7_ui_yang --ram=1024 --vcpus=4 --os-type=Windows --hvm --cdrom=/opt/cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso --file=/db/win7_ui_yang.img --file-size=20 --vnc --vncport=5951--name： 设置虚拟机名称--cdrom： 使用cdrom安装系统，制定ISO位置--ram： 配置虚拟机内存，单位为MB--file： 设置虚拟机硬盘文件路径--vcpus：配置CPU个数--file-size： 配置虚拟机硬盘文件大小，单位：GB--hvm： 配置使用全虚拟化--bridge： 配置桥接网卡--os-type： 制定操作系统类型，如Linux、Windows --vnc：打开VNC支持--vncport： 配置VNC端口 Reference cnblogs: VMware下的Centos7实践Kvm虚拟化","categories":[],"tags":[]},{"title":"","slug":"kvm/kvm-virt-clone","date":"2021-12-05T12:32:55.798Z","updated":"2021-12-05T12:32:55.798Z","comments":true,"path":"2021/12/05/kvm/kvm-virt-clone/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/kvm/kvm-virt-clone/","excerpt":"","text":"KVM 虚拟机克隆 12345678910111213141516171819virt-cloneOptions（一些基本的选项）：--version：查看版本-h，--help：查看帮助信息--connect=URI：连接到虚拟机管理程序 libvirt 的URIGeneral Option（一般选项）：-o ORIGINAL_GUEST, --original=ORIGINAL_GUEST：原来的虚拟机名称-n NEW_NAME, --name=NEW_NAME：新的虚拟机名称--auto-clone：从原来的虚拟机配置自动生成克隆名称和存储路径。-u NEW_UUID, --uuid=NEW_UUID：克隆虚拟机的新的UUID，默认值是一个随机生成的UUIDStorage Configuration（存储配置）：-f NEW_DISKFILE, --file=NEW_DISKFILE：指定新的虚拟机磁盘文件--force-copy=TARGET：强制复制设备--nonsparse：不使用稀疏文件复制磁盘映像Networking Configuration:（网络配置）-m NEW_MAC, --mac=NEW_MAC：设置一个新的mac地址，默认是一个随机的mac 1virt-clone --connect qemu:///system --original centos6.9-1-clone --name centos6.9-4 --file /data/kvm/image/centos6.9-4.raw Reference KVM下windows虚拟机使用virtio驱动","categories":[],"tags":[]},{"title":"","slug":"kvm/kvm-vcpu-vmem","date":"2021-12-05T12:32:55.795Z","updated":"2021-12-05T12:32:55.795Z","comments":true,"path":"2021/12/05/kvm/kvm-vcpu-vmem/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/kvm/kvm-vcpu-vmem/","excerpt":"","text":"KVM中的在线调整 CPU热添加 注意事项 假的热添加，不过是不超限制的在线调整。 KVM虚拟化 不能在线减少CPU，cpu热添加技术适合 不能停机但是cpu性能严重不足 的场景 CPU热添加的技术对宿主机以及虚拟机操作系统版本要求较高 CPU热添加，总数不能大于最大CPU个数 1234567virsh dominfo --domain centos7.0virsh setvcpus CentOS-7.3-X86_64 3 --live #cpu的在线个数调整为3个virsh setvcpus CentOS-7.3-X86_64 3 --config #写到配置文件 永久[root@localhost ~]# cat /proc/interrupts[root@localhost ~]# cat /proc/cpuinfo[root@localhost ~]# lscpu kvm 内存调整 在线调整内存 调小虚拟机内存可以动态实现，不用关机 KVM内存气球技术 气球技术最大的优点是内存可以超用；缺点是是有可能造成内存不够使用而影响性能；KVM内存气球技术可以对虚拟机使用的内存按需调节，从而提高内存的利用率。内存方面的调优手段主要是KSM，即相同内存页合并，内存气球技术和大页内存的使用虚拟机需要安装virtio balloon驱动，内核开启CONFIG_VIRTIO_BALLOON。CentOS6/7默认已安装驱动并开启。 膨胀：操作的内存被拿掉给宿主机 压缩：宿主机的内存还给你虚拟机 1234567891011121314[root@node3 qemu]# virsh dumpxml --domain domain_name | grep memballoon -C2 &lt;memballoon model=&#x27;virtio&#x27;&gt; &lt;alias name=&#x27;balloon0&#x27;/&gt; &lt;address type=&#x27;pci&#x27; domain=&#x27;0x0000&#x27; bus=&#x27;0x00&#x27; slot=&#x27;0x08&#x27; function=&#x27;0x0&#x27;/&gt; &lt;/memballoon&gt;# 查看内存气球大小[root@node3 qemu]# virsh qemu-monitor-command --domain domain_name --hmp --cmd info balloonballoon: actual=1024# 配置内存气球大小[root@node3 qemu]# virsh qemu-monitor-command --domain domain_name --hmp --cmd balloon 2048[root@node3 qemu]# virsh qemu-monitor-command --domain domain_name --hmp --cmd info balloonballoon: actual=2048","categories":[],"tags":[]},{"title":"","slug":"kvm/kvm-sites","date":"2021-12-05T12:32:55.793Z","updated":"2021-12-05T12:32:55.794Z","comments":true,"path":"2021/12/05/kvm/kvm-sites/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/kvm/kvm-sites/","excerpt":"","text":"officail: Kernel Virtual Machine official: libvirt official: virt-manger official: virt-manger’s git official: libguestfs network official: Open vSwitch Others Github: oz","categories":[],"tags":[]},{"title":"","slug":"kvm/kvm-rhv-ovirt","date":"2021-12-05T12:32:55.792Z","updated":"2021-12-05T12:32:55.793Z","comments":true,"path":"2021/12/05/kvm/kvm-rhv-ovirt/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/kvm/kvm-rhv-ovirt/","excerpt":"","text":"Product Documentation for Red Hat Enterprise Linux 7 Redhat:Product Documentation for Red Hat Virtualization 4.3 Ovirt(RHV)部署 CHAPTER 3. INSTALLING RED HAT VIRTUALIZATION","categories":[],"tags":[]},{"title":"","slug":"kvm/kvm-notes","date":"2021-12-05T12:32:55.788Z","updated":"2021-12-05T12:32:55.789Z","comments":true,"path":"2021/12/05/kvm/kvm-notes/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/kvm/kvm-notes/","excerpt":"","text":"UMA NUMA SMP MPP numactl --hardware numastat numastat -c /proc/sys/kernel/numa_balancing 跨NUMA节点的内存合并 /sys/kernel/mm/ksm/merge_across_nodes CPU绑定 NUMA自动平衡 CPU压测工具unixbench CPU热添加是CentOS7的新特性","categories":[],"tags":[]},{"title":"","slug":"kvm/kvm-migration","date":"2021-12-05T12:32:55.787Z","updated":"2021-12-05T12:32:55.787Z","comments":true,"path":"2021/12/05/kvm/kvm-migration/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/kvm/kvm-migration/","excerpt":"","text":"KVM迁移 动态迁移 1[root@kvm-host1]# virsh migrate --live --verbose --abort-on-error --unsafe domain_name qemu+ssh://kvm-host2/system Reference csdn: KVM——虚拟机迁移","categories":[],"tags":[]},{"title":"","slug":"kvm/kvm-libguestfs","date":"2021-12-05T12:32:55.783Z","updated":"2021-12-05T12:32:55.784Z","comments":true,"path":"2021/12/05/kvm/kvm-libguestfs/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/kvm/kvm-libguestfs/","excerpt":"","text":"libguestfs tools official: libguestfs 123sudo yum install libguestfs-tools # Fedora/RHEL/CentOSsudo apt-get install libguestfs-tools # Debian/Ubuntuguestfish --ro -i -a disk.img","categories":[],"tags":[]},{"title":"","slug":"kvm/kvm-depoly","date":"2021-12-05T12:32:55.782Z","updated":"2021-12-05T12:32:55.782Z","comments":true,"path":"2021/12/05/kvm/kvm-depoly/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/kvm/kvm-depoly/","excerpt":"","text":"Aliyun CentOS yum Aliyun CentOS Repo 配置CentOS 阿里云源 12mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backupwget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo 安装开发工具 1yum install kernel-headers-`uname -r` kernel-devel-`uname -r` vim gcc make automake autoconf gcc-c++ wget curl libcurl 安装kvm 1yum install -y libvirt-admin.x86_64 libvirt-client.x86_64 libvirt-daemon.x86_64 libvirt-daemon-config-network.x86_64 libvirt-daemon-config-nwfilter.x86_64 libvirt-daemon-driver-interface.x86_64 libvirt-daemon-driver-lxc.x86_64 libvirt-daemon-driver-network.x86_64 libvirt-daemon-driver-nodedev.x86_64 libvirt-daemon-driver-nwfilter.x86_64 libvirt-daemon-driver-qemu.x86_64 libvirt-daemon-driver-secret.x86_64 libvirt-daemon-driver-storage.x86_64 libvirt-daemon-driver-storage-core.x86_64 libvirt-dbus.x86_64 libvirt-devel.x86_64 libvirt-gconfig.i686 libvirt-gconfig.x86_64 libvirt-gconfig-devel.x86_64 libvirt-glib.x86_64 libvirt-glib-devel.x86_64 libvirt-gobject.x86_64 libvirt-gobject-devel.x86_64 libvirt-java.noarch libvirt-java-devel.noarch libvirt-java-javadoc.noarch libvirt-nss.x86_64 libvirt-python.x86_64 libvirt-snmp.x86_64 nbdkit-plugin-libvirt.x86_64 ocaml-libvirt.x86_64 ocaml-libvirt-devel.x86_64 php-libvirt.x86_64 php-libvirt-doc.noarch python36-libvirt.x86_64 rubygem-ruby-libvirt.x86_64 rubygem-ruby-libvirt-doc.noarch collectd-virt.x86_64 fence-agents-virsh.x86_64 libvirt.x86_64 libvirt-bash-completion.x86_64 libvirt-daemon-driver-storage-disk.x86_64 libvirt-daemon-driver-storage-gluster.x86_64 libvirt-daemon-driver-storage-iscsi.x86_64 libvirt-daemon-driver-storage-logical.x86_64 libvirt-daemon-driver-storage-mpath.x86_64 libvirt-daemon-driver-storage-rbd.x86_64 libvirt-daemon-driver-storage-scsi.x86_64 libvirt-daemon-kvm.x86_64 libvirt-daemon-lxc.x86_64 libvirt-docs.x86_64 libvirt-libs.x86_64 libvirt-lock-sanlock.x86_64 libvirt-login-shell.x86_64 perl-Sys-Virt.x86_64 virt-manager.noarch 安装磁盘工具qemu 1yum install -y centos-release-qemu-ev.noarch ipxe-roms-qemu.noarch libvirt-daemon-driver-qemu.x86_64 qemu.x86_64 qemu-common.x86_64 qemu-guest-agent.x86_64 qemu-img.x86_64 qemu-kvm.x86_64 qemu-kvm-common.x86_64 qemu-system-alpha.x86_64 qemu-system-arm.x86_64 qemu-system-cris.x86_64 qemu-system-lm32.x86_64 qemu-system-m68k.x86_64 qemu-system-microblaze.x86_64 qemu-system-mips.x86_64 qemu-system-moxie.x86_64 qemu-system-or32.x86_64 qemu-system-s390x.x86_64 qemu-system-sh4.x86_64 qemu-system-unicore32.x86_64 qemu-system-x86.x86_64 qemu-system-xtensa.x86_64 qemu-user.x86_64 libvirt-lock-sanlock.x86_64 qemu-kvm-tools.x86_64 安装网络工具 1yum install -y bridge-utils.x86_64 cockpit-bridge.x86_64 console-bridge-devel.x86_64 net-tools iproute 1yum install libguestfs-bash-completion.noarch libguestfs-benchmarking.x86_64 libguestfs-devel.x86_64 libguestfs-gfs2.x86_64 libguestfs-gobject.x86_64 libguestfs-gobject-devel.x86_64 libguestfs-java.x86_64 libguestfs-java-devel.x86_64 libguestfs-javadoc.noarch libguestfs-man-pages-ja.noarch libguestfs-man-pages-uk.noarch libguestfs-rsync.x86_64 libguestfs-xfs.x86_64 ocaml-libguestfs.x86_64 ocaml-libguestfs-devel.x86_64 python-libguestfs.x86_64 ruby-libguestfs.x86_64 libguestfs.x86_64 libguestfs-inspect-icons.noarch libguestfs-rescue.x86_64 libguestfs-tools.noarch libguestfs-tools-c.x86_64 libguestfs-winsupport.x86_64 lua-guestfs.x86_64 nbdkit-plugin-guestfs.x86_64 perl-Sys-Guestfs.x86_64 补全功能 1yum install -y bash-completion.noarch bash-completion-extras.noarch libguestfs-bash-completion.noarch libvirt-bash-completion.x86_64 1yum install -y virt-dib.x86_64 virt-install.noarch virt-manager.noarch virt-manager-common.noarch virt-p2v-maker.x86_64 virt-v2v.x86_64 virt-viewer.x86_64 virt-who.noarch 1234567egrep &#x27;(vmx|svm)&#x27; /proc/cpuinfomodprobe kvmmodprobe kvm_intelsystemctl start libvirtdsystemctl enable libvirtd virt-install 12345678910111213–name 指定虚拟机的名称–memory 指定分配给虚拟机的内存资源大小maxmemory 指定可调节的最大内存资源大小，因为KVM支持热调整虚拟机的资源–vcpus 指定分配给虚拟机的CPU核心数量maxvcpus 指定可调节的最大CPU核心数量–os-type 指定虚拟机安装的操作系统类型–os-variant 指定系统的发行版本–location 指定ISO镜像文件所在的路径，支持使用网络资源路径，也就是说可以使用URL–disk path 指定虚拟硬盘所存放的路径及名称，size 则是指定该硬盘的可用大小，单位是G–bridge 指定使用哪一个桥接网卡，也就是说使用桥接的网络模式–graphics 指定是否开启图形–console 定义终端的属性，target_type 则是定义终端的类型–extra-args 定义终端额外的参数 1virt-install --name=gurobi --memory=512,maxmemory=1024 --vcpus=1,maxvcpus=2 --os-type=linux --os-variant=rhel7 --location=/tmp/CentOS-7-x86_64-DVD-1708.iso --disk path=/kvm_data/gurobi.img,size=10 --bridge=br0 --graphics=none --console=pty,target_type=serial --extra-args=&quot;console=tty0 console=ttyS0&quot; 123456789virsh console xxx # 进入指定的虚拟机，进入的时候还需要按一下回车virsh start xxx # 启动虚拟机virsh shutdown xxx # 关闭虚拟机virsh destroy xxx # 强制停止虚拟机virsh undefine xxx # 彻底销毁虚拟机，会删除虚拟机配置文件，但不会删除虚拟磁盘virsh autostart xxx # 设置宿主机开机时该虚拟机也开机virsh autostart --disable xxx # 解除开机启动virsh suspend xxx # 挂起虚拟机virsh resume xxx # 恢复挂起的虚拟机","categories":[],"tags":[]},{"title":"","slug":"kvm/kvm-cpu","date":"2021-12-05T12:32:55.781Z","updated":"2021-12-05T12:32:55.781Z","comments":true,"path":"2021/12/05/kvm/kvm-cpu/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/kvm/kvm-cpu/","excerpt":"","text":"关于host-passthrough的注意事项 需要将物理CPU的一些特性传给虚拟机使用，比如虚拟机嵌套的nested技术的时候 需要在虚拟机里面看到和物理CPU一模一样的CPU品牌型号，这个在一些公有云很有意义，用户体验比较好 注意，不同型号的CPU的宿主机之间虚拟机不能迁移 kvm 报错 https://blog.csdn.net/yu_jinyu/article/details/53083571 qemu+ssh://root@192.168.222.139/system","categories":[],"tags":[]},{"title":"","slug":"kubernetes_depoyment","date":"2021-12-05T12:32:55.778Z","updated":"2021-12-05T12:32:55.779Z","comments":true,"path":"2021/12/05/kubernetes_depoyment/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/kubernetes_depoyment/","excerpt":"","text":"Kubernetes Deploy本文记载Kubernetes通过kubeadm方式安装的详细过程及遇到的问题与解决方法。更新于2020-08-02 Kubernetes源考虑到国内的网络环境，采用 阿里云 mirrors.aliyun.com 的源. https://developer.aliyun.com/mirror/kubernetes下载地址：https://mirrors.aliyun.com/kubernetes/官方主页：https://kubernetes.io/ aliyun-kubernetes.repoaliyun-docker-ce.repo yum install docker-ceyum install -y kubelet-1.18.2 kubeadm-1.18.2 kubectl-1.18.2 (1)借助NTP服务设置节点时间精确同步;(2)通过DNS完成各节点的主机名解析，测试环境主机数量较少时也可以使用hosts文件进行;(3)关闭各节点的iptables或firewalld服务,并确保它们被禁止随系统引导过程启动;(4)各节点禁用Selinux(否则在运行容器时可以会遇到各种奇葩报错);(5)各节点禁用所有的swap设备(生产环境中强烈建议禁用,虽说K8S也支持配置参数来启用swap但这样会降低集群性能，使用”swapoff -a”只是临时关闭交换分区使用,永久关闭需要编辑”/etc/fstab”文件将挂载swap哪一行前面加一个”#”进行注释);(6)若要使用ipvs模型的proxy，各节点还需要载入ipvs相关的各模块 1. Kubernetes Repo /etc/yum.repos.d/kubernetes-aliyun.repo 1234567[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg 2. Yum install Kubeadm12345678910111213141516setenforce 0yum install -y kubelet-1.18.2 kubeadm-1.18.2 kubectl-1.18.2yum install -y --nogpgcheck kubelet kubeadm kubectlsystemctl enable kubelet &amp;&amp; systemctl start kubelet[root@master01 ~]# kubeadm config images listW0727 15:53:36.203783 21851 version.go:102] could not fetch a Kubernetes version from the internet: unable to get URL &quot;https://dl.k8s.io/release/stable-1.txt&quot;: Get https://dl.k8s.io/release/stable-1.txt: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)W0727 15:53:36.203925 21851 version.go:103] falling back to the local client version: v1.18.2W0727 15:53:36.204122 21851 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]k8s.gcr.io/kube-apiserver:v1.18.2k8s.gcr.io/kube-controller-manager:v1.18.2k8s.gcr.io/kube-scheduler:v1.18.2k8s.gcr.io/kube-proxy:v1.18.2k8s.gcr.io/pause:3.2k8s.gcr.io/etcd:3.4.3-0k8s.gcr.io/coredns:1.6.7 3. 调整docker12345678docker infocat &gt;/etc/docker/daemon.json &lt;&lt;EOF&#123; &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;], &quot;registry-mirrors&quot;: [&quot;https://2325obkh.mirror.aliyuncs.com&quot;]&#125;EOF docker自1.13版起会自动设置iptable的FORWARD默认策略为DROP，这可能会影响kubernetes集群依赖的报文转发功能,因此，需要在docker服务启动后，重新将FORWARD链的默认策略设置为ACCEPT。 vim /usr/lib/systemd/system/docker.service”在”ExecStart=/usr/bin/dockerd -H fd:// –containerd=/run/containerd/containerd.sock”之后新增一行”ExecStartPost=/usr/sbin/iptables -P FORWARD ACCEPT”(意思是docker服务器启动成功后会执行执行该命令) 12vim /etc/sysconfig/kubeletKUBELET_EXTRA_ARGS=&quot;--fail-swap-on=false&quot; systemctl daemon-reload 4. 调整系统参数12345yum install chronychronyc sourcestats -vswapoff -asetenforce=0systemctl stop firewalld.service 加载ipvs模块 1234567891011121314151617vim /etc/sysconfig/modules/ipvs.modules#!/usr/bin/env bashipvs_mods_dir=&quot;/usr/lib/modules/$(uname -r)/kernel/net/netfilter/ipvs&quot;for mod in $(ls $ipvs_mods_dir | grep -o &quot;^[^.]*&quot;);do /usr/sbin/modinfo -F filename $mod &amp;&gt; /dev/null if [ $? -eq 0 ];then /sbin/modprobe $mod fidone# master与node上均执行chmod +x /etc/sysconfig/modules/ipvs.moduleslsmod | grep ip_vs kubeadm config print init-defaults kubeadm config images listkubeadm config images pull docker imagesdocker image lsdocker image tag old_image:version new_image:versiondocker image pulldocker image rm registry.cn-hangzhou.aliyuncs.com__google_containers__kube-proxy__v1.18.2.tar = registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.18.2 =registry.cn-hangzhou.aliyuncs.com__google_containers__pause__v3.2.tar = registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2 = k8s.gcr.io/pause:3.2registry.aliyuncs.com__google_containers__etcd__v3.4.3-0.tar = registry.aliyuncs.com/google_containers/etcd:3.4.3-0 = k8s.gcr.io/etcd:3.4.3-0registry.cn-hangzhou.aliyuncs.com__google_containers__coredns__v1.6.7.tar = registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.7 = k8s.gcr.io/coredns:1.6.7 docker save registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy -o registry.cn-hangzhou.aliyuncs.com__google_containers__kube-proxy__v1.18.2.tardocker save registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver -o registry.cn-hangzhou.aliyuncs.com__google_containers__kube-apiserver__v1.18.2.tardocker save registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager -o registry.cn-hangzhou.aliyuncs.com__google_containers__kube-controller-manager__v1.18.2.tardocker save registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler -o registry.cn-hangzhou.aliyuncs.com__google_containers__kube-scheduler__v1.18.2.tardocker save registry.cn-hangzhou.aliyuncs.com/google_containers/pause -o registry.cn-hangzhou.aliyuncs.com__google_containers__pause__v3.2.tardocker save registry.aliyuncs.com/google_containers/etcd -o registry.aliyuncs.com__google_containers__etcd__v3.4.3-0.tardocker save registry.cn-hangzhou.aliyuncs.com/google_containers/coredns -o registry.cn-hangzhou.aliyuncs.com__google_containers__coredns__v1.6.7.tar docker image tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.18.2 k8s.gcr.io/kube-proxy:v1.18.2docker image tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.18.2 k8s.gcr.io/kube-apiserver:v1.18.2docker image tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.18.2 k8s.gcr.io/kube-controller-manager:v1.18.2docker image tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.18.2 k8s.gcr.io/kube-scheduler:v1.18.2docker image tag registry.aliyuncs.com/google_containers/pause:3.2 k8s.gcr.io/pause:3.2docker image tag registry.aliyuncs.com/google_containers/etcd:3.4.3-0 k8s.gcr.io/etcd:3.4.3-0docker image tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.7 k8s.gcr.io/coredns:1.6.7 [root@master01 ~]# docker image lsREPOSITORY TAG IMAGE ID CREATED SIZEk8s.gcr.io/kube-proxy v1.18.2 0d40868643c6 3 months ago 117MBk8s.gcr.io/kube-controller-manager v1.18.2 ace0a8c17ba9 3 months ago 162MBk8s.gcr.io/kube-scheduler v1.18.2 a3099161e137 3 months ago 95.3MBk8s.gcr.io/kube-apiserver v1.18.2 6ed75ad404bd 3 months ago 173MBk8s.gcr.io/pause 3.2 80d28bedfe5d 5 months ago 683kBk8s.gcr.io/coredns 1.6.7 67da37a9a360 6 months ago 43.8MBk8s.gcr.io/etcd 3.4.3-0 303ce5db0e90 9 months ago 288MB docker import registry.aliyuncs.com__google_containers__etcd__v3.4.3-0.tar k8s.gcr.io/etcd:3.4.3-0docker import registry.cn-hangzhou.aliyuncs.com__google_containers__coredns__v1.6.7.tar k8s.gcr.io/coredns:1.6.7docker import registry.cn-hangzhou.aliyuncs.com__google_containers__kube-apiserver__v1.18.2.tar k8s.gcr.io/kube-apiserver:v1.18.2docker import registry.cn-hangzhou.aliyuncs.com__google_containers__kube-controller-manager__v1.18.2.tar k8s.gcr.io/kube-controller-manager:v1.18.2docker import registry.cn-hangzhou.aliyuncs.com__google_containers__kube-proxy__v1.18.2.tar k8s.gcr.io/kube-proxy:v1.18.2docker import registry.cn-hangzhou.aliyuncs.com__google_containers__kube-scheduler__v1.18.2.tar k8s.gcr.io/kube-scheduler:v1.18.2docker import registry.cn-hangzhou.aliyuncs.com__google_containers__pause__v3.2.tar k8s.gcr.io/pause:3.2 初始化CLuster 初始测试dry-run kubeadm init –apiserver-advertise-address=192.168.221.134 –image-repository registry.aliyuncs.com/google_containers –kubernetes-version v1.18.2 –pod-network-cidr=10.244.0.0/16 –dry-run init cluster kubeadm init –apiserver-advertise-address=192.168.221.134 –image-repository registry.aliyuncs.com/google_containers –kubernetes-version v1.18.2 –pod-network-cidr=10.244.0.0/16 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172[root@master01 tmp]# kubeadm init --apiserver-advertise-address=192.168.221.134 --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.18.2 --pod-network-cidr=10.244.0.0/16W0727 16:40:13.862004 32012 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io][init] Using Kubernetes version: v1.18.2[preflight] Running pre-flight checks[preflight] Pulling images required for setting up a Kubernetes cluster[preflight] This might take a minute or two, depending on the speed of your internet connection[preflight] You can also perform this action in beforehand using &#x27;kubeadm config images pull&#x27;[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;[kubelet-start] Starting the kubelet[certs] Using certificateDir folder &quot;/etc/kubernetes/pki&quot;[certs] Generating &quot;ca&quot; certificate and key[certs] Generating &quot;apiserver&quot; certificate and key[certs] apiserver serving cert is signed for DNS names [master01 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.221.134][certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key[certs] Generating &quot;front-proxy-ca&quot; certificate and key[certs] Generating &quot;front-proxy-client&quot; certificate and key[certs] Generating &quot;etcd/ca&quot; certificate and key[certs] Generating &quot;etcd/server&quot; certificate and key[certs] etcd/server serving cert is signed for DNS names [master01 localhost] and IPs [192.168.221.134 127.0.0.1 ::1][certs] Generating &quot;etcd/peer&quot; certificate and key[certs] etcd/peer serving cert is signed for DNS names [master01 localhost] and IPs [192.168.221.134 127.0.0.1 ::1][certs] Generating &quot;etcd/healthcheck-client&quot; certificate and key[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key[certs] Generating &quot;sa&quot; key and public key[kubeconfig] Using kubeconfig folder &quot;/etc/kubernetes&quot;[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file[control-plane] Using manifest folder &quot;/etc/kubernetes/manifests&quot;[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;W0727 16:40:22.595129 32012 manifests.go:225] the default kube-apiserver authorization-mode is &quot;Node,RBAC&quot;; using &quot;Node,RBAC&quot;[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;W0727 16:40:22.596079 32012 manifests.go:225] the default kube-apiserver authorization-mode is &quot;Node,RBAC&quot;; using &quot;Node,RBAC&quot;[etcd] Creating static Pod manifest for local etcd in &quot;/etc/kubernetes/manifests&quot;[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;/etc/kubernetes/manifests&quot;. This can take up to 4m0s[apiclient] All control plane components are healthy after 24.507077 seconds[upload-config] Storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace[kubelet] Creating a ConfigMap &quot;kubelet-config-1.18&quot; in namespace kube-system with the configuration for the kubelets in the cluster[upload-certs] Skipping phase. Please see --upload-certs[mark-control-plane] Marking the node master01 as control-plane by adding the label &quot;node-role.kubernetes.io/master=&#x27;&#x27;&quot;[mark-control-plane] Marking the node master01 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule][bootstrap-token] Using token: a4imyy.ttddd23g8ddh7dv7[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace[kubelet-finalize] Updating &quot;/etc/kubernetes/kubelet.conf&quot; to point to a rotatable kubelet client certificate and key[addons] Applied essential addon: CoreDNS[addons] Applied essential addon: kube-proxyYour Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user: mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/configYou should now deploy a pod network to the cluster.Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at: https://kubernetes.io/docs/concepts/cluster-administration/addons/Then you can join any number of worker nodes by running the following on each as root:kubeadm join 192.168.221.134:6443 --token a4imyy.ttddd23g8ddh7dv7 \\ --discovery-token-ca-cert-hash sha256:4f784226e480a6de709b1f21e6e67ec02050942e634968002c1b86e670db9b0c [root@master01 tmp]# kubeadm init –kubernetes-version=v1.14.2 –pod-network-cidr=10.244.0.0/16 –service-cidr=10.96.0.0/12 –ignore-preflight-errors=Swap 检查kubelet.service 状态 12345678910111213141516171819202122232425262728293031323334353637383940[root@master01 ~]# systemctl status kubelet -l● kubelet.service - kubelet: The Kubernetes Node Agent Loaded: loaded (/usr/lib/systemd/system/kubelet.service; enabled; vendor preset: disabled) Drop-In: /usr/lib/systemd/system/kubelet.service.d └─10-kubeadm.conf Active: active (running) since Mon 2020-07-27 16:40:53 CST; 1min 25s ago Docs: https://kubernetes.io/docs/ Main PID: 33413 (kubelet) Tasks: 16 Memory: 74.7M CGroup: /system.slice/kubelet.service └─33413 /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --config=/var/lib/kubelet/config.yaml --cgroup-driver=systemd --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.2 --fail-swap-on=falseJul 27 16:41:54 master01 kubelet[33413]: E0727 16:41:54.116034 33413 kubelet.go:2187] Container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitializedJul 27 16:41:55 master01 kubelet[33413]: W0727 16:41:55.025914 33413 cni.go:237] Unable to update cni config: no networks found in /etc/cni/net.dJul 27 16:41:59 master01 kubelet[33413]: E0727 16:41:59.233911 33413 kubelet.go:2187] Container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitializedJul 27 16:42:00 master01 kubelet[33413]: W0727 16:42:00.028419 33413 cni.go:237] Unable to update cni config: no networks found in /etc/cni/net.dJul 27 16:42:04 master01 kubelet[33413]: E0727 16:42:04.354686 33413 kubelet.go:2187] Container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitializedJul 27 16:42:05 master01 kubelet[33413]: W0727 16:42:05.029246 33413 cni.go:237] Unable to update cni config: no networks found in /etc/cni/net.dJul 27 16:42:09 master01 kubelet[33413]: E0727 16:42:09.444976 33413 kubelet.go:2187] Container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitializedJul 27 16:42:10 master01 kubelet[33413]: W0727 16:42:10.048128 33413 cni.go:237] Unable to update cni config: no networks found in /etc/cni/net.dJul 27 16:42:14 master01 kubelet[33413]: E0727 16:42:14.551861 33413 kubelet.go:2187] Container runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitializedJul 27 16:42:15 master01 kubelet[33413]: W0727 16:42:15.049274 33413 cni.go:237] Unable to update cni config: no networks found in /etc/cni/net.d[root@master01 ~]# ## 部署Network Pluginmkdir .kubecp /etc/kubernetes/admin.conf .kube/config```shell[root@master01 ~]# kubectl get nodesNAME STATUS ROLES AGE VERSIONmaster01 NotReady master 11m v1.18.2# 添加一个node后[root@master01 ~]# kubectl get nodesNAME STATUS ROLES AGE VERSIONcentos77minimal NotReady &lt;none&gt; 41s v1.18.2master01 NotReady master 22m v1.18.2 node 添加ipvs.modulesnode 导入k8s-image.tarcp master:/etc/sysconfig/kubelet node kubeadm resetkubeadm token create –print-join-commandkubectl get pods -n kube-system 查看pod产生的日志kubectl logs -f calico-node-5rgfg -n kube-system kubectl describe pod calico-node-5rgfg -n kube-system 查看pod的具体描述 kubectl -n kube-system get ev 查看集群环境输出 flannelsysctl net.bridge.bridge-nf-call-iptables=1","categories":[],"tags":[]},{"title":"","slug":"javascript","date":"2021-12-05T12:32:55.777Z","updated":"2021-12-05T12:32:55.778Z","comments":true,"path":"2021/12/05/javascript/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/javascript/","excerpt":"","text":"JavaScript JavaScript 语句是 发给浏览器的命令 。这些命令的作用是告诉浏览器要做的事情。 HTML 中的脚本必须位于 与 标签之间。 脚本可被放置在 HTML 页面的 和 部分中。 JavaScript 语句 和 JavaScript 变量 都对大小写 敏感。常见的是驼峰法的命名规则，如 lastName (而不是lastname) 分号 用于分隔 JavaScript 语句; 分号来结束语句是 可选的；不用对 return 语句进行断行。 多种数据类型：数字，字符串，数组，对象等等 使用 关键字 var 来定义变量 代码是 JavaScript 语句的序列；浏览器按照 编写顺序 依次执行每条语句。 代码块以 左花括号 开始，以 右花括号 结束。 会 忽略多余的空格。您可以向脚本添加空格，来提高其可读性 在文本字符串中使用 反斜杠 对代码行进行换行。 单行注释以 // 开头。多行注释以 /* 开始，以 */ 结尾。 重新声明 JavaScript 变量，该变量的值 不会丢失 字符串可以是引号中的任意文本，可以使用 单引号 或 双引号 声明新变量时，可以使用关键词 “new” 来声明其类型。JavaScript 变量均为对象。声明一个变量时，就创建了一个新的对象。JavaScript 对象是拥有属性和方法的数据。 JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明；变量提升：函数声明和变量声明总是会被解释器悄悄地被”提升”到方法体的最顶部；JavaScript 初始化不会提升，JavaScript 只有声明的变量会提升，初始化的不会。 JavaScript 严格模式(strict mode)不允许使用未声明的变量。 使用名字来作为索引的数组称为关联数组(或哈希)。JavaScript 不支持使用名字 来索引数组，只允许使用数字索引 在 JavaScript 中, 对象 使用 名字作为索引 在 JavaScript 中, null 用于对象, undefined 用于变量，属性和方法。 JavaScript数据类型 JavaScript 拥有动态类型 值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。 引用数据类型：对象(Object)、数组(Array)、函数(Function)。 对象类型：Object、Date、Array 不包含任何值的数据类型： null、undefined JavaScript关键字 语句 描述 break 用于跳出循环。 catch 语句块，在 try 语句块执行出错时执行 catch 语句块。 continue 跳过循环中的一个迭代。 do … while 执行一个语句块，在条件语句为 true 时继续执行该语句块。 for 在条件语句为 true 时，可以将代码块执行指定的次数。 for … in 用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。 function 定义一个函数 if … else 用于基于不同的条件来执行不同的动作。 return 退出函数 switch 用于基于不同的条件来执行不同的动作。 throw 抛出（生成）错误 。 try 实现错误处理，与 catch 一同使用。 var 声明一个变量。 while 当条件语句为 true 时，执行语句块。 JavaScript 函数和事件JavaScript 输出JavaScript 没有任何打印或者输出的函数。 JavaScript 可以通过不同的方式来输出数据 使用 window.alert() 弹出警告框。 使用 document.write() 方法将内容写到 HTML文档中。 使用 innerHTML 写入到 HTML 元素。 使用 console.log() 写入到浏览器的控制台。 JavaScript 正则表达式JavaScript 变量提升JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。 JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。 变量提升(hoisting)：函数声明和变量声明总是会被解释器悄悄地被”提升”到方法体的最顶部。 JavaScript 初始化不会提升，只有声明的变量会提升，初始化的不会 严格模式 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为; 消除代码运行的一些不安全之处，保证代码运行的安全； 提高编译器效率，增加运行速度； 为未来新版本的Javascript做好铺垫。 严格模式的限制 “use strict” 指令只允许出现在脚本或函数的开头 不允许使用未声明的变量 不允许删除变量或对象 不允许删除函数 不允许变量重名 不允许使用八进制 不允许使用转义字符 不允许对只读属性赋值 不允许对一个使用getter方法读取的属性进行赋值 不允许删除一个不允许删除的属性 变量名不能使用 “eval” 字符串 变量名不能使用 “arguments” 字符串 由于一些安全原因，在作用域 eval() 创建的变量不能被调用 禁止this关键字指向全局对象；使用构造函数时，如果忘了加new，this不再指向全局对象 JavaScript表单数据验证可以使用不同方法来定义，并通过多种方式来调用 验证方式 服务端数据验证是在数据提交到服务器上后再验证。 客户端数据验证是在数据发送到服务器前，在浏览器上完成验证。 约束验证（constraint validation）：约束验证是表单被提交时浏览器用来实现验证的一种算法。","categories":[],"tags":[]},{"title":"","slug":"git","date":"2021-12-05T12:32:55.771Z","updated":"2021-12-05T12:32:55.771Z","comments":true,"path":"2021/12/05/git/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/git/","excerpt":"","text":"fetch：做了这个操作就可以看别人最新代码提交到什么进度了pull：将自己本地的提交点同步到远端最新（需要先fetch，不fetch会出问题想理解原理自己看）commit：本地操作提交一个提交点(先说前提本地操作随便玩弄错也没事儿 反正是自己本地操作）push：向远端推送本地提交点(向远端推送提交点这步非常容易出现错误，比如起冲突怎么办，涉及到远端操作要小心）merge：合代码的 效果类似于svn的合代码 原理是将两个分支合成一个提交点进行提交。现在的常见操作一般是先rebase再merge 因为这样冲突可以在rebase 的阶段解决。rebase：变基，这个是非常非常非常重要的一个概念，一定要理解这个概念，这个操作可以让你的git提交变的美观，优雅。为什么？因为可以压缩提交点并逼迫你解决冲突。属于本地操作但是这一步之后别人merge了代码，你push的时候还是容易出错所以还是要小心。还是原理看书。revert 可以 到挑选以前的内容进行回滚。或者直接本地改乱了 想直接和远端分支一样也可以用。reset 用来回滚到某个提交","categories":[],"tags":[]},{"title":"","slug":"emacs-macos升级后无法tab补全","date":"2021-12-05T12:32:55.767Z","updated":"2021-12-10T05:34:34.210Z","comments":true,"path":"2021/12/05/emacs-macos升级后无法tab补全/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/emacs-macos%E5%8D%87%E7%BA%A7%E5%90%8E%E6%97%A0%E6%B3%95tab%E8%A1%A5%E5%85%A8/","excerpt":"","text":"MacOS升级后EMACS无法补全 Emacs For Mac OS X Update to Emacs 26.3 12345% cd /Applications/Emacs.app/Contents/MacOS% mv Emacs Emacs-launcher% mv Emacs-x86_64-10_14 Emacs% cd /Applications/Emacs.app/Contents/% rm -rf _CodeSignature Reference 系统升级导致emacs 不能用C-x C-f来进入某些目录","categories":[],"tags":[]},{"title":"","slug":"css","date":"2021-12-05T12:32:55.761Z","updated":"2021-12-05T12:32:55.761Z","comments":true,"path":"2021/12/05/css/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/css/","excerpt":"","text":"csscss结构1选择器 &#123;声明&#125; css选择器 HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 “#” 来定义 HTML中以class属性表示, 在 CSS 中，类选择器以一个点”.”号显示 12345678910111213&lt;style&gt;#para1&#123;2text-align:center;2color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p id=&quot;para1&quot;&gt;Hello World!&lt;/p&gt;&lt;p&gt;这个段落不受该样式的影响。&lt;/p&gt;&lt;/body&gt; 12345678910p.center&#123;2text-align:center;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 class=&quot;center&quot;&gt;这个标题不受影响&lt;/h1&gt;&lt;p class=&quot;center&quot;&gt;这个段落居中对齐。&lt;/p&gt; css插入样式表 外部样式表(External style sheet) 内部样式表(Internal style sheet) 内联样式(Inline style) 内联样式）Inline style &gt; （内部样式）Internal style sheet &gt;（外部样式）External style sheet &gt; 浏览器默认样式;如果外部样式放在内部样式的后面，则外部样式将覆盖内部样式 1234567891011121314151617@ 对 ul 生效ul&#123;2list-style-type:none;2padding:0px;2margin:0px;&#125;@ 对 ul 中的 li 生效ul li&#123;2background-image:url(sqpurple.gif);2background-repeat:no-repeat;2background-position:0px 5px; 2padding-left:14px;&#125; 12345@ 同时对table, th, td 生效 (分组选择器)table,th,td&#123;2border:1px solid black;&#125; CSS 盒子模型Box Model Margin(外边距) - 清除边框外的区域，外边距是透明的。 Border(边框) - 围绕在内边距和内容外的边框。 Padding(内边距/填充) - 清除内容周围的区域，内边距是透明的。 Content(内容) - 盒子的内容，显示文本和图像。 12345678910111213141516171819202122border-style: dotted solid double dashed;上边框是 dotted右边框是 solid底边框是 double左边框是 dashedborder-style: dotted solid double;上边框是 dotted左、右边框是 solid底边框是 doubleborder-style: dotted solid;上、底边框是 dotted右、左边框是 solidborder-style: dotted;四面边框是 dotted@ border-style 也可以和 border-width 、 border-color 一起使用border:5px solid red; CSS 轮廓（outline） 轮廓（outline）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。 轮廓（outline）属性指定元素轮廓的样式、颜色和宽度。 CSS 分组 和 嵌套 选择器 css分组 1234h1,h2,p&#123; color:green;&#125; 嵌套 p{ }: 为所有 p 元素指定一个样式。 .marked{ }: 为所有 class=”marked” 的元素指定一个样式。 .marked p{ }: 为所有 class=”marked” 元素内的 p 元素指定一个样式。 p.marked{ }: 为所有 class=”marked” 的 p 元素指定一个样式。 12345678910111213141516p&#123; color:blue; text-align:center;&#125;.marked&#123; background-color:red;&#125;.marked p&#123; color:white;&#125;p.marked&#123; text-decoration:underline;&#125; CSS Display(显示) 与 Visibility（可见性） 隐藏一个元素可以通过把display属性设置为”none”，或把visibility属性设置为”hidden” visibility:hidden可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。也就是说，该元素虽然被隐藏了，但仍然会影响布局。 display:none可以隐藏某个元素，且隐藏的元素不会占用任何空间。也就是说，该元素不但被隐藏了，而且该元素原本占用的空间也会从页面布局中消失。 CSS Display - 块和内联元素 块元素是一个元素，占用了全部宽度，在前后都是换行符。 块元素的例子 123&lt;h1&gt;&lt;p&gt;&lt;div&gt; 内联元素只需要必要的宽度，不强制换行。 内联元素的例子 12&lt;span&gt;&lt;a&gt; CSS 布局 - OverflowCSS overflow 属性可以控制内容溢出元素框时在对应的元素区间内添加滚动条。 值 描述 visible 默认值。内容不会被修剪，会呈现在元素框之外。 hidden 内容会被修剪，并且其余内容是不可见的。 scroll 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。 auto 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。 inherit 规定应该从父元素继承 overflow 属性的值。 CSS Float(浮动)CSS 的 Float（浮动），会使元素向左或向右移动，其周围的元素也会重新排列。 Float（浮动），往往是用于图像，但它在布局时一样非常有用。 元素的水平方向浮动，意味着元素只能左右移动而不能上下移动。 一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。 浮动元素之后的元素将围绕它。 浮动元素之前的元素将不会受到影响。 CSS 组合选择符组合选择符说明了两个选择器直接的关系。 组合方式 后代选择器(以空格分隔) ：后代选择器用于选取某元素的后代元素。 子元素选择器(以大于号分隔）：只能选择作为某元素子元素的元素。 相邻兄弟选择器（以加号分隔）：可选择紧接在另一元素后的元素，且二者有相同父元素。 普通兄弟选择器（以破折号分隔） CSS 伪类(Pseudo-classes)伪类的语法： selector:pseudo-class {property:value;} CSS类也可以使用伪类： selector.class:pseudo-class {property:value;} CSS 导航栏CSS 提示工具(Tooltip)CSS 媒体类型CSS 属性 选择器具有特定属性的HTML元素样式不仅仅是class和id。","categories":[],"tags":[]},{"title":"","slug":"bootstrap","date":"2021-12-05T12:32:55.758Z","updated":"2021-12-05T12:32:55.759Z","comments":true,"path":"2021/12/05/bootstrap/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/bootstrap/","excerpt":"","text":"基本结构 Bootstrap 提供了一个带有网格系统、链接样式、背景的基本结构。 CSS Bootstrap 自带以下特性：全局的 CSS 设置、定义基本的 HTML 元素样式、可扩展的 class，以及一个先进的网格系统。。 组件 Bootstrap 包含了十几个可重用的组件，用于创建图像、下拉菜单、导航、警告框、弹出框等等。 JavaScript 插件 Bootstrap 包含了十几个自定义的 jQuery 插件。您可以直接包含所有的插件，也可以逐个包含这些插件。 为了让 Bootstrap 开发的网站对移动设备友好，确保适当的绘制和触屏缩放，需要在网页的 head 之中添加 viewport meta 标签 123&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;# width 属性控制设备的宽度。假设您的网站将被带有不同屏幕分辨率的设备浏览，那么将它设置为 device-width 可以确保它能正确呈现在不同设备上。# initial-scale=1.0 确保网页加载时，以 1:1 的比例呈现，不会有任何的缩放 1234567&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;# 在移动设备浏览器上，通过为 viewport meta 标签添加 user-scalable=no 可以禁用其缩放（zooming）功能。# 通常情况下，maximum-scale=1.0 与 user-scalable=no 一起使用。这样禁用缩放功能后，用户只能滚动屏幕，就能让您的网站看上去更像原生应用的感觉。 [root@localhost]#","categories":[],"tags":[]},{"title":"","slug":"arch_installation_by_hand","date":"2021-12-05T12:32:55.756Z","updated":"2021-12-05T12:32:55.756Z","comments":true,"path":"2021/12/05/arch_installation_by_hand/","link":"","permalink":"http://jsunnyr.github.io/2021/12/05/arch_installation_by_hand/","excerpt":"","text":"Arch123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475# vim /etc/pacman.d/mirrorlist## 163 mirrorServer = http://mirrors.163.com/archlinux/$repo/os/$arch## aliyun mirrorServer = http://mirrors.aliyun.com/archlinux/$repo/os/$arch# timedatectl set-ntp true# fdisk -l# mkfs.ext2 /dev/sda1# mkswap /dev/sda2# swapon /dev/sda2//try mkfs.xfs, but failed to boot after installation# mkfs.ext4 /dev/mapper/vg_root-lv_root# mkdir /mnt/boot# mount /dev/mapper/vg_root-lv_root /mnt# mount /dev/sda1 /mnt/boot# pacstrap /mnt base linux linux-firmware# genfstab -U /mnt &gt;&gt; /mnt/etc/fstab# arch-chroot /mnt# ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime# hwclock --systohc# vim /etc/locale.confLANG=en_US.UTF-8# locale-gen# vim /etc/hostnamearch-tmux# 修改mkinitcpio.conf的动作仅需在启用LVM的时候操作，如果根目录ext4,则无需- [虚拟机中archlinux尝试LVM分区](https://www.cnblogs.com/Z-X-L/archive/2013/01/26/2878091.html)# vim /etc/mkinitcpio.confmkinitcpio 的 lvm 设定HOOKS=“...”那一行中加入 lvm2注意这个 HOOKS 里边模块的顺序就是加载顺序lvm2 必须在filesystems 前边MODULES=(dm_mod)HOOKS=(base udev ... lvm2 filesystems)# mkinitcpio -P# pacman -S grub# vim /etc/default/grubGRUB_PRELOAD_MODULES=&quot;part_gpt part_msdos lvm&quot;# grub-install --target=i386-pc /dev/sda# grub-mkconfig -o /boot/grub/grub.cfg# passwd# exit# reboot Reference Arch Installation guide LVM 虚拟机中archlinux尝试LVM分区 安装 archlinux 之使用 lvm xorg1234567pacman -S xorg/usr/bin/Xorg -configureX -config ./xorg.conf.newX -config ./xorg.conf.new -retro","categories":[],"tags":[]},{"title":"","slug":"linux-kernel-parameter-rp_filter","date":"2021-12-02T12:10:30.688Z","updated":"2021-12-02T12:10:30.688Z","comments":true,"path":"2021/12/02/linux-kernel-parameter-rp_filter/","link":"","permalink":"http://jsunnyr.github.io/2021/12/02/linux-kernel-parameter-rp_filter/","excerpt":"","text":"Linux Kernel Parameter : rp_filter rp_filter linux内核文档Documentation/networking/ip-sysctl.txt 12345678910111213141516171819202122rp_filter - INTEGER0 - No source validation.1 - Strict mode as defined in RFC3704 Strict Reverse Path Each incoming packet is tested against the FIB and if the interface is not the best reverse path the packet check will fail. By default failed packets are discarded.2 - Loose mode as defined in RFC3704 Loose Reverse Path Each incoming packet&#x27;s source address is also tested against the FIB and if the source address is not reachable via any interface the packet check will fail. Current recommended practice in RFC3704 is to enable strict modeto prevent IP spoofing from DDos attacks. If using asymmetric routingor other complicated routing, then loose mode is recommended. The max value from conf/&#123;all,interface&#125;/rp_filter is usedwhen doing source validation on the &#123;interface&#125;. Default value is 0. Note that some distributions enable itin startup scripts.即rp_filter参数有三个值，0、1、2，具体含义：0：不开启源地址校验。1：开启严格的反向路径校验。对每个进来的数据包，校验其反向路径是否是最佳路径。如果反向路径不是最佳路径，则直接丢弃该数据包。2：开启松散的反向路径校验。对每个进来的数据包，校验其源地址是否可达，即反向路径是否能通（通过任意网口），如果反向路径不同，则直接丢弃该数据包。 分析理解 源地址路由 source routing 安全问题 开启参数的优点 减少DDoS攻击 校验数据包的反向路径，如果反向路径不合适，则直接丢弃数据包，避免过多的无效连接消耗系统资源。 防止IP Spoofing 校验数据包的反向路径，如果客户端伪造的源IP地址对应的反向路径不在路由表中，或者反向路径不是最佳路径，则直接丢弃数据包，不会向伪造IP的客户端回复响应。 两种常见的非法攻击手段 DDos攻击(Distribute Deny of Service) 分布式拒绝服务攻击。通过构造大量的无用数据包向目标服务发起请求，占用目标服务主机大量的资源，还可能造成网络拥塞，进而影响到正常用户的访问。 IP Spoofing（IP欺骗） IP Spoofing指一个客户端通过伪造源IP，冒充另外一个客户端与目标服务进行通信，从而达到某些不可告人的秘密。 Reference Linux内核参数之rp_filter","categories":[],"tags":[]},{"title":"","slug":"npm","date":"2021-07-09T07:21:53.925Z","updated":"2021-07-09T07:21:53.925Z","comments":true,"path":"2021/07/09/npm/","link":"","permalink":"http://jsunnyr.github.io/2021/07/09/npm/","excerpt":"","text":"title: npm author: susu site: - cnblogs.com - csdn.net npm 12345# 配置npm源(https://mirrors.cloud.tencent.com/help/npm.html)npm config set registry http://mirrors.cloud.tencent.com/npm/npm i npm@latest -gnpm i cnpm -gcpnm install @vue/cli -g","categories":[],"tags":[]},{"title":"","slug":"rh124","date":"2021-06-29T02:10:10.754Z","updated":"2021-06-29T02:15:37.007Z","comments":true,"path":"2021/06/29/rh124/","link":"","permalink":"http://jsunnyr.github.io/2021/06/29/rh124/","excerpt":"","text":"重定向 123456789&gt;file&gt;&gt;file2&gt;file2&gt;/dev/null&amp;&gt;/file&amp;&gt;&gt;file|(pipe)tee","categories":[],"tags":[]},{"title":"RHEL编译安装 vim8.2","slug":"rhel编译安装vim82","date":"2021-06-17T05:58:04.569Z","updated":"2021-06-17T06:06:26.144Z","comments":true,"path":"2021/06/17/rhel编译安装vim82/","link":"","permalink":"http://jsunnyr.github.io/2021/06/17/rhel%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85vim82/","excerpt":"","text":"vim8.2 YouCompleteMe 需要vim 8 及 python3.6.0+支持。 12345678[root@master src]# yum install perl-devel python3-devel tcl-devel lua-devel ncurses-devel lua expectk expect-devel[root@master src]# tar -jxvf vim-8.2.tar.bz2[root@master src]# cd vim82/src[root@master src]# ./configure --prefix=/opt/vim82 --enable-luainterp=yes --enable-pythoninterp=yes --with-python3-command=python3 --with-python3-config-dir=/usr/lib64/python3.6/config-3.6m-x86_64-linux-gnu --enable-python3interp=yes --enable-tclinterp=yes --enable-rubyinterp=yes --enable-cscope --enable-terminal --enable-multibyte --with-tclsh=tclsh --with-ruby-command=ruby[root@master src]# make install[root@master src]# ln -s /opt/vim82/bin/vim /usr/local/sbin/vim[root@master src]# vim --version | grep python3+comments +linebreak +python3 +visualextra problem 源码编译vi过程中进行配置时报“checking if compile and link flags for Python are sane… no: PYTHON DISABLED” 1yum install python3-devel reference checking if compile and link flags for Python are sane… no: PYTHON DISABLED","categories":[],"tags":[],"author":"susu"},{"title":"","slug":"深度实践KVM","date":"2021-06-16T01:48:46.635Z","updated":"2021-06-16T01:48:46.639Z","comments":true,"path":"2021/06/16/深度实践KVM/","link":"","permalink":"http://jsunnyr.github.io/2021/06/16/%E6%B7%B1%E5%BA%A6%E5%AE%9E%E8%B7%B5KVM/","excerpt":"","text":"host numa 123456yum install numactlnumactl --hardwarenumastatnumastat -c qemu-kvmecho 1 &gt; /proc/sys/kernel/numa_balancingvirsh numatune 123456virsh vcpuinfo --domainvirsh emulatorpin --domainvirsh emulatorpin --domain domain xx-xx --livevirsh vcpupin --domain domain --vcpu 0 --cuplist 1-2 --live --configvirsh vcpupin --config --domain domainvirsh setvcpus --domain domain --live --config 2 --hotpluggable KSM 1echo 0 &gt; /sys/kernel/mm/ksm/merge_across_nodes nested 1234567rmmode kvm_intelmodprobe kvm_intel netsted=1(cat &gt; /etc/modprobe.d/kvm_mod.conf &lt;&lt;EOFoptions kvm_intel nested=yEOF)cat /sys/module/kvm_intel/parameters/nested VM cpu 123456789101112131415virsh vcpuinfo --domain domainvirsh vcpucount --live --domain domainvirsh vcpucount --config --domain domainvirsh setvcpus --domain domain --config --maximum 4virsh setvcpu --domain domain 1 --config --enablevirsh setvcps --domain domain 1 --config --hotpluggablevirsh start domain# runningvirsh setvcpus --domain domain --live --config 2 --hotpluggable# linuxvirsh setvcpus --domain domain x --liveecho 1 &gt; /sys/devices/system/cpu/cpux/online","categories":[],"tags":[]},{"title":"","slug":"cpp重点笔记","date":"2021-06-11T08:52:14.957Z","updated":"2021-06-18T06:49:04.869Z","comments":true,"path":"2021/06/11/cpp重点笔记/","link":"","permalink":"http://jsunnyr.github.io/2021/06/11/cpp%E9%87%8D%E7%82%B9%E7%AC%94%E8%AE%B0/","excerpt":"","text":"变量 变量声明 变量初始化 变量声明并初始化 表达式 lamda表达式 点运算符应用于实际的对象。箭头运算符与一个指向对象的指针一起使用。 C++ 提供了两种指针运算符，一种是取地址运算符 &amp;，一种是间接寻址运算符 *。 可以把 &amp; 运算符读作&quot;取地址运算符&quot;，这意味着，&amp;var 读作&quot;var 的地址&quot;。 间接寻址运算符 ，它是 &amp; 运算符的补充。 是一元运算符，返回操作数所指定地址的变量的值。 指针是一个包含了另一个变量地址的变量，您可以把一个包含了另一个变量地址的变量说成是&quot;指向&quot;另一个变量。变量可以是任意的数据类型，包括对象、结构或者指针。 函数调用 传值调用：默认情况下，C++ 使用传值调用方法来传递参数。一般来说，这意味着函数内的代码不会改变用于调用函数的实际参数。 指针调用：向函数传递参数的指针调用方法，把参数的地址复制给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。 引用调用 C 风格的字符串起源于 C 语言，并在 C++ 中继续得到支持。字符串实际上是使用 null 字符 \\0 终止的一维字符数组。因此，一个以 null 结尾的字符串，包含了组成字符串的字符。 数组 多维数组 指向数组的指针 传递数组给函数 从函数返回数组 指针 指针与数组 指针数组 数组指针 指向指针的指针 传递指针给函数 从函数返回指针 引用 传递引用给函数 从函数返回引用 范围解析运算符 :: 私有成员变量或函数在类的外部是不可访问的，甚至是不可查看的。只有类和友元函数可以访问私有成员。 默认情况下，类的所有成员都是私有的 https://www.runoob.com/cplusplus/cpp-constructor-destructor.html 封装 继承 多态 类成员函数 类访问修饰符 构造函数 析构函数 拷贝构造函数 友元函数 内联函数 this指针 指向类的指针 类的静态成员 重载运算符 重载函数 虚函数 纯虚函数 动态内存分配 数组的动态内存分配 命名空间namespace 模板 泛型编程 向量、链表、队列、栈 入门 C++面向对象编程思想； 类的封装，构造和析构、静态成员、对象管理； 类的构造(有参构造函数、无参构造、拷贝构造、默认构造函数)和析构； 对象动态管理、友元函数、友元类、操作符重载； C++编译器对象管理模型分析； 类对象的动态管理(new/delete)； 友元函数和友元类； 运算符重载(一元运算符、二元运算符、运算符重载难点、项目开发中的运算符重载)； 类的继承、多继承及其二义性、虚继承； 多态(概念、意义、原理剖析、多态案例)； 虚函数、纯虚函数、抽象类(面向抽象类编程思想案例)； 函数模板、类模板，模板的继承； C++类型转换； C++输入输出流(标准I/O 文件I/O 字符流I/O)； C++异常处理(异常机制、异常类型、异常变量、异常层次结构、标准异常库)； STL 设计模式 单例模式；工厂模式；代理模式；迭代模式 数据结构 这是所有编程语言中最应该学习的部分，程序组成的基础之一。 顺序存储、链式存储、循环链表； 双向链表、栈(顺序和链式)、队列(顺序和链式)； 栈的应用、树基本概念及遍历、二叉树； 排序算法、并归算法、选择、插入、快速、希尔。 C++进阶之UI界面开发 掌握QT类库构架，图形界面开发模型； 掌握QT开发技巧，消息机制，图形处理； 掌握QT网络编程，UDP，TCP使用方式； 掌握QT文件处理方式，序列化； 掌握QT在windows，linux，ios，android不同平台下的移植技术。 C++进阶之Unix/Linux网络服务器 掌握Unix/Linux平台开发方式； 熟练使用系统调用； 熟练Unix/Linux内存管理，进程，线程调度； 熟悉网络服务器开发方式，熟练编写TCP，UCP网络服务程序； 掌握同步/异步IO模型在网络编程中的使用方式。","categories":[],"tags":[]},{"title":"kubernetes 常用命令","slug":"kubernetes-common-command","date":"2021-06-10T15:25:28.697Z","updated":"2021-07-01T04:43:10.380Z","comments":true,"path":"2021/06/10/kubernetes-common-command/","link":"","permalink":"http://jsunnyr.github.io/2021/06/10/kubernetes-common-command/","excerpt":"","text":"https://kubernetes.io/zh/docs/tasks/debug-application-cluster/ Kubernetes help manual 12[root@master ~]# kubectl api-resources[root@master ~]# kubectl api-versions 查看Kubernetes集群版本信息 123kuberctl version [-o json|yaml] [--short=true|false]kuberctl cluster-info [dump]kuberctl config view Kubernetes cluster status 123456789101112131415161718192021222324252627[root@master ~]# kubectl get nodesNAME STATUS ROLES AGE VERSIONmaster Ready master 169m v1.18.2node01 Ready &lt;none&gt; 168m v1.18.2[root@master ~]# kubectl get pod --all-namespacesNAMESPACE NAME READY STATUS RESTARTS AGEkube-system coredns-546565776c-grgtm 1/1 Running 1 168mkube-system coredns-546565776c-jf54d 1/1 Running 1 168mkube-system etcd-master 1/1 Running 1 168mkube-system kube-apiserver-master 1/1 Running 1 168mkube-system kube-controller-manager-master 1/1 Running 1 168mkube-system kube-flannel-ds-4jdq9 1/1 Running 1 166mkube-system kube-flannel-ds-rqnb2 1/1 Running 1 166mkube-system kube-proxy-kv5bl 1/1 Running 1 168mkube-system kube-proxy-znnx6 1/1 Running 1 167mkube-system kube-scheduler-master 1/1 Running 1 168m[root@master ~]# kubectl get all svc --all-namespaceserror: you must specify only one resource[root@master ~]# kubectl get svc --all-namespacesNAMESPACE NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEdefault kubernetes ClusterIP 10.96.0.1 &lt;none&gt; 443/TCP 168mkube-system kube-dns ClusterIP 10.96.0.10 &lt;none&gt; 53/UDP,53/TCP,9153/TCP 168m[root@master ~]# kubectl get csNAME STATUS MESSAGE ERRORcontroller-manager Healthy okscheduler Healthy oketcd-0 Healthy &#123;&quot;health&quot;:&quot;true&quot;&#125; kubectl create 1234567891011121314151617181920212223242526272829303132333435//创建服务[root@localhost]# kubectl create -f xx_service.yaml --record[root@localhost]# kubectl get svc | grep xx_service_name[root@localhost]# kubectl describe svc/service_name//查看服务的内部dns地址[root@localhost]# kubectl run -i --tty busybox --image=busybox --restart=Never/# nslookup service_name//通过deployment控制器建立pod[root@Localhost]# kubectl create -f xx_depolyment.yaml --record=true//查看已创建的deployment[root@localhost]# kubectl get deploments//查看有哪些pod[root@localhost]# kubectl get pods| grep xx_service//查看pod日志[root@localhost]# kubectl logs -f pod_name//服务伸缩[root@localhost]# vi xx_deployment.yaml[root@localhost]# kubectl apply -f xx_deployment.yaml//服务升级[root@localhost]# vi xx_deployment.yaml[root@localhost]# kubectl apply -f xx_deployment.yaml//监视升级过程[root@localhost]# kubectl rollout status deployment/deployment_name//服务回退[root@localhost]# kubectl rollout undo deployments/deployment_name","categories":[],"tags":[]},{"title":"","slug":"CentOS 8 通过Minikube安装单机Kubernetes集群","date":"2021-06-03T07:55:50.863Z","updated":"2021-12-13T02:10:45.157Z","comments":true,"path":"2021/06/03/CentOS 8 通过Minikube安装单机Kubernetes集群/","link":"","permalink":"http://jsunnyr.github.io/2021/06/03/CentOS%208%20%E9%80%9A%E8%BF%87Minikube%E5%AE%89%E8%A3%85%E5%8D%95%E6%9C%BAKubernetes%E9%9B%86%E7%BE%A4/","excerpt":"","text":"CentOS 8 通过Minikube安装单机Kubernetes集群 12345678910111213[root@cenots8minimal ~]# cat /etc/redhat-releaseCentOS Linux release 8.2.2004 (Core)[root@cenots8minimal ~]# yum install podmanLast metadata expiration check: 1:49:53 ago on Thu 03 Jun 2021 02:04:06 PM CST.Package podman-2.2.1-7.module_el8.3.0+699+d61d9c41.x86_64 is already installed.Dependencies resolved.Nothing to do.Complete![root@cenots8minimal ~]#[root@cenots8minimal ~]# minikube start --vm-driver=podman --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers","categories":[],"tags":[]},{"title":"deploy efk add-on on kubernetes","slug":"efk-on-kubernetes","date":"2020-12-31T16:00:00.000Z","updated":"2021-06-14T14:31:32.022Z","comments":true,"path":"2021/01/01/efk-on-kubernetes/","link":"","permalink":"http://jsunnyr.github.io/2021/01/01/efk-on-kubernetes/","excerpt":"","text":"注意事项 efk用到的image需要在集群的各个节点本地有，不然会imagePullBackOff official docs fluentd-elasticsearch Docker @ Elastic fluentd-elasticsearch 123456789101112131415161718192021222324252627282930313233343536373839404142434445wget https://storage.googleapis.com/kubernetes-release/release/v1.14.1/kubernetes-server-linux-amd64.tar.gzmkdir ~/efktar -zxvf kubernetes-server-linux-amd64.tar.gzcd kubernetes &amp;&amp; tar -zxvf tar -zxvf kubernetes-src.tar.gzcp kubernetes/cluster/addons/fluentd-elasticsearch/*.yaml ~/efk/[root@master efk]# lses-service.yaml es-statefulset.yaml fluentd-es-configmap.yaml fluentd-es-ds.yaml kibana-deployment.yaml kibana-service.yaml[root@master ~]# grep -rn image ./*./efk/es-statefulset.yaml:76: - image: gcr.io/fluentd-elasticsearch/elasticsearch:v6.6.1./efk/es-statefulset.yaml:106: - image: alpine:3.6./efk/fluentd-es-configmap.yaml:205: # time=&quot;2016-02-04T07:53:57.505612354Z&quot; level=error msg=&quot;HTTP Error&quot; err=&quot;No such image: -f&quot; statusCode=404./efk/fluentd-es-ds.yaml:80: image: k8s.gcr.io/fluentd-elasticsearch:v2.4.0./efk/kibana-deployment.yaml:24: image: docker.elastic.co/kibana/kibana-oss:6.6.1[root@master ~]# docker pull docker.elastic.co/elasticsearch/elasticsearch:6.6.1[root@master ~]# docker pull alpine:3.6[root@master ~]# docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/fluentd-elasticsearch:v2.4.0[root@master ~]# docker pull docker.elastic.co/kibana/kibana-oss:6.6.1docker tag docker.elastic.co/elasticsearch/elasticsearch:6.6.1 gcr.io/fluentd-elasticsearch/elasticsearch:v6.6.1docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/fluentd-elasticsearch:v2.4.0 k8s.gcr.io/fluentd-elasticsearch:v2.4.0[root@master efk]# kubectl apply -f .service/elasticsearch-logging createdserviceaccount/elasticsearch-logging createdclusterrole.rbac.authorization.k8s.io/elasticsearch-logging createdclusterrolebinding.rbac.authorization.k8s.io/elasticsearch-logging createdstatefulset.apps/elasticsearch-logging createdconfigmap/fluentd-es-config-v0.2.0 createdserviceaccount/fluentd-es createdclusterrole.rbac.authorization.k8s.io/fluentd-es createdclusterrolebinding.rbac.authorization.k8s.io/fluentd-es createddaemonset.apps/fluentd-es-v2.4.0 createddeployment.apps/kibana-logging createdservice/kibana-logging created[root@master ~]# kubectl cluster-info Kubernetes master is running at https://192.168.1.2:6443Elasticsearch is running at https://192.168.1.2:6443/api/v1/namespaces/kube-system/services/elasticsearch-logging/proxyKibana is running at https://192.168.1.2:6443/api/v1/namespaces/kube-system/services/kibana-logging/proxyKubeDNS is running at https://192.168.1.2:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy直接访问https://192.168.11.150:6444/api/v1/namespaces/kube-system/services/kibana-logging/proxy 会报错services \\&quot;elasticsearch-logging\\&quot; is forbidden: User \\&quot;system:anonymous\\&quot; cannot proxy resource匿名用户没有访问apiserver 权限设置代理以进行访问（http协议代理 apiserver）kubectl proxy --address=&#x27;192.168.1.2&#x27; --port=5601 --accept-hosts=&#x27;^*$&#x27; reference kubernetes 1.14安装部署EFK日志收集系统 基于EFK安装与配置Kubernetes集群日志采集系统","categories":[],"tags":[],"author":"susu"},{"title":"Kubernetes Harbor部署","slug":"harbor-installation","date":"2020-12-31T16:00:00.000Z","updated":"2021-06-14T09:53:32.946Z","comments":true,"path":"2021/01/01/harbor-installation/","link":"","permalink":"http://jsunnyr.github.io/2021/01/01/harbor-installation/","excerpt":"","text":"official docs Harbor Installation Prerequisites harbor releases harbor docker engine https://docs.docker.com/engine/install/ docker-compose https://docs.docker.com/compose/install/ 12[root@master ~]# sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-compose process 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128# 1. download harbor-offline-installer-version.tgzwget https://github.com/goharbor/harbor/releases/download/v2.2.2/harbor-offline-installer-v2.2.2.tgztar xzvf harbor-offline-installer-v2.2.2.tgzcd harborcp harbor.yml.tmpl harbor.yml[root@master harbor]# lscommon common.sh harbor.v2.2.2.tar.gz harbor.yml harbor.yml.tmpl input install.sh LICENSE prepare# 2. configure https access to harbor(optional)openssl genrsa -out ca.key 4096openssl req -x509 -new -nodes -sha512 -days 3650 \\ -subj &quot;/C=CN/ST=Shanghai/L=Shanghai/O=susu/OU=susu/CN=susu.com&quot; \\ -key ca.key \\ -out ca.crtopenssl genrsa -out susu.com.key 4096openssl req -sha512 -new \\ -subj &quot;/C=CN/ST=Shanghai/L=Shanghai/O=susu/OU=susu/CN=susu.com&quot; \\ -key susu.com.key \\ -out susu.com.csrcat &gt; v3.ext &lt;&lt;-EOFauthorityKeyIdentifier=keyid,issuerbasicConstraints=CA:FALSEkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEnciphermentextendedKeyUsage = serverAuthsubjectAltName = @alt_names[alt_names]DNS.1=susu.comDNS.2=susuDNS.3=masterEOFopenssl x509 -req -sha512 -days 3650 \\ -extfile v3.ext \\ -CA ca.crt -CAkey ca.key -CAcreateserial \\ -in susu.com.csr \\ -out susu.com.crtcp susu.com.crt /data/cert/cp susu.com.key /data/cert/openssl x509 -inform PEM -in susu.com.crt -out susu.com.certcp susu.com.cert /etc/docker/certs.d/susu.com/cp susu.com.key /etc/docker/certs.d/susu.com/cp ca.crt /etc/docker/certs.d/susu.com/systemctl restart docker# 3. configure the harbor yaml file# 如果不需要https,注释相关项即可。vim harbor.ymlhostname: susu.com# http related confighttp: # port for http, default is 80. If https enabled, this port will redirect to https port port: 80# https related confighttps: # https port for harbor, default is 443 port: 443 # The path of cert and key files for nginx certificate: /data/cert/susu.com.crt private_key: /data/cert/susu.com.key# 4. install harbor[root@master harbor]# ./prepare prepare base dir is set to /root/harborClearing the configuration file: /config/portal/nginx.confClearing the configuration file: /config/log/logrotate.confClearing the configuration file: /config/log/rsyslog_docker.confGenerated configuration file: /config/portal/nginx.confGenerated configuration file: /config/log/logrotate.confGenerated configuration file: /config/log/rsyslog_docker.confGenerated configuration file: /config/nginx/nginx.confGenerated configuration file: /config/core/envGenerated configuration file: /config/core/app.confGenerated configuration file: /config/registry/config.ymlGenerated configuration file: /config/registryctl/envGenerated configuration file: /config/registryctl/config.ymlGenerated configuration file: /config/db/envGenerated configuration file: /config/jobservice/envGenerated configuration file: /config/jobservice/config.ymlGenerated and saved secret to file: /data/secret/keys/secretkeySuccessfully called func: create_root_certGenerated configuration file: /compose_location/docker-compose.ymlClean up the input dir[root@master harbor]# vim harbor.yml[root@master harbor]# docker-compose up -dCreating network &quot;harbor_harbor&quot; with the default driverCreating harbor-log ... doneCreating harbor-portal ... doneCreating registry ... doneCreating registryctl ... doneCreating harbor-db ... doneCreating redis ... doneCreating harbor-core ... doneCreating harbor-jobservice ... doneCreating nginx ... done[root@master harbor]# docker login susu.comUsername: adminPassword: WARNING! Your password will be stored unencrypted in /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeeded[root@master harbor]# docker tag 192.168.1.2/kubernetes-local/alpine:3.6 susu.com/kubernetes-local/alpine:3.6[root@master harbor]# docker push susu.com/kubernetes-local/alpineThe push refers to repository [susu.com/kubernetes-local/alpine]721384ec99e5: Pushed 3.6: digest: sha256:36c3a913e62f77a82582eb7ce30d255f805c3d1e11d58e1f805e14d33c2bc5a5 size: 528[root@master harbor]# docker rmi susu.com/kubernetes-local/alpine:3.6 Untagged: susu.com/kubernetes-local/alpine:3.6Untagged: susu.com/kubernetes-local/alpine@sha256:36c3a913e62f77a82582eb7ce30d255f805c3d1e11d58e1f805e14d33c2bc5a5[root@master harbor]# docker pull susu.com/kubernetes-local/alpine:3.63.6: Pulling from kubernetes-local/alpineDigest: sha256:36c3a913e62f77a82582eb7ce30d255f805c3d1e11d58e1f805e14d33c2bc5a5Status: Downloaded newer image for susu.com/kubernetes-local/alpine:3.6susu.com/kubernetes-local/alpine:3.6 reference harbor安装以及基本使用方法 docker登录私仓失败cannot validate certificate for 192.168.76.131 because it doesn‘t contain any IP SANs docker push Registry时https报错解决方法 Configure HTTPS Access to Harbor部署","categories":[],"tags":[],"author":"susu"},{"title":"kubernetes 包管理器 helm","slug":"helm-kuerbentes-package-system","date":"2020-12-31T16:00:00.000Z","updated":"2021-06-16T01:49:46.195Z","comments":true,"path":"2021/01/01/helm-kuerbentes-package-system/","link":"","permalink":"http://jsunnyr.github.io/2021/01/01/helm-kuerbentes-package-system/","excerpt":"","text":"helm (https://helm.sh/docs/intro/quickstart/) 12345678910111213141516171819202122232425262728293031323334353637383940wget https://get.helm.sh/helm-v3.6.0-linux-amd64.tar.gz# https://artifacthub.io/packages/helm/keyporttech/gogs#installing-the-chart[root@master ~]# helm search hub gogsURL CHART VERSION APP VERSION DESCRIPTION https://artifacthub.io/packages/helm/mhio/gogs 0.9.2 0.12.3 Gogs: Go Git Service https://artifacthub.io/packages/helm/keyporttech/gogs 0.1.3 0.12.3 Gogs is a painless self-hosted Git service[root@master ~]# kubectl create namespace gogsnamespace/gogs created[root@master ~]# helm install gogs --namespace gogs keyporttech/gogsNAME: gogsLAST DEPLOYED: Mon Jun 14 21:45:32 2021NAMESPACE: gogsSTATUS: deployedREVISION: 1NOTES:1. Connect to your Gogs web URL by running: export POD_NAME=$(kubectl get pods --namespace gogs -l &quot;app=gogs-gogs&quot; -o jsonpath=&quot;&#123;.items[0].metadata.name&#125;&quot;) kubectl port-forward $POD_NAME 8080:3000 echo http://127.0.0.1:8080/2. Connect to your Gogs ssh port: export POD_NAME=$(kubectl get pods --namespace gogs -l &quot;app=gogs-gogs&quot; -o jsonpath=&quot;&#123;.items[0].metadata.name&#125;&quot;) kubectl port-forward $POD_NAME 8022:22 echo http://127.0.0.1:8080/ kubectl port-forward $POD_NAME 8022:22[root@master ~]# kubectl get pods --namespace gogs -l &quot;app=gogs-gogs&quot; -o jsonpath=&quot;&#123;.items[0].metadata.name&#125;&quot;gogs-gogs-54bcf8fc54-h8bbx[root@master ~]# kubectl port-forward gogs-gogs-54bcf8fc54-h8bbx -n gogs 8080:3000Forwarding from 127.0.0.1:8080 -&gt; 3000Forwarding from [::1]:8080 -&gt; 3000[root@master ~]# kubectl port-forward gogs-gogs-54bcf8fc54-h8bbx -n gogs --address 0.0.0.0 8080:3000Forwarding from 0.0.0.0:8080 -&gt; 3000浏览器访问http://192.168.1.2:8080 reference Kubernetes1.18实践及踩坑（之六）部署Helm","categories":[],"tags":[],"author":"susu"},{"title":"openbsd","slug":"os/openbsd/openbsd","date":"2020-03-22T14:25:39.000Z","updated":"2021-12-05T12:32:55.862Z","comments":true,"path":"2020/03/22/os/openbsd/openbsd/","link":"","permalink":"http://jsunnyr.github.io/2020/03/22/os/openbsd/openbsd/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"UNIX-like Family 01-FreeBSD，OpenBSD，NetBSD 简介","slug":"os/openbsd/openbsd_01_01","date":"2020-03-22T14:25:39.000Z","updated":"2021-12-05T12:32:55.864Z","comments":true,"path":"2020/03/22/os/openbsd/openbsd_01_01/","link":"","permalink":"http://jsunnyr.github.io/2020/03/22/os/openbsd/openbsd_01_01/","excerpt":"","text":"[TOC] About *BSD BSD Focusing pkg manger tips documentation FreeBSD 性能 pkg install、pkg deleter、pkg info、pkg upgrade OpenBSD 安全 pkg_add、pkg_delete、pkg_info export PKG_PATH= / pkg_add -v URL http://www.openbsd.org/faq/faq15.html http://www.openbsd.org/faq/ports/ports.html http://www.openbsd.org/faq/ports/ NetBSD 网络 pkg_admin、pkg_add、pkg_delete、pkg_info OpenBSD OpenBSD 简介[1] The OpenBSD project produces a freely available, multi-platform 4.4BSD-based UNIX-like operating system. Our goals place emphasis on correctness, security, standardization, and portability. Article IBM: 深度探索 OpenBSD OpenBSD系统安装 OpenBSD4.4(2008-11-01)的安装方式不同于6.6(2019-10-17),尤其在磁盘分区部分，可以考虑尝试。详情请见我其他关于 OpenBSD的安装. Article play with action OpenBSD FAQ - Installation Guide 我的openBSD4.1安装图解笔记 安装OpenBSD6.4的步骤 OpenBSD全能服务器安装手册之系统安装篇–分区概念的相关介绍 安装OpenBSD相关说明 使用OPENBSD的初步设置 OpenBSD Tips收集整理 OpenBSD基本设置 OpenBSD&amp;PF基本防火墙设定 BSD System Startup Configuration rcctl in OpenBSD 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586openbsd66# rcctlusage: rcctl get|getdef|set service | daemon [variable [arguments]] rcctl [-df] check|reload|restart|stop|start daemon ... rcctl disable|enable|order [daemon ...] rcctl ls all|failed|off|on|started|stopped# 检查进程状态rcctl check service_name# 启用或禁用后台进程rcctl enable/disable service_name# 启动或停止后台进程rcctl start/stop service_name# 列出进程默认参数rcctl getdef service_name# 列出进程相关的参数rcctl get service_name# 查看已启动、启动失败进程rcctl ls startedrcctl ls failed# 列出当前的顺序rcctl order# 把指定的进程d移到第一位rcctl order d# 把指定的进程d移到d1和d2之前rcctl order d d1 d2# 设置进程参数# 设置ntpd的flags参数为&#x27;-s&#x27;rcctl set ntpd flags -s# 等价于rcctl enable service_namercctl set service_name status onopenbsd66# rcctl disable sshdopenbsd66# rcctl get sshdsshd_class=daemonsshd_flags=NOsshd_rtable=0sshd_timeout=30sshd_user=rootopenbsd66# rcctl getdef sshdsshd_class=daemonsshd_flags=sshd_rtable=0sshd_timeout=30sshd_user=rootopenbsd66# rcctl set sshd status pnrcctl: invalid status &quot;pn&quot;openbsd66# rcctl set sshd status on openbsd66# rcctl get sshdsshd_class=daemonsshd_flags=sshd_rtable=0sshd_timeout=30sshd_user=rootopenbsd66# rcctl disable sshdopenbsd66# rcctl get sshdsshd_class=daemonsshd_flags=NOsshd_rtable=0sshd_timeout=30sshd_user=rootopenbsd66# rcctl enable sshdopenbsd66# rcctl get ntpdntpd_class=daemonntpd_flags=ntpd_rtable=0ntpd_timeout=30ntpd_user=rootopenbsd66# rcctl set ntpd flags -sopenbsd66# rcctl get ntpdntpd_class=daemonntpd_flags=-sntpd_rtable=0ntpd_timeout=30ntpd_user=root OpenBSD Package Management pkg package management[2] Packages can be easily managed with the help of several utilities pkg_add(1) - for installing and upgrading packages pkg_check(8) - for checking the consistency of installed packages pkg_delete(1) - for removing installed packages pkg_info(1) - for displaying information about packages Selecting a Mirror There are two places pkg_add(1) will look for packages: the installurl(5) file (/etc/installurl) or the PKG_PATH environment variable. The former is the preferred method and is configured by default on new installations. If the use of multiple mirrors is needed, PKG_PATH allows this via a colon-separated list: 12345export PKG_PATH=scp://user@company-build-server/usr/ports/packages/%a/all:https://trusted-public-server/%m:installpath# exampleexport PKG_PATH=https://mirrors.cloud.tencent.com/OpenBSD/6.6/packages/amd64/:https://openbsd.hk/pub/OpenBSD/6.6/packages/amd64/ While the default should work well for most people, a list of alternate locations can be found on the mirrors page. ports[3][4] Once you have decided which flavor of the ports tree you want, you can get it from different sources. 12345678910111213# Look for a file named ports.tar.gz on the mirrors.$ cd /tmp$ ftp https://cdn.openbsd.org/pub/OpenBSD/$(uname -r)/&#123;ports.tar.gz,SHA256.sig&#125;or$ ftp https://mirrors.cloud.tencent.com/OpenBSD/$(uname -r)/&#123;ports.tar.gz,SHA256.sig&#125;$ signify -Cp /etc/signify/openbsd-$(uname -r | cut -c 1,3)-base.pub -x SHA256.sig ports.tar.gz# You want to untar this file in the /usr directory, which will create /usr/ports and all the directories under it.$ cd /usr$ tar xzf /tmp/ports.tar.gz OpenBSD AnonCVS[5] Anonymous CVS is a method of keeping your local copy of the OpenBSD source tree up to date with respect to changes made to current OpenBSD sources. In addition to following the bleeding edge of development, it is also possible to track the errata patches of a release. The OpenBSD Project currently has four active source repositories src - source code for the base system ports - the ports tree www - web pages xenocara - xenocara cvs(1) was designed to be a simple way to retrieve and update your sources. OpenBSD upgrade[6] bsd.rd According to LPIC-Exam 702, knowing how to upgrade a bsd system is required. 😂 So, it is important. OpenBSD network configuration 123456789101112# 设置IP/etc/hostname.nic_name# 设置网关/etc/mygate# 设置DNS/etc/myresolve.conf# 重启网络sh /etc/netstart help manual man trunk Article openbsd下实现网卡负载均衡 OpenBSD Hardware Configuration OpenBSD Kernel Parameters and System Security Level OpenBSD Storage Devices and BSD Filesystems BSD Partitioning and Disk Labels Create File Systems and Maintain their Integrity Control Mounting and Unmounting of File Systems Manage User Accounts and Groups Mail Transfer Agents(MTA) Basics OpenBSD Network Network Configuration Network Troubleshooting Configure Client Side DNS FreeBSD NetBSD https://www.openbsd.org/faq/index.html ↩︎ http://www.openbsd.org/faq/faq15.html ↩︎ http://www.openbsd.org/faq/ports/ports.html ↩︎ http://www.openbsd.org/faq/ports/ ↩︎ http://www.openbsd.org/anoncvs.html ↩︎ https://www.openbsd.org/faq/upgrade66.html ↩︎","categories":[{"name":"BSD","slug":"BSD","permalink":"http://jsunnyr.github.io/categories/BSD/"}],"tags":[{"name":"UNIX","slug":"UNIX","permalink":"http://jsunnyr.github.io/tags/UNIX/"},{"name":"BSD","slug":"BSD","permalink":"http://jsunnyr.github.io/tags/BSD/"}],"author":"susu"},{"title":"programming_outline","slug":"programming-outline","date":"2020-01-17T08:17:42.000Z","updated":"2021-12-05T12:32:55.886Z","comments":true,"path":"2020/01/17/programming-outline/","link":"","permalink":"http://jsunnyr.github.io/2020/01/17/programming-outline/","excerpt":"","text":"环境变量 程序结构概述 基础语法 关键字 命名规范 分号 注释 空格 数据类型 基本类型 整型 浮点型 void类型 枚举类型 派生类型 进制转化 内存结构 声明、定义、初始化 变量与常量 作用域 生命周期 字符编码 字符串 运算符 赋值运算符 算术运算符 比较运算符 逻辑运算符 位运算符 条件运算符 运算符的优先级问题 控制结构 循环 判断 数据结构 指针 普通指针 数组指针 指针数组 函数指针 空指针 结构体指针 回调函数 数组 结构体 共用体 typedef 数组 一维数组 二维数组 字符串数组 函数 标准输入输出 文件处理 宏 预设常量 条件与处理 防止头文件重复引入 宏函数 宏函数可变参数 头文件 错误处理（异常） 内存管理 命令行参数 排序 面向过程 预编译 条件编译 面向对象","categories":[{"name":"Knowledge","slug":"Knowledge","permalink":"http://jsunnyr.github.io/categories/Knowledge/"}],"tags":[{"name":"Knowledge","slug":"Knowledge","permalink":"http://jsunnyr.github.io/tags/Knowledge/"},{"name":"Programming","slug":"Programming","permalink":"http://jsunnyr.github.io/tags/Programming/"}],"author":"susu"},{"title":"database_oracle_asm_basic","slug":"oracle-asm-basic","date":"2020-01-17T07:41:22.000Z","updated":"2021-12-05T12:32:55.762Z","comments":true,"path":"2020/01/17/oracle-asm-basic/","link":"","permalink":"http://jsunnyr.github.io/2020/01/17/oracle-asm-basic/","excerpt":"","text":"12345678910show parameter instance_name;show parameter db_unique_name;show parameter asm_power_limit;show parameter asm_diskstring;show parameter asm_diskgroups;show parameter show parameter large_pool_size;desc V$ASM_OPERATION;desc V$ASM_DISK(_STAT);desc V$ASM_DISKGROUP(_STAT); 123456789101112131415161718192021222324252627282930313233343536373839404142export ORACLE_SID=SID&lt;db_unique_name&gt;sqlplus /nologconnect / as sysdbastartup;show parameter instance_type;show parameter spfile;show sga;show parametr sga_max_size;show parameter db_block_zie;show parameter db_cache_size;show parameter db_keep_cache_size;show parameter db_recycle_cache_size;show parameter db_cache_advice;show parameter log_buffer;show parameter large_pool_size;show parameter java_pool_size;show parameter db_create_file_dest;show paramter db_create_online_log_dest;show parameter local_listener;show parameter open_cursors;showalter system set param_name=value;alter system switch logfile;altre system checkpoint;alter session set sql_trace=true;alter system flush shared_pool;tkprof xx.trc new_xx_fileset autotrace on explainv$sqlv$sga_dynamic_componentsv$processv$sessionv$parameterv$lockv$locked_objectdba_objectsnls_session_parametersnls_database_parametersnls_instance_parameters","categories":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/categories/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"},{"name":"asm","slug":"asm","permalink":"http://jsunnyr.github.io/tags/asm/"}],"author":"susu"},{"title":"os_linux_software","slug":"os/rpm/os-linux-software","date":"2020-01-17T07:39:58.000Z","updated":"2021-12-05T12:32:55.880Z","comments":true,"path":"2020/01/17/os/rpm/os-linux-software/","link":"","permalink":"http://jsunnyr.github.io/2020/01/17/os/rpm/os-linux-software/","excerpt":"","text":"Encrypt shc","categories":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"}],"author":"susu"},{"title":"os_linux_xinetd","slug":"os/rpm/os-linux-xinetd","date":"2020-01-17T07:37:21.000Z","updated":"2021-12-05T12:32:55.881Z","comments":true,"path":"2020/01/17/os/rpm/os-linux-xinetd/","link":"","permalink":"http://jsunnyr.github.io/2020/01/17/os/rpm/os-linux-xinetd/","excerpt":"","text":"xinet.d 123[localhost]# yum install xinetd[localhost]# systemctl status xinetd[localhost]# systemctl start xinetd","categories":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"}],"author":"susu"},{"title":"os_linux_iscsi","slug":"os/rpm/os-linux-iscsi","date":"2020-01-17T07:35:42.000Z","updated":"2021-12-05T12:32:55.878Z","comments":true,"path":"2020/01/17/os/rpm/os-linux-iscsi/","link":"","permalink":"http://jsunnyr.github.io/2020/01/17/os/rpm/os-linux-iscsi/","excerpt":"","text":"iscsi Server(target):10.240.36.173 123456789101112131415161718192021222324252627282930313233[root@server(target)]# yum install targetcli[root@server(target)]# targetcli---targetcli shell version 2.1.fb41Copyright 2011-2013 by Datera, Inc and others.For help on commands, type &#x27;help&#x27;./&gt; lso- / ......................................................................................................................... [...] o- backstores .............................................................................................................. [...] | o- block .................................................................................................. [Storage Objects: 1] | | o- target.disk1 .................................................................... [/dev/vdb (50.0GiB) write-thru activated] | o- fileio ................................................................................................. [Storage Objects: 0] | o- pscsi .................................................................................................. [Storage Objects: 0] | o- ramdisk ................................................................................................ [Storage Objects: 0] o- iscsi ............................................................................................................ [Targets: 1] | o- iqn.2019-00.com.haha:iscsitarget1 ................................................................................. [TPGs: 1] | o- tpg1 ............................................................................................... [no-gen-acls, no-auth] | o- acls .......................................................................................................... [ACLs: 1] | | o- iqn.2019-00.com.haha:initiator ....................................................................... [Mapped LUNs: 1] | | o- mapped_lun0 .......................................................................... [lun0 block/target.disk1 (rw)] | o- luns .......................................................................................................... [LUNs: 1] | | o- lun0 .................................................................................. [block/target.disk1 (/dev/vdb)] | o- portals .................................................................................................... [Portals: 1] | o- 10.240.36.173:3260 ............................................................................................... [OK] o- loopback ......................................................................................................... [Targets: 0]/&gt;saveconfig/&gt;exit---[root@server(target)]# systemctl restart iscsi iscsid[root@server(target)]# iscsiadm -m node Client(initiator):10.240.36.186 123456789101112131415161718192021222324252627282930313233343536[root@client(initiator)]# yum install iscsi-initiator-utils[root@client(initiator)]# vim /etc/iscsi/initiatorname.iscsi---InitiatorName=iqn.2019-00.com.haha:initiator---[root@client(initiator)]# systemctl restart iscsi iscsid[root@host-10-240-36-186 ~]# iscsiadm --mode discoverydb --type sendtargets --portal 10.240.36.173 --discover---10.240.36.173:3260,1 iqn.2019-00.com.haha:iscsitarget1---[root@client(initiator)]# iscsiadm --mode node --targetname iqn.2019-00.com.haha:iscsitarget1 --portal 10.240.36.173:3260 --login[root@host-10-240-36-186 ~]# lsblk---NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 50G 0 disk vda 252:0 0 80G 0 disk ├─vda1 252:1 0 1G 0 part /boot└─vda2 252:2 0 79G 0 part ├─vg_root-lv_root 253:0 0 30G 0 lvm / ├─vg_root-lv_swap 253:1 0 4G 0 lvm [SWAP] ├─vg_root-lv_tmp 253:2 0 20G 0 lvm /tmpvdb 252:16 0 50G 0 disk vdc 252:32 0 1.1T 0 disk ---[root@host-10-240-36-186 ~]# cat /proc/scsi/scsiAttached devices:Host: scsi26 Channel: 00 Id: 00 Lun: 00 Vendor: LIO-ORG Model: target.disk1 Rev: 4.0 Type: Direct-Access ANSI SCSI revision: 05 sda above is the exactly disk. manual 12345678910111213141516171819[root@client(initiator)]# man iscsiadm---EXAMPLES Discover targets at a given IP address: iscsiadm --mode discoverydb --type sendtargets --portal 192.168.1.10 --discover Login, must use a node record id found by the discovery: iscsiadm --mode node --targetname iqn.2001-05.com.doe:test --portal 192.168.1.1:3260 --login Logout: iscsiadm --mode node --targetname iqn.2001-05.com.doe:test --portal 192.168.1.1:3260 --logout List node records: iscsiadm --mode node--- Related Command target 1[root@server(target)]# iscsiadm -m node initiator 1234567891011121314151617[root@client(initiator)]# iscsiadm -m node[root@host-10-240-36-186 ~]# iscsiadm --mode discoverydb --type sendtargets --portal 10.240.36.173 --discover10.240.36.173:3260,1 iqn.2019-00.com.haha:iscsitarget1[root@host-10-240-36-186 ~]# iscsiadm --mode node --targetname iqn.2019-00.com.haha:iscsitarget1 --portal 10.240.36.173:3260 --loginLogging in to [iface: default, target: iqn.2019-00.com.haha:iscsitarget1, portal: 10.240.36.173,3260] (multiple)Login to [iface: default, target: iqn.2019-00.com.haha:iscsitarget1, portal: 10.240.36.173,3260] successful.[root@host-10-240-36-186 ~]# iscsiadm --mode node --targetname iqn.2019-00.com.haha:iscsitarget1 --portal 10.240.36.173:3260 --logoutLogging out of session [sid: 20, target: iqn.2019-00.com.haha:iscsitarget1, portal: 10.240.36.173,3260]Logout of [sid: 20, target: iqn.2019-00.com.haha:iscsitarget1, portal: 10.240.36.173,3260] successful.[root@client(initiator)]# iscsiadm -m discovery -t sendtargets -p 10.240.36.173:3260[root@client(initiator)]# iscsiadm -m discovery -t st -p 10.240.36.173:3260[root@client(initiator)]# iscsiadm -m node -T iqn.2019-00.com.haha:iscsitarget1 --login[root@client(initiator)]# iscsiadm -m node -T iqn.2019-00.com.haha:iscsitarget1 --logout","categories":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"}],"author":"susu"},{"title":"linux_firewalld","slug":"os/rpm/linux-firewalld","date":"2020-01-17T07:17:48.000Z","updated":"2021-12-05T12:32:55.816Z","comments":true,"path":"2020/01/17/os/rpm/linux-firewalld/","link":"","permalink":"http://jsunnyr.github.io/2020/01/17/os/rpm/linux-firewalld/","excerpt":"","text":"systemctl start firewalld systemctl status firewalld firewall-cmd --state firewall-cmd --reload firewall-cmd --get-default-zone firewall-cmd --get-active-zone firewall-cmd --list-all firewall-cmd --list-port(s) firewall-cmd --list-service(s) firewall-cmd --zone=public --list-ports --permanent firewall-cmd --zone=public --list-services --permanent firewall-cmd --zone=public --add-port=8080-8090/tcp --permanent firewall-cmd --zone=public --add-service=https --permanent firewall-cmd --zone=public --add-rich-rule=&quot; rule family=“ipv4” source dress=“192.168.0.4/24” service name=“http” accept&quot; --permanent firewall-cmd --zone=public --remove-rich-rule=“rule family=“ipv4” source dress=“192.168.0.4/24” service name=“http” accept” firewall-cmd --query-service server_name iptables -L -n | grep port_id iptables -L CHAIN_name","categories":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"}],"author":"susu"},{"title":"openbsd_series_01","slug":"os/openbsd/openbsd-series-01","date":"2020-01-16T01:55:26.000Z","updated":"2021-12-05T12:32:55.860Z","comments":true,"path":"2020/01/16/os/openbsd/openbsd-series-01/","link":"","permalink":"http://jsunnyr.github.io/2020/01/16/os/openbsd/openbsd-series-01/","excerpt":"","text":"网络配置 OpenBSD的IP设置在/etc/hostname.xxx文件，其中xxx就是你的网卡名。网关设置在/etc/mygate文件。DNS设置在/etc/resolv.conf文件中。 在/etc/hostname.xxx中 DHCP NONE NONE NONE 或者 inet 192.168.0.2 255.255.255.0 202.86.128.86 在/etc/mygate中,如果是dhcp的话,就不要这个文件了. 192.168.0.1 在/etc/resolv.conf中,如果是dhcp的话,就不用变这个. 202.96.128.86 你既可以重起计算机也可以运行/etc/netstart脚本。你只要简单的输入（作为root）: sh /etc/netstart 我们应该首先考虑Packages System来安装软件 Package System 12345678910111213141516171819202122232425262728293031-- set PKG_PATHopenbsd66# pkg_add -v bash-5.0.11.tgzquirks-3.182 signed on 2019-10-12T12:14:24Zquirks-3.182: okbash-5.0.11:libiconv-1.16p0: okbash-5.0.11:gettext-runtime-0.20.1p0: okShell /usr/local/bin/bash appended to /etc/shellsbash-5.0.11: okExtracted 12724009 from 12725930openbsd66# pkg_infobash-5.0.11 GNU Bourne Again Shellgettext-runtime-0.20.1p0 GNU gettext runtime libraries and programslibiconv-1.16p0 character set conversion libraryportslist-7.26 full list of pkgpaths in portsquirks-3.182 exceptions to pkg_add rulesvim-8.1.2061-no_x11 vi clone, many additional featuresopenbsd66# pkg_add -v https://mirrors.cloud.tencent.com/OpenBSD/6.6/packages&gt;Update candidates: quirks-3.182 -&gt; quirks-3.182quirks-3.182 signed on 2019-10-12T12:14:24Zgit-2.23.0:nghttp2-1.39.2: okgit-2.23.0:curl-7.66.0: okgit-2.23.0:p5-Error-0.17025: okgit-2.23.0:cvsps-2.1p2: okgit-2.23.0: okThe following new rcscripts were installed: /etc/rc.d/gitdaemonSee rcctl(8) for details.New and changed readme(s): /usr/local/share/doc/pkg-readmes/gitExtracted 51529180 from 51531851 configure ports 12345678910111213141516171819openbsd66# ftp https://mirrors.cloud.tencent.com/OpenBSD/6.6/ports.tar.gzopenbsd66# tar zxvf /tmp/ports.tar.gz -C /usr/openbsd66# cd /usr/ openbsd66# lsX11R6 games lib libexec mdec ports share xobjbin include libdata local obj sbin srcopenbsd66# cd ports/ openbsd66# ls.cvsignore cad games math shellsCVS chinese geo meta sysutilsMakefile comms graphics misc telephonyREADME converters infrastructure multimedia testsarchivers databases inputmethods net textprocastro devel japanese news wwwaudio editors java plan9 x11benchmarks education korean printbiology emulators lang productivitybooks fonts mail security 获得ports 12cd /usrsudo cvs -qd anoncvs@anoncvs.jp.openbsd.org:/cvs get -P ports 更新ports 12cd /usr/ports/sudo cvs -qd anoncvs@anoncvs.jp.openbsd.org:/cvs up -Pd 利用ports安装软件 123cd /usr/portscd target_dirmake install clean","categories":[{"name":"OpenBSD","slug":"OpenBSD","permalink":"http://jsunnyr.github.io/categories/OpenBSD/"}],"tags":[{"name":"OpenBSD","slug":"OpenBSD","permalink":"http://jsunnyr.github.io/tags/OpenBSD/"}],"author":"susu"},{"title":"how_to_learn_linux_kernel","slug":"how-to-learn-linux-kernel","date":"2020-01-07T04:35:15.000Z","updated":"2021-12-05T12:32:55.774Z","comments":true,"path":"2020/01/07/how-to-learn-linux-kernel/","link":"","permalink":"http://jsunnyr.github.io/2020/01/07/how-to-learn-linux-kernel/","excerpt":"","text":"前提： 01. The UNIX Programming Environment [美]Brianw.Kernighan 02. The C programming language [美]Brianw.Kernighan 03. Design of UNIX Operating System [外]Maurice Bach 04. UNIX Shells by Example, 4th Edition 05. 深入理解计算机系统(CSAPP) 06. The Linux Programming Interface: A Linux and UNIX System Programming Handbook [美]Michael Kerrisk 07. Advanced Programming in the UNIX Environment-3rd 08. UNIX高级教程系统技术内幕 (美)Uresh Vahalia 四库全书： 1. LKD:Linux内核设计与实现（原书第3版）[美] Robert Love 2. ULK:Understand the Linux Kernel/深入理解LINUX内核 [美] Marco Ce 3. LDD:LINUX设备驱动程序（O&#39;Reilly第3版） [美] 科波特(Corbet J.) 4. Linux内核源代码情景分析 [中]毛德操[kernel:2.4]搭配深入分析Linux内核源代码 [kernel:2.4] 5. Professional Linux Kernel Architecture [外]Wolfgang Mauerer/深入Linux内核架构 6. How Linux Works, 2nd Edition: What Every Superuser Should Know [美]Brian Ward 7. Linux内核完全注释 [kernel:0.11] [中]赵炯 SiteCMPT-225 Data Structure and Programming (Spring 2008)Simon Fraser University 软件Source Navigator Video实验楼：Linux内核分析 实验楼：Linux研发工程师","categories":[{"name":"Kernel","slug":"Kernel","permalink":"http://jsunnyr.github.io/categories/Kernel/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"},{"name":"Kernel","slug":"Kernel","permalink":"http://jsunnyr.github.io/tags/Kernel/"}],"author":"susu"},{"title":"Table and V$-view common used in Oracle","slug":"db/oracle/oracle-05-para","date":"2020-01-07T04:28:21.000Z","updated":"2021-12-07T07:11:14.747Z","comments":true,"path":"2020/01/07/db/oracle/oracle-05-para/","link":"","permalink":"http://jsunnyr.github.io/2020/01/07/db/oracle/oracle-05-para/","excerpt":"","text":"parameter 123 动态性能视图 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748v$parameterv$sessionv$processv$sqlv$sqltextv$sqlareav$tablespacev$sgav$sgainfov$sgastatv$sga_dynamic_componentsv$sga_dynamic_free_memoryv$controlfilev$logv$logfilev$datafilev$tempfilev$archived_logv$pgastatv$sgainfov$db_cache_advice(可以建议nk buffer cache大小)v$bgprocessv$block_change_trackingv$backup_filesv$backup_setv$backup_piecev$backup_redologv$backup_spfilev$backup_datafilev$backup_devicev$rman_configurationv$database_block_corruptionv$backup_corruptionv$copy_corruptionv$recover_filev$session_longops-- 监视rman异步IOv$backup_async_io-- 监视rman同步IOv$backup_sync_io-- awr-relatedv$sysaux_occupants 数据字典表 1 数据库 12345-- 查看数据库服务器上数据库个数cat /etc/oratab -- 由dbca新建的库均记录于此，也意味着手工建库如果不更新此文件，那么此参考将无价值ls $ORACLE_BASE/admin -- 查看文件夹个数ls $ORACLE_BASE/oradata -- 查看数据文件夹(含数据库文件的)个数","categories":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/categories/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"},{"name":"Knowledge","slug":"Knowledge","permalink":"http://jsunnyr.github.io/tags/Knowledge/"}],"author":"susu"},{"title":"Oracle Outline Series","slug":"db/oracle/oracle-outline","date":"2020-01-07T04:23:13.000Z","updated":"2021-12-05T12:32:55.874Z","comments":true,"path":"2020/01/07/db/oracle/oracle-outline/","link":"","permalink":"http://jsunnyr.github.io/2020/01/07/db/oracle/oracle-outline/","excerpt":"","text":"[TOC] Oracle 数据库原理 数据库种类 关系型数据库 对象型数据库 数据库对象 数据库安全 用户 user 方案 schema 权限 privilege 角色 role 配额 quota Oracle体系结构 Oracle内部结构 进程结构 内存结构 内存三个时钟：shared_pool,database_buffer_cache,redo_log_buffer sga_max_size(直接决定内存粒度granule size) sga_target(大于0 sga则是自动管理，否则动态管理[提前设定]) sga的管理方式 静态管理 动态管理(设定sga_max_size,其他池都设定值) 自动管理(设定sga_max_size，设定sga_target&gt;0且小于等于sga_max_size,sga便会自动管理其他池而无需设定) 自动管理可能会出现sga抖动 提前给各个池定值，同时sga_target&gt;0,不妨碍各个池依然被自动管理 存储结构 工具使用 网络连接 IPC Normal方式下的字符串(Listener.ora)通过TCP/IP (Client with Oracle client)Oracle Net over TCP/IP 五大进程(除五大进程外，其他进程会被进程监视进程pmon拉起来) 五大进程中的三个进程的时钟(lgwr,dbwn,chpt[scn]) scn号一致才叫通过一致性 SQL语句软分析、硬分析 命中率(Library Cache, Data Dictionary Cache)","categories":[{"name":"Outline","slug":"Outline","permalink":"http://jsunnyr.github.io/categories/Outline/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"},{"name":"Outline","slug":"Outline","permalink":"http://jsunnyr.github.io/tags/Outline/"}],"author":"susu"},{"title":"oracle_advanced","slug":"db/oracle/oracle-advanced","date":"2020-01-07T04:22:09.000Z","updated":"2021-12-05T12:32:55.870Z","comments":true,"path":"2020/01/07/db/oracle/oracle-advanced/","link":"","permalink":"http://jsunnyr.github.io/2020/01/07/db/oracle/oracle-advanced/","excerpt":"","text":"References http://otn.oracle.com/ http://technet.oracle.com http://www.ioug.org http://www.doug.org http://www.oracle.com/openworld/archive https://community.oracle.com/welcome http://www.dba.ant.lviv.ua/ https://oracle-base.com/ http://www.dba-oracle.com/ http://www.dbasupport.com/forums/ https://www.orapub.com/ http://www.orafaq.com/ http://dbazine.com/ https://www.rittman.net/ https://www.databasejournal.com/ https://asktom.oracle.com/ hedu.pjwstk.edu.pl/wyklady/szb/scb/wyklad14/01L.ppt https://www.2cto.com/database/Oracle/ 格式化输出 col column_name_xxx for a10/a45 set linesize 9999 pagesize 9999 Oracle数据库 表 动态视图 动态性能视图 内部表 数据字典表 内部表 x$ 数据字典 基表 sys.ts$ sys.user$ 数据字典视图 dba_xxx dba_synonyms; dba_users; dba_sys_privs; dba_tab_privs; dba_col_privs; dba_role_privs; system_privilege_map; role_sys_privs dba_tablespaces; dba_data_files; dba_temp_files; all_xxx all_synonyms; user_xxx user_synonyms; user_tables; user_tab_comments; user_tab_columns; 动态视图 动态性能视图( v/ v_) v$fixed_table; v$sga v$sgainfo v$sga_dynamic_components v$sga_dynamic_free_memory v$instance v$database v$datafile v$parameter v$spparameter v$controlfile v$tablespace v$instance; v$database; v$datafile; v$tempfile; v$sga_dynamic_components; v#db_cache_advice;//查看Database buffer cache的统计信息 v$session; v$archived_log; v$archive_dest; v$archive_processes; v$archive_dest_status; v$archive_gap; v$archive; vlog;//select group#, thread#, sequence#,status from vlog vlogfile;//select∗fromvlogfile;//select * from vlogfile;//select∗fromvlogfile v$log_history; dict; select * from vparameterwherename=′backgrounddumpdest′;selectinstancename,hostname,status,instancerole,activestatefromvparameter where name=&#x27;background_dump_dest&#x27;; select instance_name,host_name,status,instance_role,active_state from vparameterwherename=​′​​background​d​​ump​d​​est​′​​;selectinstance​n​​ame,host​n​​ame,status,instance​r​​ole,active​s​​tatefromvinstance select name,open_mode,database_role,platform_name,current_scn from v$database show parameter o7; alter system set o7=true scope=both; alter system set fast_start_mttr_target=600 scope=both; – show-related show parameter sql_tace; 数据库管理员的职责 DBA的主要工作 1）安装和升级oracle数据库 2）建库,表空间，表，视图，索引 3）指定并实施备份与恢复计划 4）数据库权限管理，调优，故障排除 5）对于高级dba，要求能参与项目开发，会编写sql语句、存储过程、触发器、规则、约束、包 oraenv 环境变量设置 123456789101112[oracle@rhel750 ~]$ diff oracle.file oraenv.file 11c11,12&lt; WINDOWID=41946019---&gt; WINDOWID=41943046&gt; OLDPWD=/tmp13a15&gt; LD_LIBRARY_PATH=/oracle/app/oracle/product/11.2.0/db/lib22c24&lt; PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/home/oracle/.local/bin:/home/oracle/bin---&gt; PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/home/oracle/.local/bin:/home/oracle/bin:/oracle/app/oracle/product/11.2.0/db/bin 五大进程： DBWn LGWR PMON SMON CKPT Oracle数据库安装 系统参数调整 /etc/security/limits.conf /etc/pam.d/login 核心参数调整 /etc/sysctl.conf 数据库监听 Oracle 网络连接(Oracle Net Services) 优化网络带宽，支持高速的InfiniBand网络(无限带宽技术) ADR TNS 专用服务器体系 共享服务器体系 SQL Plus 交互 用户登录 local Net Service conn user_name/password as sys/system alter user hr identified by “hr” account unlock; 帮助文件 help index col col_name_xxx for[mat] axx_size_width 交互式 &amp;table_feild 连接(listener服务必须启动) tnsnames.ora sqlplus scott/tiger@orcl listener.ora(/etc/hosts)–&gt;GLOBAL_DBNAME tnsnames.ora–&gt;SERVICE_NAME sqlplus scott/tiger@//192.168.1.3:1521/orcl.oracle.com 基本数据类型 varchar2 num date timestamp clob blob 用户管理 create user user_name identified by pwd_xxx default tablespace xxx; grant role_name to user_name; grant unlimited tablespace to username_XXX alter user username_XXX account unlock; drop user_name_XXX [cascade]; select username,account_status from dba_users where account_status=‘OPEN’; 权限 系统权限 对象权限 权限的授予与回收 grant privilege_xxx on tb_xx to user_name revoke privilege_xxx on tb_xx from user_name 权限的维护 系统权限：不级联回收 对象权限：级联回收 sys-privs:with admin option obj-privs:with grant option 角色 预定义角色 connect dba resource 方案 自定义角色 profile文件管理用户口令 create profile drop profile profile_xxx [cascade] 表管理 表新建 dual 虚拟表 表删除 delete table tb_name drop table tb_name truncate tb_name 12345678910111213select tablespace_name,status from dba_tablespaces;alter tablespace tb_xxx offline/online;select t.ts#,t.name,f.name from v$datafile f,v$tablespace twhere f.ts#=t.ts#;select tablespace_name, sum(bytes)/1024/1024 from dba_data_files group by tablespace_name;select tablespace_name, sum(bytes)/1024/1024 from dba_free_space group by tablespace_name; 表查询 基本查询 算数表达式 聚合函数 WHERE like操作符 GROUP by having ORDER by 多表查询 自连接 子查询 单行子查询 多行子查询 from子句中使用子查询(内嵌视图) 分页查询 rownum 合并查询(对大表操作速度快) union union all intersect minus 多行插入 insert into tb_name(xxx,xx,xxx) select xxx,xxx,xxx from tb_name 更新数据 直接修改 子查询修改 || 合并 存储对象 过程 函数 SQL函数 字符函数 数学函数 转换函数 select to_char(sysdate,‘yyyy-mm-dd hh24:mi:ss’) from dual; 包 索引 表空间 表空间配额 同义词 用户 用户：sys,system 角色：sysdba sysoper dba 默认环境变量 角色 预定义角色 自定义角色 角色被删除，该角色下的用户再也不具有该角色所拥有的权限。 精细访问控制 创建数据库 Database Configuration Assistant(dbca) 数据库管理 OEM Grid Control(emca) 事务 设置保存点 取消部分事务 取消全部事务 只读事务 set transaction read only 锁 导入导出 逻辑备份 物理备份 导出表 导出方案 导出数据库 导入表 导入结构 导入方案 导入数据库 表 global_name 数据字典 查看当前用户下的所有表 SQL&gt; SELECT t.table_name FROM USER_TABLES t 某个角色所具有的系统权限 select * from system_privilege_map oredr by name; select * from dba_sys_privs where role=‘xxx’; select * from role_sys_privs where role=‘xxx’; 某个角色所拥有的对象权限 select distinct privilege from dba_tab_privs; 所有角色 select * from dba_roles; 角色下的权限 dba_roles; dba_tablespaces; 某个用户具有哪些角色 select * from dba_role_privs where grantee=‘xx’; 显示当前数据库全称 select * from global_name; 显示当前用户可以访问的所有数据字典视图 select * from dict where comments like ‘%grant%’ 查看数据库物理文件 select t.file_id, t.file_name,t.tablespace_name from dba_data_files t 管理表空间和数据文件 数据文件路径/临时文件路径/重做日志文件路径/控制文件路径：$ORACLE_BASE/oradata/orcl/ 参数文件路径/密码文件路径：$ORACLE_HOME/dbs Oracle监听文件路径:$ORACLE_HOME/network/admin 告警日志路径：$ORACLE_BASE/diag/rdbms/leo1/LEO1/trace 表空间 表空间，段，区，块 创建表空间 管理表空间的状态（online/offline/read only/read write） 管理表空间容量 扩容表空间的方法： 增加数据文件 增加数据文件的大小 设置文件的自动增长 删除表空间 迁移表空间，迁移数据库:移动数据文件 索引表空间 undo表空间 临时表空间 非标准块的表空间 维护数据完整性 user_constraint user_cons_columns 数据完整性实现方法 * 约束 not null unique primary key foreign key check * 触发器 * 应用程序(过程，函数) 列级定义 表级定义 索引 dba_indexs user_indexs user_ind_columns 加速数据存取 降低io次数 提高数据访问性能 单列索引 复合索引 数据库的筛选SQL语句扫描是从后往前的","categories":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/categories/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"},{"name":"Knowledge","slug":"Knowledge","permalink":"http://jsunnyr.github.io/tags/Knowledge/"}],"author":"susu"},{"title":"oracle基础","slug":"db/oracle/oracle-basic","date":"2020-01-07T04:19:43.000Z","updated":"2021-12-05T12:32:55.872Z","comments":true,"path":"2020/01/07/db/oracle/oracle-basic/","link":"","permalink":"http://jsunnyr.github.io/2020/01/07/db/oracle/oracle-basic/","excerpt":"","text":"Oracle Common Command 如果无法发现crs_*命令，应执行su - grid; . oraenv; +ASM oracle 中不用引号或是双引号，不能是单引号 编辑相关 123456789101112-- define editor for `ed`sql&gt; define _editor=vim[oracle@localhost] oerr ora 00923SQL&gt; ! pwdSQL&gt; host pwdSQL&gt; ho shell-commandSQL&gt; clear screenSQL&gt; cle scrSQL&gt; show user;SQL&gt; set linesize line_length;SQL&gt; set pagesize page_size; 开启归档模式 12345shutdown immediate;startup mount;alter database archivelog; -- 开启归档日志alter database open; -- 开启数据库archive log list; --查看归档日志状态 关闭归档模式 12345shutdown immediate;startup mount;alter database noarchivelog;alter database open;archive log list; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192-- show-relatedshow parameter param_name;show parameter spfileshow parameter pfileshow parameter control%show parameter control_show parameter db_writer_processesshow parameter log_archiveshow parameter db_recoveryshow parameter db_name;(参数文件中唯一必须确定赋值的参数)show parameter db_unique_name;show parameter open_cursors;alter system set open_cursors=400 scope=both;processes; 进程数audit_trail; 关闭审计功能deferred_sement_creation; 关闭延迟段空间分配undo_retention; undo保留期max_dump_file_size;parallel_max_servers; 并行子进程的数量上限control_file_record_keep_time; 控制文件记录保留时间result_cache_max_size; 关闭 result cacheevent（28401 trace name context forever,level 1）; 关闭用户持续输入密码带来的延迟用户验证alter system set event=&#x27;28401 trace name context forever,level 1&#x27; scope=spfile;NAME TYPE VALUE------------------------------------ -----------db_unique_name string myorashow parameter local_listener;show parameter instance_name;show parameter service_names;show parameter db_create_file_dest;-- alter-relatedalter database archivelog;alter database mount;alter database open;alter database close;alter database dismount;alter system register;set linesize 999 999set pagesize 999-- select-relatedselect * from v$version;select value from v$parameter where name = &#x27;db_name&#x27;;alter system kill session &#x27;sid,serial#&#x27;;select MEMBER from v$logfile;select * from dictionary where table_name like &#x27;V$SYS%&#x27;;select parallel from v$instance;select protection_level from v$database;select * from dba_streams_administrator;select log_mode from v$database;select program from v$process order by program;select program from v$session order by program;select owner,count(table_name) as COUNT,tablespace_name from dba_tables group by owner,tablespace_nameselect segment_type,count(1) from dba_segments group by segment_type order by segment_type;select member,bytes from v$log join v$logfile using (group#);select count(*) from dba_tab_privs where grantee=&#x27;PUBLIC&#x27;;select table_name from dba_tab_privs where grantee=&#x27;PUBLIC&#x27; and privilege=&#x27;EXECUTE&#x27; and table_name like &#x27;UTL%&#x27;select file_name,tablespace_name,round(bytes/1024/1024) as &quot;SIZE&quot; from dba_data_files;select name from v$bgprocess where paddr&lt;&gt;&#x27;00&#x27;;select count(name) from v$bgprocess where paddr&lt;&gt; &#x27;00&#x27; and name like &#x27;DB%&#x27;;select privilege from dba_sys_privs where grantee=&#x27;RECOVERY_CATALOG_OWNER&#x27;-- 查找数据库名show parameter db_name;select name from v$database;-- 查找实例名show parameter instance_name;select instance_name from v$instance;-- alter-relatedalter database add logfile member &#x27;+DATA/myora/onlinelog/group_1a&#x27; to group 1, &#x27;+DATA/myora/onlinelog/group_2a&#x27; to group 2, &#x27;+DATA/myora/onlinelog/group_3a&#x27; to group 3;alter system switch logfile; 123456-- create new tablespaceselect name from v$datafile;create tablespace noncrit datafile &#x27;+DATA/myora/datafile/noncrit.dbf&#x27; size 2m;create table ex16(c1 date) tablespace noncrit;commit; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394-- a means stringcol col_name for aNum col machine for a20SQL&gt; col machine for a10SQL&gt; col machine for a10SQL&gt; set pagesize 9999select SID,SERIAL#,MACHINE,TERMINAL from v$session;SQL&gt; select name from v$tablespace;NAME------------------------------SYSTEMSYSAUXUNDOTBS1USERSTEMPEXAMPLE6 rows selected.-- user-relatedsqlplus /nolog;conn / as sysdba;[oracle@localhost] sqlplus scott/tiger@myora[oracle@localhost] sqlplus hr/hr@192.168.1.32:1521/myora/SQL&gt; alter user hr account unlock;SQL&gt; alter user hr identified by hr account unlock;SQL&gt; alter user hr identified by &quot;hr&quot; account unlock;SQL&gt; select table_name,tablespace_name from user_tables;SQL&gt; select status,name from v$datafileSTATUS NAME------- --------------------------------------------------SYSTEM +DATA/myora/datafile/system.256.1015819375ONLINE +DATA/myora/datafile/sysaux.257.1015819375ONLINE +DATA/myora/datafile/undotbs1.258.1015819375ONLINE +DATA/myora/datafile/users.259.1015819375ONLINE +DATA/myora/datafile/example.265.1015819467SQL&gt; select status,name,bytes/1024/1024 as tablespce_size from v$datafile;STATUS NAME TABLESPCE_SIZE------- -------------------------------------------------- --------------SYSTEM +DATA/myora/datafile/system.256.1015819375 680ONLINE +DATA/myora/datafile/sysaux.257.1015819375 510ONLINE +DATA/myora/datafile/undotbs1.258.1015819375 85ONLINE +DATA/myora/datafile/users.259.1015819375 5ONLINE +DATA/myora/datafile/example.265.1015819467 100SQL&gt; r 1* select component,min_size,max_size,current_size from v$sga_dynamic_componentsCOMPONENT MIN_SIZE MAX_SIZE CURRENT_SIZE------------------------- ---------- ---------- ------------shared pool 209715200 218103808 218103808large pool 4194304 4194304 4194304java pool 4194304 4194304 4194304streams pool 0 0 0DEFAULT buffer cache 255852544 264241152 255852544KEEP buffer cache 0 0 0RECYCLE buffer cache 0 0 0DEFAULT 2K buffer cache 0 0 0DEFAULT 4K buffer cache 0 0 0DEFAULT 8K buffer cache 0 0 0DEFAULT 16K buffer cache 0 0 0DEFAULT 32K buffer cache 0 0 0Shared IO Pool 0 0 0ASM Buffer Cache 0 0 014 rows selected.SQL&gt; r 1* select name,value from v$pgastat where name in (&#x27;maximum PGA allocated&#x27;,&#x27;total PGA allocated&#x27;)NAME VALUE---------------------------------------------------------------- ----------total PGA allocated 156115968maximum PGA allocated 216137728 123456789101112131415161718192021222324select open_mode from v$database;select status from v$instance;-- connect to rdbms instanceSQL&gt; show parameter instance_type;NAME TYPE VALUE------------------------------------ ---instance_type string RDBMS-- connect to ASM instancesqlplus / as sysasmSQL&gt; show parameter instance_type;NAME TYPE VALUE------------------------------------ --instance_type string asm-- 查看执行计划explain plan for SQL; 集群相关 12crs_stat -tcrsctl stat res -t 执行的时候@example.sql，如果文件的后缀名为*.sql,直接用文件名也可以. LISTENER 1234567891011121314-- 建立监听器 listener.oranetca-- 注册实例至监听器-- 名称解析(为了找到监听器) -- easy connectconn hr/hr@192.168.1.32:1521/myora;show user;conn hr/hr@rhelora:1521/myora;conn hr/hr@rhelORA:1521/myora; -- 本地命名法 tnsnames.ora -- 目录命名法 -- 第三方命名法-- 配置服务别名netmgr oracle 在分布式事务中执行两阶段提交 12345678910-- rman-related[oracle@localhost] rman target /RMAN&gt; report schema;report need backup;report obsolete;backup as compressed backupset datafile 4;list backup;list backup of datafile 4;delete obsolete; 123456789101112131415-- 配置数据库Flashbackalter system set db_recovery_file_dest_size=1G;alter system set db_recovery_file_dest=&#x27;/u01/app/oracle/oradata/flash_recovery_area&#x27;;alter system set db_flashback_retention_target=240;shutdown immediate;startup mount;alter database flashback on;alter database open;-- flashback-relatedselect flashback_on from v$database;select retention_target,flashback_size,oldest_flashback_time from v$flashback_database_log;select end_time,flashback_data,db_data,redo_data from v$flashback_database_stat;select * from v$sgastat where name = &#x27;flashback generation buff&#x27;;","categories":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/categories/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"},{"name":"Knowledge","slug":"Knowledge","permalink":"http://jsunnyr.github.io/tags/Knowledge/"}],"author":"susu"},{"title":"mysql_procedure","slug":"db/mysql/mysql-procedure","date":"2020-01-07T04:17:31.000Z","updated":"2021-12-05T12:32:55.854Z","comments":true,"path":"2020/01/07/db/mysql/mysql-procedure/","link":"","permalink":"http://jsunnyr.github.io/2020/01/07/db/mysql/mysql-procedure/","excerpt":"","text":"MySQL procedure 1234567891011DELIMITER #create procedure test_two1() begin declare i int default 0; while i &lt; 3000 do INSERT into tbl_test VALUES(i,&#x27;AAAAA&#x27;,&#x27;BBB&#x27;,&#x27;asdasd&#x27;,&#x27;asdasdsad&#x27;,&#x27;asdasdasd&#x27;,&#x27;asdasdasd&#x27;,&#x27;asdasdasd&#x27;,&#x27;asdasdsad&#x27;,&#x27;asdasdasdasdsad&#x27;,&#x27;564564a6s4da4sd&#x27;,&#x27;asdasd&#x27;,&#x27;asdalilil&#x27;,&#x27;zxczxc&#x27;,&#x27;zxcxczxc&#x27;,&#x27;zxczxc&#x27;,&#x27;zxczxc&#x27;,&#x27;zxczxczxc&#x27;,&#x27;asdasdxczxc&#x27;,&#x27;asdasdasd&#x27;,&#x27;asdasdasd&#x27;); set i = i + 1; end while; end #call test_two1(); 1234567891011DROP PROCEDURE IF EXISTS proc_initData;--如果存在此存储过程则删掉DELIMITER $ //#使用delimiter后，将不把分号当做语句结束，会将该段整个提交CREATE PROCEDURE proc_initData()BEGIN DECLARE i INT DEFAULT 1; WHILE i&lt;=10000 DO INSERT INTO data(user_id) VALUES(i); SET i = i+1; END WHILE;END $CALL proc_initData(); mysql&gt; desc game; ±--------±------------±-----±----±--------±------+ | Field | Type | Null | Key | Default | Extra | ±--------±------------±-----±----±--------±------+ | id | int(11) | YES | | NULL | | | name | varchar(20) | YES | | NULL | | | type_id | int(11) | YES | | NULL | | ±--------±------------±-----±----±--------±------+ 3 rows in set (0.00 sec) mysql&gt; desc game_type; ±----------±------------±-----±----±--------±------+ | Field | Type | Null | Key | Default | Extra | ±----------±------------±-----±----±--------±------+ | type_id | int(11) | YES | | NULL | | | type_name | varchar(20) | YES | | NULL | | ±----------±------------±-----±----±--------±------+ 2 rows in set (0.00 sec) mysql&gt; select g.name, g.type_id, t.type_name from game g left join game_type t on g.type_id=t.type_id; ±-----±--------±----------+ | name | type_id | type_name | ±-----±--------±----------+ | A1 | 1 | A | | A2 | 2 | B | | A3 | 3 | C | | A4 | 4 | NULL | | A5 | 5 | NULL | ±-----±--------±----------+ 5 rows in set (0.00 sec) mysql&gt; select g.name, g.type_id, t.type_name from game g left join game_type t on g.type_id=t.type_id where t.type_name is NOT NULL; ±-----±--------±----------+ | name | type_id | type_name | mysql&gt; select g.name, g.type_id, t.type_name from game g left join game_type t on g.type_id=t.type_id where isNULL(t.type_name); ±-----±--------±----------+ | name | type_id | type_name | ±-----±--------±----------+ | A4 | 4 | NULL | | A5 | 5 | NULL |±-----±--------±----------+ 2 rows in set (0.00 sec) mysql&gt; select g.name, g.type_id, t.type_name from game g left join game_type t on g.type_id=t.type_id where isnotNULL(t.type_name); ERROR 1305 (42000): FUNCTION haha.isnotNULL does not exist mysql&gt; select g.name, g.type_id, t.type_name from game g left join game_type t on g.type_id=t.type_id where !isNULL(t.type_name); ±-----±--------±----------+ | name | type_id | type_name |±-----±--------±----------+ | A1 | 1 | A | | A2 | 2 | B || A3 | 3 | C | ±-----±--------±----------+ 3 rows in set (0.00 sec) mysql&gt;","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://jsunnyr.github.io/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://jsunnyr.github.io/tags/MySQL/"}],"author":"susu"},{"title":"mysql_installation","slug":"db/mysql/mysql-installation","date":"2020-01-07T03:01:32.000Z","updated":"2021-12-05T12:32:55.850Z","comments":true,"path":"2020/01/07/db/mysql/mysql-installation/","link":"","permalink":"http://jsunnyr.github.io/2020/01/07/db/mysql/mysql-installation/","excerpt":"","text":"MySQL 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798[root@master tmp]# lsmysql-5.7.26-1.el7.x86_64.rpm-bundle.tar vmware-tools-distribVMwareTools-10.3.10-13959562.tar.gz[root@master tmp]# mkdir localrepo[root@master tmp]# tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar -C /tmp/localrepo/mysql-community-embedded-devel-5.7.26-1.el7.x86_64.rpmmysql-community-libs-5.7.26-1.el7.x86_64.rpmmysql-community-embedded-5.7.26-1.el7.x86_64.rpmmysql-community-test-5.7.26-1.el7.x86_64.rpmmysql-community-embedded-compat-5.7.26-1.el7.x86_64.rpmmysql-community-common-5.7.26-1.el7.x86_64.rpmmysql-community-devel-5.7.26-1.el7.x86_64.rpmmysql-community-client-5.7.26-1.el7.x86_64.rpmmysql-community-server-5.7.26-1.el7.x86_64.rpmmysql-community-libs-compat-5.7.26-1.el7.x86_64.rpm[root@master tmp]# rpm -ivh localrepo/*.rpmwarning: ./mysql-community-client-5.7.26-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEYerror: Failed dependencies: mariadb-libs is obsoleted by mysql-community-libs-5.7.26-1.el7.x86_64 mariadb-libs is obsoleted by mysql-community-libs-compat-5.7.26-1.el7.x86_64 perl(JSON) is needed by mysql-community-test-5.7.26-1.el7.x86_64[root@master tmp]# [root@master localrepo]# rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm mysql-community-client-5.7.26-1.el7.x86_64.rpm mysql-community-libs-5.7.26-1.el7.x86_64.rpm mysql-community-common-5.7.26-1.el7.x86_64.rpm warning: mysql-community-server-5.7.26-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEYPreparing... ################################# [100%]Updating / installing... 1:mysql-community-common-5.7.26-1.e################################# [ 25%] 2:mysql-community-libs-5.7.26-1.el7################################# [ 50%] 3:mysql-community-client-5.7.26-1.e################################# [ 75%] 4:mysql-community-server-5.7.26-1.e################################# [100%][root@master tmp]# systemctl start mysqld[root@master tmp]# vim /var/log/mysqld.log2019-12-09T12:05:45.749699Z 1 [Note] A temporary password is generated for root@localhost: eYu.a&lt;?Zp1Qg......[root@master tmp]# mysql -uroot -pEnter password: (/var/log/mysqld.log中的临时密码)Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 2Server version: 5.7.26Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; mysql&gt; show variables like &#x27;%password%&#x27;;ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.mysql&gt; alter user root@&#x27;localhost&#x27; identified by &#x27;1&#x27;;ERROR 1819 (HY000): Your password does not satisfy the current policy requirementsmysql&gt; alter user root@&#x27;localhost&#x27; identified by &#x27;MySQL1234!&#x27;;Query OK, 0 rows affected (0.01 sec)mysql&gt; show variables like &#x27;validate%&#x27;;+--------------------------------------+--------+| Variable_name | Value |+--------------------------------------+--------+| validate_password_check_user_name | OFF || validate_password_dictionary_file | || validate_password_length | 8 || validate_password_mixed_case_count | 1 || validate_password_number_count | 1 || validate_password_policy | MEDIUM || validate_password_special_char_count | 1 |+--------------------------------------+--------+7 rows in set (0.00 sec)mysql&gt; set @@global.validate_password_policy=1,@@global.validate_password_number_count=0,@@global.validate_password_special_char_count=0,@@global.validate_password_mixed_case_count=0,@@global.validate_password_length=1;Query OK, 0 rows affected (0.01 sec)mysql&gt; show variables like &#x27;validate%&#x27;;+--------------------------------------+--------+| Variable_name | Value |+--------------------------------------+--------+| validate_password_check_user_name | OFF || validate_password_dictionary_file | || validate_password_length | 1 || validate_password_mixed_case_count | 0 || validate_password_number_count | 0 || validate_password_policy | MEDIUM || validate_password_special_char_count | 0 |+--------------------------------------+--------+7 rows in set (0.00 sec)mysql&gt; alter user root@&#x27;localhost&#x27; identified by &#x27;1&#x27;;Query OK, 0 rows affected (0.01 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253[root@master ~]# mysql_config_editor set --login-path=client --user=root --host=localhost --port=3306 --passwordEnter password: [root@master ~]# ls -lrth-rw-------. 1 root root 140 Dec 9 20:36 .mylogin.cnf[root@master ~]# mysql_config_editor print --all[client]user = rootpassword = *****host = localhostport = 3306[root@master ~]# mysql_config_editor print --login-path=client[client]user = rootpassword = *****host = localhostport = 3306[root@master ~]# mysql_config_editor remove --login-path=client[root@master ~]# mysql_config_editor print --all[root@master ~]# [root@master ~]# mysql_config_editor print --all=false[client]user = rootpassword = *****host = localhostport = 3306[root@master ~]# mysql_config_editor set --login-path=haha --user=root --host=localhost --port=3306 --passwordEnter password: [root@master ~]# mysql_config_editor print --all[client]user = rootpassword = *****host = localhostport = 3306[haha]user = rootpassword = *****host = localhostport = 3306[root@master ~]# mysql --login-path=hahaWelcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 9Server version: 5.7.26 MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; 导出结果集到文件 12mysql&gt; select * from test.jobs into outfile &#x27;/tmp/db_test_tb_jobs&#x27;;Query OK, 19 rows affected (0.03 sec) 123456789101112131415161718192021222324mysql&gt; pager cat &gt;&gt; /tmp/db_test_tb_jobs;PAGER set to &#x27;cat &gt;&gt; /tmp/db_test_tb_jobs&#x27;mysql&gt; select * from test.jobs;19 rows in set (0.00 sec)mysql&gt; nopager;PAGER set to stdoutmysql&gt; system cat /tmp/db_test_tb_jobs;AC_ACCOUNT Public Accountant 4200 9000AC_MGR Accounting Manager 8200 16000AD_ASST Administration Assistant 3000 6000AD_PRES President 20080 40000AD_VP Administration Vice President 15000 30000+------------+---------------------------------+------------+------------+| JOB_ID | JOB_TITLE | MIN_SALARY | MAX_SALARY |+------------+---------------------------------+------------+------------+| AC_ACCOUNT | Public Accountant | 4200 | 9000 || AC_MGR | Accounting Manager | 8200 | 16000 || AD_ASST | Administration Assistant | 3000 | 6000 || AD_PRES | President | 20080 | 40000 || AD_VP | Administration Vice President | 15000 | 30000 |+------------+---------------------------------+------------+------------+mysql&gt;","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://jsunnyr.github.io/categories/MySQL/"}],"tags":[{"name":"Knowledge","slug":"Knowledge","permalink":"http://jsunnyr.github.io/tags/Knowledge/"},{"name":"MySQL","slug":"MySQL","permalink":"http://jsunnyr.github.io/tags/MySQL/"}],"author":"susu"},{"title":"mysql_basic_os_related","slug":"db/mysql/mysql-basic-os-related","date":"2020-01-07T02:20:11.000Z","updated":"2021-12-05T12:32:55.843Z","comments":true,"path":"2020/01/07/db/mysql/mysql-basic-os-related/","link":"","permalink":"http://jsunnyr.github.io/2020/01/07/db/mysql/mysql-basic-os-related/","excerpt":"","text":"MySQL-related OS Command 1234567891011121314151617181920212223242526gunzip -c a.tar.gz | tar -xvf -gunzip &lt; a.tar.gz | tar -xvf -zcat a.tar.gz | tar -xvf -tar -zxvf a.tar.gz# md5 check md5sum package_name;openssl md5 package_name;gpg --import mysql_pubky.ascgpg --recv-keys 5072E1F5gpg --verify package_name.ascrpm --import mysql_pubkey.ascyum install mysql-community-&#123;server,client,common,libs&#125;-*yum-config-manager --disable mariadbyum --disablerepo=\\* --enablerepo=&#x27;mysql*-community*&#x27; list availableyum --disablerepo=epel list installed mysql\\*yumdownloader --disablerepo=epel yum-utilsyum-config-manager --disable mariadbrpm -qpl package_name.rpmdpkg-preconfigure mysql-community-server_*.debdpkg -i mysql-&#123;common,community-client,client,community-server,server&#125;_*.debapt-get -f install cat /etc/my.cnf 123456789101112131415161718192021222324[root@master ~]# cat /etc/my.cnf[mysqld@01]port=3306datadir=/var/lib/mysqld01socket=/var/lib/mysqld01/mysqld01.socksymbolic-links=0log-error=/var/log/mysqld01.logpid-file=/var/run/mysqld01/mysqld01.pid[mysqld@02]port=3307datadir=/var/lib/mysqld02socket=/var/lib/mysqld02/mysqld02.socksymbolic-links=0log-error=/var/log/mysqld02.logpid-file=/var/run/mysqld02/mysqld02.pid[mysqld@03]port=3308datadir=/var/lib/mysqld03socket=/var/lib/mysqld03/mysqld03.socksymbolic-links=0log-error=/var/log/mysqld03.logpid-file=/var/run/mysqld03/mysqld03.pid 12345678910111213141516systemctl daemon-reloadsystemctl start mysqld@01systemctl start mysqld@02systemctl start mysqld@03[root@master ~]# netstat -antActive Internet connections (servers and established)Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN tcp 0 52 192.168.1.4:22 192.168.1.1:13648 ESTABLISHEDtcp6 0 0 :::3306 :::* LISTEN tcp6 0 0 :::3307 :::* LISTEN tcp6 0 0 :::3308 :::* LISTEN tcp6 0 0 :::22 :::* LISTEN [root@master ~]#","categories":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"},{"name":"MySQL","slug":"MySQL","permalink":"http://jsunnyr.github.io/tags/MySQL/"},{"name":"Official doc","slug":"Official-doc","permalink":"http://jsunnyr.github.io/tags/Official-doc/"}],"author":"susu"},{"title":"mysql_basic","slug":"db/mysql/mysql-basic","date":"2020-01-07T02:10:16.000Z","updated":"2021-12-05T12:32:55.845Z","comments":true,"path":"2020/01/07/db/mysql/mysql-basic/","link":"","permalink":"http://jsunnyr.github.io/2020/01/07/db/mysql/mysql-basic/","excerpt":"","text":"[!NOTE] 在MySQL中,schema和database是同义词. CREATE SCHEMA和CREATE DATABASE是等效的. 但是其他的数据库产品(几乎所有数据库)有所不同.在oracle数据库产品中,schema是database的一部分. 表示the tables and other objects owned by a single user. [!NOTE] https://dev.mysql.com/doc/ https://pymysql.readthedocs.io/en/latest/ MySQL-related command mysql is case-insensitive 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！ 每个库目录存在一个保存当前数据库的选项文件db.opt。 注释： 单行注释 # 注释内容 多行注释 /* 注释内容 */ 单行注释 – 注释内容 (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）) 模式通配符： _ 任意单个字符 % 任意多个字符，甚至包括零字符 单引号需要进行转义 ’ CMD命令行内的语句结束符可以为 “;”, “\\G”, “\\g”，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。 SQL对大小写不敏感 清除已有语句：\\c 12345678910111213141516171819202122232425262728293031323334353637383940414243444546-- connection over TCP/IPmysql -h server_ip -Pport -uroot -p-- connection over UNIX Socketmysql -S /data/mysql/mysql.sock -uroot -pmysqld --verbose --helpmysqladmin version status procmysqladmin variables extended-status processlistmysql -e &quot;check table db_name.tb_name quick&quot;mysqlshowmysqladmin -u root password &quot;new_password&quot;mysqladmin -u USERNAME -h HOSTNAME password &#x27;NEW_PASS&#x27; -pmysqldumpslow -s c -t 20 233SS1-slow.log\\s;status;-- engine-relatedshow engine ENGINE_NAME &#123;logs|status&#125;;-- variable-related-- 系统变量set @@global.validate_password_length=1,@@global.validate_password_low_case=0;set names charset_name;select @@global.sql_mode;-- 用户自定义变量set @var_name:=value;select @var_name;-- 时间函数mysql&gt; select unix_timestamp() into @didi;Query OK, 1 row affected (0.01 sec)mysql&gt; select from_unixtime(@didi);+----------------------+| from_unixtime(@didi) |+----------------------+| 2019-12-20 15:23:35 |+----------------------+1 row in set (0.00 sec) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343-- user-related&gt; 用户权限相关数据保存在mysql数据库的usertb_name中，所以也可以直接对其进行操作-- 创建用户create USER &#x27;username&#x27;@&#x27;ip&#x27; IDETIFIED BY &#x27;password&#x27;; - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。 - 只能创建用户，不能赋予权限。 - 用户名，注意引号：如 &#x27;user_name&#x27;@&#x27;192.168.1.1&#x27; - 密码也需引号，纯数字密码也要加引号alter user user_name@&#x27;%&#x27; identified by password ACCOUNT LOCK/UNLOCK;-- 设置密码SET PASSWORD = PASSWORD(&#x27;密码&#x27;) -- 为当前用户设置密码SET PASSWORD FOR 用户名 = PASSWORD(&#x27;密码&#x27;) -- 为指定用户设置密码-- 重命名用户rename user user_name TO new_user_name;rename user user_name@ip_addr TO new_username@new_ip_addr;-- 删除用户DROP USER &#x27;username&#x27;@&#x27;ip&#x27;;delete from mysql.user where Host=&#x27;192.168.1.4&#x27;;-- 修改用户RENAME USER &#x27;username&#x27;@&#x27;ip&#x27; to &#x27;new_username&#x27;@&#x27;ip&#x27;;-- 修改密码SET password FOR &#x27;username&#x27;@&#x27;ip&#x27; = Password(&#x27;new_password&#x27;);# mysql5.7之前mysql&gt; update mysql.user set password=password(&#x27;123456&#x27;) where user=&#x27;root&#x27;;# mysql5.7之后mysql&gt; update mysql.user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27;;mysql&gt; flush privileges;Alter user UserName@ip_addr identified by &#x27;password&#x27;;select Host,User,Grant_priv from mysql.user;]&gt; [Privileges Provided by MySQL](https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html)-- 查看权限show grants;show GRANTS FOR &#x27;usernmae&#x27;@&#x27;ip&#x27;;show grants for current_user();show grants for &quot;user&quot;@&quot;host&quot;;-- 授权GRANT 权限 ON db_name.tb_name TO &#x27;username&#x27;@&#x27;ip&#x27;;GRANT ALL PRIVILEGES ON db_name.* TO &#x27;username&#x27;@&#x27;host&#x27; IDENTIFIED BY &#x27;testuser_pass&#x27; WITH GRANT OPTION;* 取消授权REVOKE 权限 FROM db_name.tb_name FROM &#x27;username&#x27;@&#x27;ip&#x27;revoke all on *.* from &quot;username&quot;@&quot;localhost&quot;;revoke select on *.* from &quot;username&quot;@&quot;localhost&quot;;-- 修改用户密码alter user &#x27;username&#x27;@&#x27;ip_addr&#x27; identified by &#x27;new_password&#x27;;update mysql.user set password=password(&#x27;新密码&#x27;) where User=&quot;username&quot; and Host=&quot;ip_addr&quot;;set password for user_name = new_password;set password for user_name = password(&#x27;new_password&#x27;);-- 口令失效alter user user_name@ip_addr password expire;-- 权限列表ALL [PRIVILEGES] -- 设置除GRANT OPTION之外的所有简单权限ALTER -- 允许使用ALTER TABLEALTER ROUTINE -- 更改或取消已存储的子程序CREATE -- 允许使用CREATE TABLECREATE ROUTINE -- 创建已存储的子程序CREATE TEMPORARY TABLES -- 允许使用CREATE TEMPORARY TABLECREATE USER -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。CREATE VIEW -- 允许使用CREATE VIEWDELETE -- 允许使用DELETEDROP -- 允许使用DROP TABLEEXECUTE -- 允许用户运行已存储的子程序FILE -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILEINDEX -- 允许使用CREATE INDEX和DROP INDEXINSERT -- 允许使用INSERTLOCK TABLES -- 允许对您拥有SELECT权限的表使用LOCK TABLESPROCESS -- 允许使用SHOW FULL PROCESSLISTREFERENCES -- 未被实施RELOAD -- 允许使用FLUSHREPLICATION CLIENT -- 允许用户询问从属服务器或主服务器的地址REPLICATION SLAVE -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）SELECT -- 允许使用SELECTSHOW DATABASES -- 显示所有数据库SHOW VIEW -- 允许使用SHOW CREATE VIEWSHUTDOWN -- 允许使用mysqladmin shutdownSUPER -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。UPDATE -- 允许使用UPDATEUSAGE -- “无权限”的同义词GRANT OPTION -- 允许授予权限-- PLUGIN-related-- install pluginsINSTALL PLUGIN plugin_nbame SONAME &#x27;plugin_name&#x27;;-- uninstall pluginuninstall plugin plugin_name;-- show-relatedshow warnings/variablels/status/engines/collation;show create procedure/function/table/database;show procedure status;show create procedure proc_name;show variables like &#x27;lower_case_table_names&#x27;;show tables like &#x27;regx&#x27;;show create table tb_name;desc tb_name;describe tb_name;show COLUMNS FROM tb_name;show full fields from tb_name;show INDEX FROM tb_name;show TABLE STATUS FROM db_name;show TABLE STATUS FROM db_name LIKE &#x27;pattern%&#x27;;-- SELECT-relatedSELECT routine_schema, routine_name, sql_mode from information_schema.routines;SELECT event_object_schema, event_object_table, trigger_name, sql_mode from nformation_schema.triggers;select user()/version()/database()/CURRENT_DATE/CURRENT_DATE()/CURDATE()/CURRENT_TIME/CURRENT_TIME()/CURTIME()/unix_timestamp()/last_insert_id()/connection_id()/uuid();select 4+5,ifnull(3,2/0);SELECT [ALL|DISTINCT] select_expr FROM -&gt; WHERE -&gt; GROUP BY [合计函数] -&gt; HAVING -&gt; ORDER BY -&gt; LIMITa. select_expr -- 可以用 * 表示所有字段。 select * from tb; -- 可以使用表达式（计算公式、函数调用、字段也是个表达式） select stu, 29+25, now() from tb; -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。 - 使用 as 关键字，也可省略 as. select stu+10 as add10 from tb;b. FROM 子句 用于标识查询来源。 -- 可以为表起别名。使用as关键字。 SELECT * FROM tb1 AS tt, tb2 AS bb; -- from子句后，可以同时出现多个表。 -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。 SELECT * FROM tb1, tb2; -- 向优化符提示如何选择索引 USE INDEX、IGNORE INDEX、FORCE INDEX SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3; SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;c. WHERE 子句 -- 从from获得的数据源中进行筛选。 -- 整型1表示真，0表示假。 -- 表达式由运算符和运算数组成。 -- 运算数：变量（字段）、值、函数返回值 -- 运算符： =, &lt;=&gt;, &lt;&gt;, !=, &lt;=, &lt;, &gt;=, &gt;, !, &amp;&amp;, ||, in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor is/is not 加上ture/false/unknown，检验某个值的真假 &lt;=&gt;与&lt;&gt;功能相同，&lt;=&gt;可用于null比较d. GROUP BY 子句, 分组子句 GROUP BY 字段/别名 [排序方式] 分组后会进行排序。升序：ASC，降序：DESC 以下[合计函数]需配合 GROUP BY 使用： count 返回不同的非NULL值数目 count(*)、count(字段) sum 求和 max 求最大值 min 求最小值 avg 求平均值 group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。e. HAVING 子句，条件子句 与 where 功能、用法相同，执行时机不同。 where 在开始时执行检测数据，对原数据进行过滤。 having 对筛选出的结果再次进行过滤。 having 字段必须是查询出来的，where 字段必须是数据表存在的。 where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。 where 不可以使用合计函数。一般需用合计函数才会用 having SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。f. ORDER BY 子句，排序子句 order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]... 升序：ASC，降序：DESC 支持多个字段的排序。g. LIMIT 子句，限制结果数量子句 仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。 limit 起始位置, 获取条数 省略第一个参数，表示从索引0开始。limit 获取条数h. DISTINCT, ALL 选项 distinct 去除重复记录 默认为 all, 全部记录-- table-relatedcreate table tb_1( id int , name varchar(5) );show index from tb_1;alter table tb_1 add primary key(id);create index ind_name on tb_1(id);show table status like &#x27;tb_1&#x27;;SHOW TABLES [ LIKE &#x27;pattern&#x27;];drop index ind_name on tb_1;drop table tb_name;repair table tb_name quick;analyze table tb_name;SHOW TABLES FROM db_name;SHOW CREATE TABLE 表名;SHOW TABLE STATUS [FROM db_name] [LIKE &#x27;pattern&#x27;]-- 新建表create TABLE IF NOT EXISTS `tb_name`( `field1` int primary key AUTO_INCREMENT not null, `field2` varchar(20) COLLATE utf8mb4_general_ci, `fieldLast`)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;-- 表锁定只用于防止其它客户端进行不正当地读取和写入-- MyISAM 支持表锁，InnoDB 支持行锁-- 锁定 LOCK TABLES tbl_name [AS alias]-- 解锁 UNLOCK TABLES-- 其他建tb_name方式： create TABLE new_tb_name LIKE tb_name;(复制tb_name结构) INSERT INTO new_tb_name select * FROM tb_name;(tb_name结构一致的前提下，插入所选数据)create TABLE tb_name select * from tb_name;create TABLE tb_name AS select * FROM tb_name;-- 清空表DELETE FROM tb_name;(清空数据，保留tb_name结构) TRUNCATE TABLE tb_name;(清空数据，保留tb_name结构) -- 区别- truncate 是删除表再创建，delete 是逐条删除- truncate 重置auto_increment的值。而delete不会- truncate 不知道删除了几条，而delete知道- 当被用于带分区的表时，truncate 会保留分区DROP TABLE tb_name;(清空数据，删除tb_name) DELETE FROM tbl_name [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]- 按照条件删除。where- 指定删除的最多记录数。limit- 可以通过排序条件删除。order by + limit- 支持多表删除，使用类似连接语法。- delete from 需要删除数据多表1，表2 using 表连接操作 条件。-- 更改表名ALTER TABLE old_tb_name RENAME TO new_tb_name;RENAME TABLE old_tb_name TO new_tb_name;RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）-- 插入信息INSERT INTO tb_name VALUES(字段1，字段2，&#x27;str&#x27;, ...)； INSERT INTO tb_name VALUES(字段1(如果该字段自增，即使指定数字也无用，可写NULL代替)，字段2，&#x27;str&#x27;, ...); INSERT INTO tb_name VALUES( 1, &#x27;zhao&#x27; ),( 2, &#x27;qian&#x27; ),( 3, &#x27;sun&#x27; );(插入多条数据)-- select语句获得的数据可以用insert插入可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。 或者使用set语法。 INSERT INTO tbl_name SET field=value,...；可以一次性使用多个值，采用(), (), ();的形式。 INSERT INTO tbl_name VALUES (), (), ();可以在列值指定时，使用表达式。 INSERT INTO tbl_name VALUES (field_value, 10+10, now());可以使用一个特殊值 DEFAULT，表示该列使用默认值。 INSERT INTO tbl_name VALUES (field_value, DEFAULT);可以通过一个查询的结果，作为需要插入的值。 INSERT INTO tbl_name SELECT ...;可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。 INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段=值, …;-- 更新信息UPDATE tb_name SET `fieldN` = &#x27;new_value&#x27; WHERE Clause;-- 删除字段ALTER TABLE tb_name DROP `target_column_name`;-- 添加字段ALTER TABLE tb_name ADD `new_column_name` column_type_and_option;-- 更改字段名ALTER TABLE tb_name CHANGE `target_col_name` `new_col_name` new_col_def;ALTER TABLE tb_name CHANGE COLUMN `target_col_name` `new_col_name` new_col_def;alter table tb_name modify `col_name` new_col_def;ALTER TABLE tb_name MODIFY COLUMN `target_col_name` new_def;-- db-related-- 新建数据库create DATABASE IF NOT EXISTS `db_name` DEFAULT CHARSET utf8mb4 COLLATE utf8mb4_general_ci;CREATE DATABASE `dada` /*!40100 DEFAULT CHARACTER SET utf8mb4 */;create database zeze /*!default character set utf8*/;# alter-relatedalter table tb_name change old_col_name new_col_name col_definition;alter table didi engine=innodb;alter table tb_name drop col_name;alter table tb_name add new_col_name col_definition;alter table tb_name add new_col_name First;alter table tb_name add new_col_name after existed_col_name;# trim()select trim(BOTH &#x27;,&#x27; FROM &quot;,,haha,,&quot;);select ... into outfile &#x27;/tmp/db_xx_tb_yy&#x27;;# COMMENT / changealter table didi change id id int comment &#x27;column:id&#x27;;# modifyalter table didi modify id int comment &#x27;column:id&#x27;;select column_name, data_type, column_comment from information_schema.columns where table_name=&#x27;didi&#x27; and table_schema=&#x27;haha&#x27; and column_name like &#x27;name%&#x27;;create table zeze (id int, name varchar(20)) COMMENT &#x27;table zeze&#x27;;create table zeze (id int, name varchar(20)) COMMENT=&#x27;table zeze&#x27;;show table status from haha like &#x27;didi&#x27;\\G;show table status where name=&#x27;didi&#x27;\\G;# log-relatedshow BINARY LOGS;show master logs;show MASTER STATUS;show BINLOG EVENTS IN &#x27;二进制日志文件&#x27; [FROM &#x27;position&#x27;];PURGE BINARY LOGS TO &#x27;日志文件&#x27;;FLUSH LOGS;purge binary logs before now()- interval 7 day;purge binary logs to &#x27;bin_log_name&#x27;;show function status [like pattern];show create function 函数名字;create function fun_name ...;drop function fun_name;# 使用函数select 函数名(实参列表);# perfromance# performance-relatedshow status like &#x27;innodb_row_%&#x27;;show variables like &#x27;query%&#x27;;show variables like &#x27;innodb_doublewrite&#x27;;show variables like &#x27;innodb_data_file%&#x27;;show variables like &#x27;innodb_file%&#x27;;show variables like &#x27;innodb_temp%&#x27;;# 回收undo段的线程show variables like &#x27;%purge%%&#x27;;show variables like &#x27;max_heap_table_size&#x27;;show variables like &#x27;tmp_table_size&#x27;;show variables like &#x27;%tmpdir%&#x27;;show status like &#x27;created_tmp%&#x27;; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192# 添加列alter table tb_name名 add 列名 类型# 删除列alter table tb_name名 drop column 列名# 修改列alter table tb_name名 modify column 列名 类型; -- 类型alter table tb_name名 change 原列名 新列名 类型; -- 列名，类型 # 添加主键alter table tb_name名 add primary key(列名);# 删除主键alter table tb_name名 drop primary key;alter table tb_name名 modify 列名 int, drop primary key;# 添加外键alter table 从tb_name add constraint 外键名称（形如FK_从tb_name_主tb_name） foreign key 从tb_name(外键字段) references 主tb_name(主键字段);# 删除外键alter table tb_name名 drop foreign key 外键名称 # 修改默认值ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;# 删除默认值ALTER TABLE testalter_tbl ALTER i DROP DEFAULT;1、条件 select * from tb_name where id &gt; 1 and name != &#x27;alex&#x27; and num = 12; select * from tb_name where id between 5 and 16; select * from tb_name where id in (11,22,33) select * from tb_name where id not in (11,22,33) select * from tb_name where id in (select nid from tb_name)2、通配符select * from tb_name where name like &#x27;ale%&#x27; - ale开头的所有（多个字符串）select * from tb_name where name like &#x27;ale_&#x27; - ale开头的所有（一个字符）3、限制select * from tb_name limit 5; - 前5行select * from tb_name limit 4,5; - 从第4行开始的5行select * from tb_name limit 5 offset 4 - 从第4行开始的5行 4、排序select * from tb_name order by 列 asc - 根据 “列” 从小到大排列select * from tb_name order by 列 desc - 根据 “列” 从大到小排列select * from tb_name order by 列1 desc,列2 asc - 根据 “列1” 从大到小排列，如果相同则按列2从小到大排序 5、分组 select num from tb_name group by num select num,nid from tb_name group by num,nid select num,nid from tb_name where nid &gt; 10 group by num,nid order nid desc select num,nid,count(*),sum(score),max(score),min(score) from tb_name group by num,nid select num from tb_name group by num having max(id) &gt; 10# &gt; 特别的group by 必须在where之后，order by之前 6、连tb_name 无对应关系则不显示 select A.num, A.name, B.name from A,B Where A.nid = B.nid 无对应关系则不显示 select A.num, A.name, B.name from A inner join B on A.nid = B.nid Atb_name所有显示，如果B中无对应关系，则值为null select A.num, A.name, B.name from A left join B on A.nid = B.nid Btb_name所有显示，如果B中无对应关系，则值为null select A.num, A.name, B.name from A right join B on A.nid = B.nid 7、组合 组合，自动处理重合 select nickname from A union select name from B 组合，不处理重合 select nickname from A union all select name from B 日志 错误日志： log_error log_warnings 一般查询日志： general_log general_log_file log log_output 慢查询日志： log_output {TABLE|FILE|NONE} long_query_time log_slow_queries slow_query_log slow_query_log_file 二进制日志: 复制、即时点恢复 重放 二进制日志事件： 基于语句：statement 基于行：row 混合方式：mixed 通配符 通配符的分类: %百分号: tb_name示任何字符出现任意次数(可以是0次)。 下划线: tb_name示只能匹配单个字符,不能多也不能少,就是一个字符。 like操作符: LIKE作用是指示mysql后面的搜索模式是利用通配符而不是直接相等匹配进行比较。 %通配符可以匹配任意字符,但是不能匹配NULL 如果在使用like操作符时,后面的没有使用通用匹配符效果是和&quot;=&quot;一致的。 原则： 不要过度使用通配符。如果其他操作符能达到相同的目的，应该 使用其他操作符。 在确实需要使用通配符时，除非绝对有必要，否则不要把它们用 在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起 来是最慢的。 仔细注意通配符的位置。如果放错地方，可能不会返回想要的数. 查看字符集 show CHARSET; show CHARACTER SET; show COLLATION； UTF－8：一个汉字＝3个字节 GBK：一个汉字＝2个字节 从mysql 8.0开始，mysql默认的CHARSET已经不再是Latin1了，改为了utf8mb4（参考链接），并且默认的COLLATE也改为了utf8mb4_0900_ai_ci 设置COLLATE可以在示例级别、库级别、tb_name级别、列级别、以及SQL指定。实例级别的COLLATE设置就是mysql配置文件或启动指令中的collation_connection系统变量。 假设全都显示设置，那么优先级顺序是 SQL语句 &gt; 列级别设置 &gt; tb_name级别设置 &gt; 库级别设置 &gt; 实例级别设置。也就是说列上所指定的COLLATE可以覆盖tb_name上指定的COLLATE，tb_name上指定的COLLATE可以覆盖库级别的COLLATE。如果没有指定，则继承下一级的设置。即列上面没有指定COLLATE，则该列的COLLATE和tb_name上设置的一样。 数据类型 数值类型 – a. 整型 ---------- 类型 字节 范围（有符号位） tinyint 1字节 -128 ~ 127 无符号位：0 ~ 255 smallint 2字节 -32768 ~ 32767 mediumint 3字节 -8388608 ~ 8388607 int 4字节 bigint 8字节 int(M) M表示总位数 - 默认存在符号位，unsigned 属性修改 - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改 例：int(5) 插入一个数’123’，补填后为’00123’ - 在满足要求的情况下，越小越好。 - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。 – b. 浮点型 ---------- 类型 字节 范围 float(单精度) 4字节 double(双精度) 8字节 浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。 不同于整型，前后均会补填0. 定义浮点型时，需指定总位数和小数位数。 float(M, D) double(M, D) M表示总位数，D表示小数位数。 M和D的大小会决定浮点数的范围。不同于整型的固定范围。 M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。 支持科学计数法表示。 浮点数表示近似值。 – c. 定点数 ---------- decimal – 可变长度 decimal(M, D) M也表示总位数，D表示小数位数。 保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。 将浮点数转换为字符串来保存，每9位数字保存为4个字节。 字符串类型 – a. char, varchar ---------- char 定长字符串，速度快，但浪费空间 varchar 变长字符串，速度慢，但节省空间 M表示能存储的最大长度，此长度是字符数，非字节数。 不同的编码，所占用的空间不同。 char,最多255个字符，与编码无关。 varchar,最多65535字符，与编码有关。 一条有效记录最大不能超过65535个字节。 utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符 varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。 varchar 的最大有效长度由最大行大小和使用的字符集确定。 最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。 例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3 – b. blob, text ---------- blob 二进制字符串（字节字符串） tinyblob, blob, mediumblob, longblob text 非二进制字符串（字符字符串） tinytext, text, mediumtext, longtext text 在定义时，不需要定义长度，也不会计算总长度。 text 类型在定义时，不可给default值 – c. binary, varbinary ---------- 类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。 char, varchar, text 对应 binary, varbinary, blob. 日期时间类型 一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。 datetime 8字节 日期及时间 1000-01-01 00:00:00 到 9999-12-31 23:59:59 date 3字节 日期 1000-01-01 到 9999-12-31 timestamp 4字节 时间戳 19700101000000 到 2038-01-19 03:14:07 time 3字节 时间 -838:59:59 到 838:59:59 year 1字节 年份 1901 - 2155 datetime YYYY-MM-DD hh:mm:ss timestamp YY-MM-DD hh:mm:ss YYYYMMDDhhmmss YYMMDDhhmmss YYYYMMDDhhmmss YYMMDDhhmmss date YYYY-MM-DD YY-MM-DD YYYYMMDD YYMMDD YYYYMMDD YYMMDD time hh:mm:ss hhmmss hhmmss year YYYY YY YYYY YY 枚举和集合 – 枚举(enum) ---------- enum(val1, val2, val3…) 在已知的值中进行单选。最大数量为65535. 枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。 表现为字符串类型，存储却是整型。 NULL值的索引是NULL。 空字符串错误值的索引值是0。 – 集合（set） ---------- set(val1, val2, val3…) create table tab ( gender set(‘男’, ‘女’, ‘无’) ); insert into tab values (‘男, 女’); 最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。 当创建表时，SET成员值的尾部空格将自动被删除。 约束 PRIMARY 主键 能唯一标识记录的字段，可以作为主键。 一个表只能有一个主键。 主键具有唯一性。 声明字段时，用 primary key 标识。 也可以在字段列表之后声明 例：create table tab ( id int, stu varchar(10), primary key (id)); 主键字段的值不能为null。 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。 例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age)); UNIQUE 唯一索引（唯一约束） 使得某字段的值也不能重复。 NULL 约束 null不是数据类型，是列的一个属性。 表示当前列是否可以为null，表示什么都没有。 null, 允许为空。默认。 not null, 不允许为空。 insert into tab values (null, ‘val’); – 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null DEFAULT 默认值属性 当前字段的默认值。 insert into tab values (default, ‘val’); – 此时表示强制使用默认值。 create table tab ( add_time timestamp default current_timestamp ); – 表示将当前时间的时间戳设为默认值。 current_date, current_time AUTO_INCREMENT 自动增长约束 自动增长必须为索引（主键或unique） 只能存在一个字段为自动增长。 默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x; COMMENT 注释 例：create table tab ( id int ) comment ‘注释内容’; FOREIGN KEY 外键约束 用于限制主表与从表数据完整性。 alter table t1 add constraint t1_t2_fk foreign key (t1_id) references t2(id); – 将表t1的t1_id外键关联到表t2的id字段。 – 每个外键都有一个名字，可以通过 constraint 指定 存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。 作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。 MySQL中，可以对InnoDB引擎使用外键约束： 语法： foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作] 此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。 可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。 如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择： cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。 set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。 restrict，拒绝父表删除和更新。 注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。 授权相关 123456789101112131415161718192021222324252627282930313233343536373839all privileges 除grant外的所有权限select 仅查权限select,insert 查和插入权限usage 无访问权限alter 使用alter tablealter routine 使用alter procedure和drop procedurecreate 使用create tablecreate routine 使用create procedurecreate temporary tables 使用create temporary tablescreate user 使用create user、drop user、rename user和revokecreate view 使用create viewdelete 使用deletedrop 使用drop tableexecute 使用call和存储过程file 使用select into outfile 和 load data infilegrant option 使用grant 和 revokeindex 使用indexinsert 使用insertlock tables 使用lock tableprocess 使用show full processlistselect 使用selectshow databases 使用show databasesshow view 使用show viewupdate 使用updatereload 使用flushshutdown 使用mysqladmin shutdown(关闭MySQL)superreplication client 服务器位置的访问replication slave 由复制从属使用对于目标数据库以及内部其他： 数据库名.* 数据库中的所有 数据库名.tb_name 指定数据库中的某张tb_name 数据库名.存储过程 指定数据库中的存储过程 *.* 所有数据库 用户名@IP地址 用户只能在改IP下才能访问 用户名@192.168.1.% 用户只能在改IP段下才能访问(通配符%tb_name示任意) 用户名@% 用户可以再任意IP下访问(默认IP地址为%) 查询 JOIN 按照功能大致分为如下三类： INNER JOIN（内连接,或等值连接）：获取两个tb_name中字段匹配关系的记录。 LEFT JOIN（左连接）：获取左tb_name所有记录，即使右tb_name没有对应匹配的记录。 RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右tb_name所有记录，即使左tb_name没有对应匹配的记录。 select tb1.field1, tb1.field2,…tb2.fieldX FROM tb1 tb1_alias JOIN tb2 tb2_alias on tb1.special_field=tb2.special_field MySQL 同样也支持其他正则tb_name达式的匹配， MySQL中使用 REGEXP 操作符来进行正则tb_name达式匹配 select field FROM tb_name WHERE condition REGEXP ‘pattern’; select DISTINCT field FROM tb_name; UPDATE tb_name SET field=new_value WHERE field=old_Value 单tb_name查询 多tb_name查询 子查询 自然连接 内连接 外连接 自连接 左连接 右连接 多tb_name查询： 连接： 交叉连接：笛卡尔乘积 自然连接(内连接)： 条件WHERE 外连接： 左外连接：… LEFT JOIN … ON … 右外连接: … RIGHT JOIN … ON … 自连接： 条件WHERE 子查询： 比较操作中使用子查询：子查询只能返回单个值； IN(): 使用子查询； 在FROM中使用子查询； 联合查询： UNION 关系运算： 投影：只输出指定属性 选择：只输出符合条件的行 自然连接：具有相同名字的属性上所有取值相同的行； 笛卡尔积(交叉连接)： (a+b)*(c+d)=ac+ad+bc+bd 外连接 内连接 完全连接 并：集合运算 视图： 存储下来的select语句； 基于基tb_name的查询结果； 物化视图：select 将select的结果保存下来，但是基tb_name更新了，物化视图就凉了 mysql视图上不能创建索引 用户管理 用户 创建用户的三种方式: create user user_name identified by ‘password’; grant usage on . to username@‘hostname’; insert into mysql.user set password=password(“new password”) where user=‘user_name’; 权限 重置数据库 root 密码 启动mysqld_safe时传递两个参数： –skip-grant-tables –skip-networking 通过更新授权tb_name方式(insert into mysql.user set password=password() where user='root')直接修改其密码，而后移除此两个选项重启服务器。 建表规范 – Normal Format, NF - 每个表保存一个实体信息 - 每个具有一个ID字段作为主键 - ID主键 + 原子表 – 1NF, 第一范式 字段不能再分，就满足第一范式。 – 2NF, 第二范式 满足第一范式的前提下，不能出现部分依赖。 消除符合主键就可以避免部分依赖。增加单列关键字。 – 3NF, 第三范式 满足第二范式的前提下，不能出现传递依赖。 某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。 将一个实体信息的数据放在一个表内实现。 表维护 1234567# 分析和存储表的关键字分布ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...# 检查一个或多个表是否有错误CHECK TABLE tbl_name [, tbl_name] ... [option] ...option = &#123;QUICK | FAST | MEDIUM | EXTENDED | CHANGED&#125;# 整理数据文件的碎片OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... 视图 视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。 视图具有表结构文件，但不存在数据文件。 对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。 视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。 123456789101112131415161718192021222324-- 创建视图CREATE [OR REPLACE] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;] VIEW view_name [(column_list)] AS select_statement - 视图名必须唯一，同时不能与表重名。 - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。 - 可以指定视图执行的算法，通过ALGORITHM指定。 - column_list如果存在，则数目必须等于SELECT语句检索的列数-- 查看结构 SHOW CREATE VIEW view_name-- 删除视图 - 删除视图后，数据依然存在。 - 可同时删除多个视图。 DROP VIEW [IF EXISTS] view_name ...-- 修改视图结构 - 一般不修改视图，因为不是所有的更新视图都会映射到表上。 ALTER VIEW view_name [(column_list)] AS select_statement-- 视图作用 1. 简化业务逻辑 2. 对客户端隐藏真实的表结构-- 视图算法(ALGORITHM) MERGE 合并 将视图的查询语句，与外部查询需要先合并再执行！ TEMPTABLE 临时表 将视图执行完毕后，形成临时表，再做外层查询！ UNDEFINED 未定义(默认)，指的是MySQL自主去选择相应的算法。 事务 事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。 - 支持连续SQL的集体成功或集体撤销。 - 事务是数据库在数据晚自习方面的一个功能。 - 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。 - InnoDB被称为事务安全型引擎。 – 事务开启 START TRANSACTION; 或者 BEGIN; 开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。 – 事务提交 COMMIT; – 事务回滚 ROLLBACK; 如果部分操作发生问题，映射到事务开启前。 – 事务的特性 1. 原子性（Atomicity） 事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 2. 一致性（Consistency） 事务前后数据的完整性必须保持一致。 - 事务开始和结束时，外部数据一致 - 在整个事务过程中，操作是连续的 3. 隔离性（Isolation） 多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。 4. 持久性（Durability） 一个事务一旦被提交，它对数据库中的数据改变就是永久性的。 – 事务的实现 1. 要求是事务支持的表类型 2. 执行一组相关的操作前开启事务 3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。 – 事务的原理 利用InnoDB的自动提交(autocommit)特性完成。 普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。 而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。 – 注意 1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。 2. 事务不能被嵌套 – 保存点 SAVEPOINT 保存点名称 – 设置一个事务保存点 ROLLBACK TO SAVEPOINT 保存点名称 – 回滚到保存点 RELEASE SAVEPOINT 保存点名称 – 删除保存点 – InnoDB自动提交特性设置 SET autocommit = 0|1; 0表示关闭自动提交，1表示开启自动提交。 - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。 - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是， SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接) 而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务) 备份 MySQL的备份和还原 备份：副本 RAID1，RAID10：保证硬件损坏而不会业务中止； DROP TABLE mydb.tb1; 备份类型： 热备份、温备份和冷备份 热备份：读、写不受影响； 温备份：仅可以执行读操作； 冷备份：离线备份；读、写操作均中止； 物理备份和逻辑备份 物理备份：复制数据文件； 逻辑备份：将数据导出至文本文件中； 完全备份、增量备份和差异备份； 完全备份：备份全部数据； 增量备份：仅备份上次完全备份或增量备份以后变化的数据； 差异备份：仅备份上次完全备份以来变化的数据； 在线：物理完全备份 1234567891011121314151617181920212223242526272829303132333435363738394041424344备份，将数据的结构与表内数据保存起来。利用 mysqldump 指令完成。# 导出mysqldump [options] db_name [tables]mysqldump [options] ---database DB1 [DB2 DB3...]mysqldump [options] --all--database1. 导出一张表 mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)2. 导出多张表 mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)3. 导出所有表 mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)4. 导出一个库 mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)可以-w携带WHERE条件-- 导入1. 在登录mysql的情况下： source 备份文件2. 在不登录的情况下 mysql -u用户名 -p密码 库名 &lt; 备份文件select * into outfile 文件地址 [控制格式] from 表名; -- 导出表数据load data [local] infile 文件地址 [replace|ignore] into table 表名 [控制格式]; -- 导入数据 生成的数据默认的分隔符是制表符 local未指定，则数据文件必须在服务器上 replace 和 ignore 关键词控制对现有的唯一键记录的重复的处理-- 控制格式fields 控制字段格式默认：fields terminated by &#x27;\\t&#x27; enclosed by &#x27;&#x27; escaped by &#x27;\\\\&#x27; terminated by &#x27;string&#x27; -- 终止 enclosed by &#x27;char&#x27; -- 包裹 escaped by &#x27;char&#x27; -- 转义 -- 示例： SELECT a,b,a+b INTO OUTFILE &#x27;/tmp/result.text&#x27; FIELDS TERMINATED BY &#x27;,&#x27; OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27; LINES TERMINATED BY &#x27;\\n&#x27; FROM test_table;lines 控制行格式默认：lines terminated by &#x27;\\n&#x27; terminated by &#x27;string&#x27; -- 终止 SQL编程 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182--// 局部变量 ------------ 变量声明 declare var_name[,...] type [default value] 这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。-- 赋值 使用 set 和 select into 语句为变量赋值。 - 注意：在函数内是可以使用全局变量（用户自定义的变量）--// 全局变量 ------------ 定义、赋值set 语句可以定义并为变量赋值。set @var = value;也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。select @var:=20;select @v1:=id, @v2=name from t1 limit 1;select * from tbl_name where @var:=30;select into 可以将表中查询获得的数据赋给变量。 -| select max(height) into @max_height from tb;-- 自定义变量名为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。@var=10; - 变量被定义后，在整个会话周期都有效（登录到退出）--// 控制结构 ------------ if语句if search_condition then statement_list [elseif search_condition then statement_list]...[else statement_list]end if;-- case语句CASE value WHEN [compare-value] THEN result[WHEN [compare-value] THEN result ...][ELSE result]END-- while循环[begin_label:] while search_condition do statement_listend while [end_label];- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。 -- 退出循环 退出整个循环 leave 退出当前循环 iterate 通过退出的标签决定退出哪个循环--// 内置函数 ------------ 数值函数abs(x) -- 绝对值 abs(-10.9) = 10format(x, d) -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46ceil(x) -- 向上取整 ceil(10.1) = 11floor(x) -- 向下取整 floor (10.1) = 10round(x) -- 四舍五入去整mod(m, n) -- m%n m mod n 求余 10%3=1pi() -- 获得圆周率pow(m, n) -- m^nsqrt(x) -- 算术平方根rand() -- 随机数truncate(x, d) -- 截取d位小数-- 时间日期函数now(), current_timestamp(); -- 当前日期时间current_date(); -- 当前日期current_time(); -- 当前时间date(&#x27;yyyy-mm-dd hh:ii:ss&#x27;); -- 获取日期部分time(&#x27;yyyy-mm-dd hh:ii:ss&#x27;); -- 获取时间部分date_format(&#x27;yyyy-mm-dd hh:ii:ss&#x27;, &#x27;%d %y %a %d %m %b %j&#x27;); -- 格式化时间unix_timestamp(); -- 获得unix时间戳from_unixtime(); -- 从时间戳获得时间-- 字符串函数length(string) -- string长度，字节char_length(string) -- string的字符个数substring(str, position [,length]) -- 从str的position开始,取length个字符replace(str ,search_str ,replace_str) -- 在str中用replace_str替换search_strinstr(string ,substring) -- 返回substring首次在string中出现的位置concat(string [,...]) -- 连接字串charset(str) -- 返回字串字符集lcase(string) -- 转换成小写left(string, length) -- 从string2中的左边起取length个字符load_file(file_name) -- 从文件读取内容locate(substring, string [,start_position]) -- 同instr,但可指定开始位置lpad(string, length, pad) -- 重复用pad加在string开头,直到字串长度为lengthltrim(string) -- 去除前端空格repeat(string, count) -- 重复count次rpad(string, length, pad) --在str后用pad补充,直到长度为lengthrtrim(string) -- 去除后端空格strcmp(string1 ,string2) -- 逐字符比较两字串大小-- 流程函数case when [condition] then result [when [condition] then result ...] [else result] end 多分支if(expr1,expr2,expr3) 双分支。-- 聚合函数count()sum();max();min();avg();group_concat()-- 其他常用函数md5();default();-- 字符连接函数concat(str1,str2,...])concat_ws(separator,str1,str2,...)-- 分支语句if 条件 then 执行语句elseif 条件 then 执行语句else 执行语句end if;-- 修改最外层语句结束符delimiter 自定义结束符号 SQL语句自定义结束符号delimiter ; -- 修改回原来的分号-- 语句块包裹begin 语句块end--// 存储函数，自定义函数 ------------ 新建 CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型 函数体 - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。 - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。 - 参数部分，由&quot;参数名&quot;和&quot;参数类型&quot;组成。多个参数用逗号隔开。 - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。 - 多条语句应该使用 begin...end 语句块包含。 - 一定要有 return 返回值语句。-- 删除 DROP FUNCTION [IF EXISTS] function_name;-- 查看 SHOW FUNCTION STATUS LIKE &#x27;partten&#x27; SHOW CREATE FUNCTION function_name;-- 修改 ALTER FUNCTION function_name 函数选项--// 存储过程，自定义功能 ------------ 定义存储存储过程 是一段代码（过程），存储在数据库中的sql组成。一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。-- 创建CREATE PROCEDURE sp_name (参数列表) 过程体参数列表：不同于函数的参数列表，需要指明参数类型IN，表示输入型OUT，表示输出型INOUT，表示混合型注意，没有返回值。/* 存储过程 */ ------------------存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。调用：CALL 过程名-- 注意- 没有返回值。- 只能单独调用，不可夹杂在其他语句中-- 参数IN|OUT|INOUT 参数名 数据类型IN 输入：在调用过程中，将数据输入到过程体内部的参数OUT 输出：在调用过程中，将过程体处理完的结果返回到客户端INOUT 输入输出：既可输入，也可输出-- 语法CREATE PROCEDURE 过程名 (参数列表)BEGIN 过程体END","categories":[{"name":"Knowledge","slug":"Knowledge","permalink":"http://jsunnyr.github.io/categories/Knowledge/"}],"tags":[{"name":"Knowledge","slug":"Knowledge","permalink":"http://jsunnyr.github.io/tags/Knowledge/"},{"name":"MySQL","slug":"MySQL","permalink":"http://jsunnyr.github.io/tags/MySQL/"}],"author":"susu"},{"title":"OS_basic_01","slug":"os/rpm/os-basic-01","date":"2020-01-06T09:43:50.000Z","updated":"2021-12-05T12:32:55.877Z","comments":true,"path":"2020/01/06/os/rpm/os-basic-01/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/os/rpm/os-basic-01/","excerpt":"","text":"操作系统的五大管理功能 - 作业管理：包括任务、界面管理、人机交互、图形界面、语音控制和虚拟现实等 - 文件管理：又称为信息管理 - 存储管理：实质是对存储“空间”的管理，主要指对主存的管理 - 设备管理：实质是对硬件设备的管理，其中包括对输入输出设备的分配、启动、完成和回收 - 进程管理：实质上是对处理机执行“时间”的管理，即如何将CPU真正合理地分配给每个任务","categories":[{"name":"OS","slug":"OS","permalink":"http://jsunnyr.github.io/categories/OS/"}],"tags":[{"name":"OS","slug":"OS","permalink":"http://jsunnyr.github.io/tags/OS/"}],"author":"susu"},{"title":"Network_concept","slug":"network-concept","date":"2020-01-06T09:42:22.000Z","updated":"2021-12-05T12:32:55.856Z","comments":true,"path":"2020/01/06/network-concept/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/network-concept/","excerpt":"","text":"Network conceptWhat is Computer network? What is LAN? What is MAN? What is WAN? How the internet works? What is Webserver? What is Server? What is client and bost? What is NIC? What is protocol？ Bus topology Ring topology Star topology Mesh topology OSI model What is Modem? What is Router? What is Switch? What is Repeater? How binary code works? What is Network ID? Subnetting CIR notation What is TCP? What is UDP? WHat is HTTP? What is FTP/TFTP/SMTP/POP/ICMP? Cisco hardware components Cisco software Router categories Routers portrs Router functions How it decides best route? Static routing Dynamic routing VLAN configuration tatic NAT configuration Dynamic NAT configuration NAT overload configuration(PAT) DHCP methods DHCP scope DHCP leased period DHCP configuration parameters DHCP configuration RIP configuration OSPF configuration EIGRP configuration Understanding ipv6","categories":[{"name":"Network","slug":"Network","permalink":"http://jsunnyr.github.io/categories/Network/"}],"tags":[{"name":"Network","slug":"Network","permalink":"http://jsunnyr.github.io/tags/Network/"}],"author":"susu"},{"title":"MySQL配置文件详细解析","slug":"db/mysql/mysql-configuration-example","date":"2020-01-06T09:22:06.000Z","updated":"2021-12-05T12:32:55.846Z","comments":true,"path":"2020/01/06/db/mysql/mysql-configuration-example/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/db/mysql/mysql-configuration-example/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193[client]#socket方式运行时的sock文件位置socket=/自定义/mysql.sock[mysqld_safe]#错误日志位置log-error=/自定义/mysqld.log#进程id文件pid-file=/自定义/mysqld.pid[mysql]#以socket方式运行的sock文件位置socket=/自定义/mysql.sock[mysqld]#以什么用户运行user = root#端口port = 3306#数据存储目录datadir = /自定义#时区配置,例如东八区default-time-zone = &#x27;+8:00&#x27;#是否支持符号链接，即数据库或表可以存储在my.cnf中指定datadir之外的分区或目录，为0不开启symbolic-links=0#mysql唯一标识,主从必用且唯一server-id = 自定义,我一般使用ip地址最后的一段#mysql监听的ip地址，如果是127.0.0.1，表示仅本机访问bind_address = 192.168.0.60#数据修改是否自动提交，为0不自动提交autocommit = 1#服务器使用的字符集character_set_server=utf8mb4#禁用DNS主机名查找，用内网地址查找skip_name_resolve = 1#mysql最大连接数max_connections = 800#错误链接次数,默认10,超过以后被屏蔽,可以防止dos攻击max_connect_errors = 1000#事务隔离级别默认为可重复读,Oracle是读已提交#1. READ-UNCOMMITTED(读未提交)#2. READ-COMMITTED(读已提交)#3. REPEATABLE-READ(可重复读)#4. SERIERLIZED(可串行化)transaction_isolation = READ-COMMITTED#不为1的话TIMESTAMP类型和其他的类型不一样,没仔细研究explicit_defaults_for_timestamp = 1#FULL JOIN 就是explain中ALL,index,rang或者Index_merge的时候使用的bufferjoin_buffer_size = 128M#规定了内部内存临时表的最大值，每个线程都要分配。实际起限制作用的是tmp_table_size和max_heap_table_size的最小值#如果内存临时表超出了限制，MySQL就会自动地把它转化为基于磁盘的MyISAM表，存储在指定的tmpdir目录下tmp_table_size = 128M#保存临时文件的目录tmpdir = /自定义#mysql最大接受的数据包大小,sql长度很大可以调大点,比如批量插入的valuesmax_allowed_packet = 16M#sql_mode 模式，定义了sql语法，对数据的校验等等，限制一些不合法的操作sql_mode = &quot;STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER&quot;#服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端interactive_timeout = 60#服务器关闭非交互连接之前等待活动的秒数，在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)wait_timeout = 60#读入缓冲区的大小，将对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区read_buffer_size = 16M#随机读缓冲区大小，当按任意顺序读取行时（列如按照排序顺序）将分配一个随机读取缓冲区，进行排序查询时，MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度read_rnd_buffer_size = 32M#是一个connection级参数，在每个connection第一次需要使用这个buffer的时候，一次性分配设置的内存sort_buffer_size = 32M## log-related#错误日志位置log_error = 自定义#是否开启慢查询日志收集slow_query_log = 1#慢查询日志位置slow_query_log_file = 自定义#是否记录未使用索引的语句log_queries_not_using_indexes = 1#慢查询也记录那些慢的optimize table，analyze table和alter table语句log_slow_admin_statements = 1#记录由Slave所产生的慢查询log_slow_slave_statements = 1#设定每分钟记录到日志的未使用索引的语句数目，超过这个数目后只记录语句数量和花费的总时间log_throttle_queries_not_using_indexes = 10#日志自动过期清理天数expire_logs_days = 90#设置记录慢查询超时时间long_query_time = 1#查询检查返回少于该参数指定行的SQL不被记录到慢查询日志min_examined_row_limit = 100## sync-related#slave保存master节点信息方式，设成file时 会生成master.info 和 relay-log.info2个文件，设成table，信息就会存在mysql.master_slave_info表中。不管是设置的哪种值，都不要移动或者编辑相关的文件和表master_info_repository = TABLE#用于保存slave读取relay log的位置信息，可选值为“FILE”、“TABLE”，以便crash重启后继续恢复relay_log_info_repository = TABLE#binlog的保存位置，只能指定前缀名,如mysql-bin,不要写mysql-bin.log,因为后缀mysql会自动添加log_bin = /自定义/mysql-bin#这个参数是对于MySQL系统来说是至关重要的，他不仅影响到Binlog对MySQL所带来的性能损耗，而且还影响到MySQL中数据的完整性。对于“sync_binlog”参数的各种设置的说明如下：#sync_binlog=0，当事务提交之后，MySQL不做fsync之类的磁盘同步指令刷新binlog_cache中的信息到磁盘，而让Filesystem自行决定什么时候来做同步，或者cache满了之后才同步到磁盘。#sync_binlog=n，当每进行n次事务提交之后，MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘。#在MySQL中系统默认的设置是sync_binlog=0，也就是不做任何强制性的磁盘刷新指令，这时候的性能是最好的，但是风险也是最大的。#因为一旦系统Crash，在binlog_cache中的所有binlog信息都会被丢失。而当设置为“1”的时候，是最安全但是性能损耗最大的设置。因为当设置为1的时候，即使系统Crash，也最多丢失binlog_cache中未完成的一个事务，对实际数据没有任何实质性影响。从以往经验和相关测试来看，对于高并发事务的系统来说，“sync_binlog”设置为0和设置为1的系统写入性能差距可能高达5倍甚至更多。sync_binlog = 4#启用gtid类型，否则就是普通的复制架构gtid_mode = on#强制GTID的一致性enforce_gtid_consistency = 1#slave更新是否记入日志，在做双主架构时异常重要，影响到双主架构是否能互相同步log_slave_updates#binlog日志格式，可选值“MIXED”、“ROW”、“STATEMENT”，在5.6版本之前默认为“STATEMENT”，5.6之后默认为“MIXED”；因为“STATEMENT”方式在处理一些“不确定”性的方法时会造成数据不一致问题，我们建议使用“MIXED”或者“ROW”binlog_format = row#slave保存同步中继日志的位置relay_log = /data/local/mysql-5.7.19/log/mysql-relay.log#当slave从库宕机后，假如relay-log损坏了，导致一部分中继日志没有处理，则自动放弃所有未执行的relay-log，并且重新从master上获取日志，这样就保证了relay-log的完整性relay_log_recovery = 1#这个参数控制了当mysql启动或重启时，mysql在搜寻GTIDs时是如何迭代使用binlog文件的。 这个选项设置为真，会提升mysql执行恢复的性能。因为这样mysql-server启动和binlog日志清理更快binlog_gtid_simple_recovery = 1#跳过指定error no类型的错误，设成all 跳过所有错误slave_skip_errors = ddl_exist_errors## innodb-related#innodb每个数据页大小，这个参数在一开始初始化时就要加入my.cnf里，如果已经创建了表，再修改，启动MySQL会报错innodb_page_size = 16K#缓存innodb表的索引，数据，插入数据时的缓冲，专用mysql服务器设置的大小： 操作系统内存的70%-80%最佳innodb_buffer_pool_size = 4G#可以开启多个内存缓冲池，把需要缓冲的数据hash到不同的缓冲池中，这样可以并行的内存读写innodb_buffer_pool_instances = 8#默认为关闭OFF。如果开启该参数，启动MySQL服务时，MySQL将本地热数据加载到InnoDB缓冲池中innodb_buffer_pool_load_at_startup = 1#默认为关闭OFF。如果开启该参数，停止MySQL服务时，InnoDB将InnoDB缓冲池中的热数据保存到本地硬盘innodb_buffer_pool_dump_at_shutdown = 1#根据 官方文档 描述，它会影响page cleaner线程每次刷脏页的数量， 这是一个每1秒 loop一次的线程innodb_lru_scan_depth = 2000#事务等待获取资源等待的最长时间，超过这个时间还未分配到资源则会返回应用失败；参数的时间单位是秒innodb_lock_wait_timeout = 5#这两个设置会影响InnoDB每秒在后台执行多少操作. 大多数写IO(除了写InnoDB日志)是后台操作的. 如果你深度了解硬件性能(如每秒可以执行多少次IO操作),则使用这些功能是很可取的,而不是让它闲着innodb_io_capacity = 4000innodb_io_capacity_max = 8000#默认值为 fdatasync. 如果使用 硬件RAID磁盘控制器, 可能需要设置为 O_DIRECT. 这在读取InnoDB缓冲池时可防止“双缓冲(double buffering)”效应,否则会在文件系统缓存与InnoDB缓存间形成2个副本(copy). 如果不使用硬件RAID控制器,或者使用SAN存储时, O_DIRECT 可能会导致性能下降innodb_flush_method = O_DIRECT#innodb重做日志保存目录innodb_log_group_home_dir = 自定义#innodb回滚日志保存目录innodb_undo_directory = 自定义#undo回滚段的数量， 至少大于等于35，默认128innodb_undo_logs = 128#用于设定创建的undo表空间的个数，在mysql_install_db时初始化后，就再也不能被改动了；默认值为0，表示不独立设置undo的tablespace，默认记录到ibdata中；否则，则在undo目录下创建这么多个undo文件，例如假定设置该值为4，那么就会创建命名为undo001~undo004的undo tablespace文件，每个文件的默认大小为10M。修改该值会导致Innodb无法完成初始化，数据库无法启动，但是另两个参数可以修改innodb_undo_tablespaces = 0#InnoDB存储引擎在刷新一个脏页时，会检测该页所在区(extent)的所有页，如果是脏页，那么一起刷新。这样做的好处是通过AIO可以将多个IO写操作合并为一个IO操作。对于传统机械硬盘建议使用，而对于固态硬盘可以关闭。innodb_flush_neighbors = 1#这个值定义了日志文件的大小，innodb日志文件的作用是用来保存redo日志。一个事务对于数据或索引的修改往往对应到表空间中的随机的位置，因此当刷新这些修改到磁盘中就会引起随机的I/O，而随机的I/O往往比顺序的I/O更加昂贵的开销，因为随机的I/O需要更多的开销来定位到指定的位置。innodb使用日志来将随机的I/O转为顺序的I/O，只要日志文件是安全的，那么事务就是永久的，尽管这些改变还没有写到数据文件中，如果出现了当机或服务器断电的情况，那么innodb也可以通过日志文件来恢复以及提交的事务。但是日志文件是有一定的大小的，所以必须要把日志文件记录的改变写到数据文件中，innodb对于日志文件的操作是循环的，即当日志文件写满后，会将指针重新移动到文件开始的地方重新写，但是它不会覆盖那些还没有写到数据文件中的日志，因为这是唯一记录了事务持久化的记录#如果对 Innodb 数据表有大量的写入操作，那么选择合适的 innodb_log_file_size 值对提升MySQL性能很重要。然而设置太大了，就会增加恢复的时间，因此在MySQL崩溃或者突然断电等情况会令MySQL服务器花很长时间来恢复innodb_log_file_size = 4G#事务在内存中的缓冲。 分配原 则：控制在2-8M.这个值不用太多的。他里面的内存一般一秒钟写到磁盘一次innodb_log_buffer_size = 16M#控制是否使用，使用几个独立purge线程（清除二进制日志）innodb_purge_threads = 4#mysql在5.6之前一直都是单列索引限制767，起因是256×3-1。这个3是字符最大占用空间（utf8）。但是在5.6以后，开始支持4个字节的uutf8。255×4&gt;767, 于是增加了这个参数。这个参数默认值是OFF。当改为ON时，允许列索引最大达到3072innodb_large_prefix = 1#InnoDB kernel并发最大的线程数。 1) 最少设置为(num_disks+num_cpus)*2。 2) 可以通过设置成1000来禁止这个限制innodb_thread_concurrency = 64#是否将死锁相关信息保存到MySQL 错误日志中innodb_print_all_deadlocks = 1#开启InnoDB严格检查模式，尤其采用了页数据压缩功能后，最好是开启该功能。开启此功能后，当创建表（CREATE TABLE）、更改表（ALTER TABLE）和创建索引（CREATE INDEX）语句时，如果写法有错误，不会有警告信息，而是直接抛出错误，这样就可直接将问题扼杀在摇篮里innodb_strict_mode = 1#ORDER BY 或者GROUP BY 操作的buffer缓存大小innodb_sort_buffer_size = 64M## plugin-related#指定mysql的插件目录plugin_dir=/data/local/mysql-5.7.19/lib/plugin#指定载入哪些插件plugin_load = &quot;rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so&quot;#控制主库上是否开启semisyncloose_rpl_semi_sync_master_enabled = 1#控制备库是否开启semisyncloose_rpl_semi_sync_slave_enabled = 1#单位毫秒，防止半同步复制在没有收到确认的情况下，发送堵塞。master在超时之前没有收到确认，将恢复到异步复制，继续执行半同步没有进行的操作loose_rpl_semi_sync_master_timeout = 5000## mysql57-specific#表示转储每个bp instance LRU上最热的page的百分比。通过设置该参数可以减少转储的page数innodb_buffer_pool_dump_pct = 40#为了提升扩展性和刷脏效率，在5.7.4版本里引入了多个page cleaner线程。从而达到并行刷脏的效果#在该版本中，Page cleaner并未和buffer pool绑定，其模型为一个协调线程 + 多个工作线程，协调线程本身也是工作线程。因此如果innodb_page_cleaners设置为8，那么就是一个协调线程，加7个工作线程innodb_page_cleaners = 4#是否开启在线回收（收缩）undo log日志文件，支持动态设置innodb_undo_log_truncate = 1#当超过这个阀值（默认是1G），会触发truncate回收（收缩）动作，truncate后空间缩小到10Minnodb_max_undo_log_size = 2G#控制回收（收缩）undo log的频率。undo log空间在它的回滚段没有得到释放之前不会收缩， 想要增加释放回滚区间的频率，就得降低设定值innodb_purge_rseg_truncate_frequency = 128#这个参数控制了当mysql启动或重启时，mysql在搜寻GTIDs时是如何迭代使用binlog文件的。 这个选项设置为真，会提升mysql执行恢复的性能。因为这样mysql-server启动和binlog日志清理更快。该参数为真时，mysql-server只需打开最老的和最新的这2个binlog文件binlog_gtid_simple_recovery=1#在MySQL 5.7.2 新增了 log_timestamps 这个参数，该参数主要是控制 error log、genera log，等等记录日志的显示时间参数。 在 5.7.2 之后改参数为默认 UTC 这样会导致日志中记录的时间比中国这边的慢，导致查看日志不方便。修改为 SYSTEM 就能解决问题log_timestamps=system#这个神奇的参数5.7.6版本引入，用于定义一个记录事务的算法，这个算法使用hash标识来记录事务。如果使用MGR，那么这个hash值需要用于分布式冲突检测何处理，在64位的系统，官网建议设置该参数使用 XXHASH64 算法。如果线上并没有使用该功能，应该设为offtransaction_write_set_extraction=MURMUR32#从mysql5.7.6开始information_schema.global_status已经开始被舍弃，为了兼容性，此时需要打开 show_compatibility_56show_compatibility_56=on","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://jsunnyr.github.io/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://jsunnyr.github.io/tags/MySQL/"}],"author":"susu"},{"title":"虚拟化基础理论","slug":"openstack-basic","date":"2020-01-06T09:19:09.000Z","updated":"2021-12-05T12:32:55.868Z","comments":true,"path":"2020/01/06/openstack-basic/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/openstack-basic/","excerpt":"","text":"关于Xen Xen XenServer(开源，但是有Citrix的商业支持) XCP(Xen Cloud Platform,开源版本，等同于XenServer) XenApI(管理XenServer和XCP的API程序) XAPI(XenServer和XCP的主守护进程，与XenAPI直接通信) libvirt-based Xen(Libvirt驱动的Xen虚拟化技术) Xen属于类型一的虚拟化技术，并存在特殊域domain0，其他域成为DomainU(Unprivileged Domain)。Xen的Domain0是一个特殊的虚拟机，并要求一个支持Xen虚拟化管理程序的内核。半虚拟化的虚拟机(DomainU)要求一个支持半虚拟化的内核。 关于QEMUQEMU即是虚拟化技术，也表示它本身是一个虚拟化软件，可虚拟处硬件。QEMU单独运行时，可同时模拟CPU和硬件，性能极差。在KVM架构中，KVM管理CPU和内存的访问调用，QEMU作为虚拟软件用来仿真硬件资源(如硬盘，网卡，声卡)。 关于 LibvirtLibvirt是一个函数库。主要包括 Libvirt API实现Linux虚拟化功能 Libvirtd进程 Virsh工具集 虚拟化技术 虚拟化技术 全虚拟化FV(需要硬件辅助HVM，因需仿真硬件，性能有损耗) 半虚拟化PV(因无需仿真硬件，性能比FV好) 在某些情况下，可以使用半虚拟化驱动加速全虚拟化虚拟机的IO性能。 虚拟化类型(虚拟化管理程序VMM与硬件的位置划分) 类型一 裸金属虚拟化(Baremetal Hypervisor) Oracle VM Server for SPARC Oracle VM Server for x86 Citrix XenServer Microsoft Hyper-V VMware ESX/ESXi 特殊的类型一虚拟化技术(该种虚拟化技术能将操作系统转化成类型一的虚拟化管理程序) KVM(Linux Kernel-Based Virtual Machine)基于x86硬件虚拟化扩展(Intel VT/AMD-V)的全虚拟化 kvm.ko kvm-intel.ko、kvm-amd.ko BHyVe(FreeBSD) 类型二 可托管的虚拟化(Hosted Hypervisor) VMware Workstation VMware Player Virtualbox QEMU","categories":[{"name":"OpenStack","slug":"OpenStack","permalink":"http://jsunnyr.github.io/categories/OpenStack/"}],"tags":[{"name":"OpenStack","slug":"OpenStack","permalink":"http://jsunnyr.github.io/tags/OpenStack/"}],"author":"susu"},{"title":"MySQL-routine","slug":"db/mysql/mysql-outline","date":"2020-01-06T09:14:58.000Z","updated":"2021-12-05T12:32:55.851Z","comments":true,"path":"2020/01/06/db/mysql/mysql-outline/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/db/mysql/mysql-outline/","excerpt":"","text":"MySQL Foundamental 数据库发展史 数据库原理 数据库范式 数据库设计规范 SQL DDL DML DCL DQL 视图、索引、触发器、事务、存储过程、函数 库操作 库创建、属性更改、字符集 表与数据操作 表创建、属性更改、插入、更新、选择、清空、复制、删除 数据可操作 数据插入、更新、删除 SQL规范 MySQL abc MySQL数据库简介 MySQL版本意义 MySQL安装、连接、启动原理 Linux/Winodws安装,连接 jdbc,pymysql连接 MySQL登录 MySQL客户端与服务端理解 MySQL体系架构 MySQL操作与管理 MySQL状态检查与监控 MySQL日志检查 beginning 操作系统的CPU调度 内存分配 操作系统的IO调度 监控及瓶颈分析 存储引擎 事务 隔离级 intermediate 索引原理与慢查询优化 数据备份与慢查询优化 复制原理 压力测试 higer MySQL高可用原理及实现,自定义实现高可用架构 MySQL集群 MGR PXC MS MM MMM MHA advanced MySQL架构 读写分离原理及实现 分库分表原理及实现 mycat 数据库基础 编码 数据库编程 变量 系统变量 自定义变量 局部变量 流程控制 if while 函数 内置函数 字符串函数 时间函数 数学函数 加密函数 索引 哈希索引 自适应哈希索引 innodb_adaptive_hash_index=ON 唯一索引 组合索引 覆盖索引 元数据库 information_schema performance_schema sys 分区 + + 交换分区 用户管理 数据库原理 编码 字符编码 字符集 字符编码层级 客户端 连接层 服务端 主键 复合主键 主键约束 主键分类 业务主键 逻辑主键(自动增长) 唯一主键 复合唯一主键 ER图 基础技能 数据库部署 各版本单机安装 主备、主从、主从级联、 高可用、集群、双主、三主 字段类型 列属性 表关系 库、表、字段、视图、索引、触发器、执行计划 增删改查 新建库/库选项/复制库/查询(匹配)库//修改库/更新库/备份库/清空库/删除库/连接库/ 新建表/表选项/复制表/查询(匹配)表/修改表/更新表/备份表/清空表/删除表/ 数据库连接 connector API 变量 通用模块 MySQL配置文件参数 查询内部执行过程 查询缓存 表空间 扩容 收缩 前置索引 回表查询 内存表、临时表 数据类型间的区别 删除表的几种方式和性能对比 枚举 视图 删除数据恢复和原理分析 数据库引擎 Innodb MyISAM 数据结构 索引 模糊查询与索引 索引种类 普通索引 唯一索引 全局索引 聚集索引 非聚集索引 前缀索引 最左匹配原则 存储算法 优化器如何选择索引 不适用索引的原因列举 锁 存储引擎关于锁的支持问题 锁种 共享锁(Shared Lock，S锁) 排他锁(Exclusive Lock，X锁) 读锁 写锁 乐观锁 悲观锁 全局锁 表锁 行锁 死锁及案例分析 锁优化 事务 事务特性ACID 脏读 幻读 不可重复读 事务隔离集 MVCC 并发事务 事务实现原理 日志 六大日志 redo log(重做日志) undo log(回滚日志) general log err log slow query log binlog(归档日志) relay log 命令和内置函数 服务器操作 服务器运行状态 执行统计 用户授权 库表设置 删除的N种方式 高性能 慢查询排查 读写分离 主备无延迟 多实例配置 分区 性能分析 备份和恢复 mysqldump 开放性问题 超级表优化 故障排查 主从延迟分析 高性能服务器设计 安全 MySQL安全初始化","categories":[{"name":"Outline","slug":"Outline","permalink":"http://jsunnyr.github.io/categories/Outline/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://jsunnyr.github.io/tags/MySQL/"},{"name":"Outline","slug":"Outline","permalink":"http://jsunnyr.github.io/tags/Outline/"}],"author":"susu"},{"title":"MySQL_password_policy","slug":"db/mysql/mysql-password-policy","date":"2020-01-06T09:12:29.000Z","updated":"2021-12-05T12:32:55.852Z","comments":true,"path":"2020/01/06/db/mysql/mysql-password-policy/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/db/mysql/mysql-password-policy/","excerpt":"","text":"环境 MySQL Version: 5.7 1234567891011121314151617181920212223242526272829303132333435363738394041424344mysql&gt; show variables like &#x27;%plugin%&#x27;;+-------------------------------+--------------------------+| Variable_name | Value |+-------------------------------+--------------------------+| default_authentication_plugin | mysql_native_password || plugin_dir | /usr/lib64/mysql/plugin/ |+-------------------------------+--------------------------+2 rows in set (0.02 sec)mysql&gt; select * from mysql.plugin;+-------------------+----------------------+| name | dl |+-------------------+----------------------+| validate_password | validate_password.so |+-------------------+----------------------+1 row in set (0.00 sec)mysql&gt; uninstall PLUGIN validate_password;Query OK, 0 rows affected (0.01 sec)mysql&gt; select * from mysql.plugin;Empty set (0.00 sec)mysql&gt; show variables like &#x27;%validate_password%&#x27;;Empty set (0.00 sec)mysql&gt; install PLUGIN validate_password SONAME &#x27;validate_password.so&#x27;;Query OK, 0 rows affected (0.00 sec)mysql&gt; show variables like &#x27;%validate_password%&#x27;;+--------------------------------------+--------+| Variable_name | Value |+--------------------------------------+--------+| validate_password_check_user_name | OFF || validate_password_dictionary_file | || validate_password_length | 8 || validate_password_mixed_case_count | 1 || validate_password_number_count | 1 || validate_password_policy | MEDIUM || validate_password_special_char_count | 1 |+--------------------------------------+--------+7 rows in set (0.01 sec)mysql&gt; 查看密码策略 12345678910show variables like &#x27;%validate_password_policy%&#x27;;show variables like &#x27;%validate_password_length%&#x27;;[mysql version:8.X]#查看密码策略show variables like &#x27;%validate_password.policy%&#x27;;show variables like &#x27;%validate_password.length%&#x27;;#修改密码策略set global validate_password.policy=0;set global validate_password.length=1; 修改密码策略 12set global validate_password_policy=0;set global validate_password_length=1; 12345ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;123456789&#x27;;ERROR 1819 (HY000): Your password does not satisfy the current policy requirements.","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://jsunnyr.github.io/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://jsunnyr.github.io/tags/MySQL/"}],"author":"susu"},{"title":"Linux-exper","slug":"Linux-exper","date":"2020-01-06T08:50:35.000Z","updated":"2021-12-05T12:32:55.753Z","comments":true,"path":"2020/01/06/Linux-exper/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/Linux-exper/","excerpt":"","text":"OWASP TOP 10，学习下主流的扫描器、工具、和使用方法 一、了解系统原理，web功能系统了解 二、前端代码、后端程序设计入门 三、学会主流的安全技能原理&amp;利用 四、学会主流漏洞的利用 五、掌握漏洞挖掘思路，技巧 零基础新手的第一步应该是： Web前后端基础与服务器通信原理 的了解。 （所指前后端：H5、JS、PHP、SQL，服务器指：WinServer、Nginx、Apache等） 第二步：当下主流漏洞的原理与利用 此时才应该是SQL、XSS、CSRF等主流漏洞的原理与利用学习。 第三步：当下主流漏洞的挖掘与审计复现 学习前人所挖0day的思路，并且复现，尝试相同审计 第一步，搭环境。 一键化的phpstudy或lnmp不急着使用，先自己手动配，进行配置文件的关联时，你能很好的明白Web中各个零件、齿轮的供应链、运行机制、工作原理。 第二步，实战去学习。 到技能关卡，就要去实战了，当然不能直接胡乱黑，未经授权必违法！ 但也不推荐去做CTF，坦白来讲，当下的CTF少有适合新手学习的。 因为题目是基本不贴近实战的，逻辑结构并不合理，而且出题手十有八九是学生，并没有从教育出发的意义，只是比赛、竞技。 那咋办捏？不让实战又不推荐做CTF。 这个时候，要挑选适合的靶场去进行练习。当下官方的靶场虽然只有几个，民间团体的、开源的却遍地爬。寻找像SQLI-LAB这样的带“体系化”的靶场去进行练习、实战。 第二点五步，SRC。 这个时候再进行SRC的实战吧，挖真站，交漏洞。验证漏洞利用的能力。同时SRC和CNVD也是简历上不错的加分项。 第三步，从技术分享帖（漏洞挖掘类型）学习 观看学习近十年所有0DAY挖掘的帖，然后搭建环境，去复现漏洞，去思考学习笔者的挖洞思维。","categories":[{"name":"Security","slug":"Security","permalink":"http://jsunnyr.github.io/categories/Security/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"},{"name":"Experience","slug":"Experience","permalink":"http://jsunnyr.github.io/tags/Experience/"},{"name":"Security","slug":"Security","permalink":"http://jsunnyr.github.io/tags/Security/"}],"author":"NOT susu, By Briliant people"},{"title":"Multipath made of iscsi on VMware","slug":"iscsi_and_multipath_on_vmware","date":"2020-01-06T08:48:13.000Z","updated":"2021-12-05T12:32:55.776Z","comments":true,"path":"2020/01/06/iscsi_and_multipath_on_vmware/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/iscsi_and_multipath_on_vmware/","excerpt":"","text":"[TOC] How to create Multipath Link by iscsi on VMware workstation 提示为了能够理解此篇文章，请了解iscsi和multipath理论知识和基础操作 为了在VMware上进行Multipath的相关理论实践，没有机器，就只打算仅在一台虚拟机(同时兼做服务端和客户端)上采用iscsi建立共享磁盘，通过Multiple Sessions per Initiator建立两条链路。需要2条链路，于是需要2个IP，就随便临时配一个浮动IP。 注意：target是0.0.0.0:3260 ,discover的时候需要discover 2 个IP：iscsiadm -m discoverydb -t st -p 192.168.1.10 –discoveriscsiadm -m discoverydb -t st -p 192.168.1.11 –discover然后执行iscsiadm -m node -l 来一次性登入。或者分两次登录：iscsiadm –mode node –targetname iqn.2020-02.com.baidu:shareddisk –portal 192.168.1.10:3260 –loginiscsiadm –mode node –targetname iqn.2020-02.com.baidu:shareddisk –portal 192.168.1.11:3260 –login 1个iSCSI Initiator透过多个Session连入同1个iSCSI Target设备，以便利用多网卡或iSCSI HBA启用负载平衡与故障失效切换机制，也可称作Multiple Sessions per Initiator。 123456789101112131415161718192021222324[root@centos77 tmp]# uname -aLinux centos77 3.10.0-1062.el7.x86_64 #1 SMP Wed Aug 7 18:08:02 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux[root@centos77 ~]# ifconfig ens33:0 192.168.1.11 netmask 255.255.255.0[root@centos77 ~]# ifconfigens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.1.10 netmask 255.255.255.0 broadcast 192.168.1.255 ether 00:0c:29:19:60:fc txqueuelen 1000 (Ethernet) RX packets 30001 bytes 17144152 (16.3 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 8388 bytes 1237295 (1.1 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0ens33:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.1.11 netmask 255.255.255.0 broadcast 192.168.1.255 ether 00:0c:29:19:60:fc txqueuelen 1000 (Ethernet)lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10&lt;host&gt; loop txqueuelen 1000 (Local Loopback) RX packets 9741 bytes 11586392 (11.0 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 9741 bytes 11586392 (11.0 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 123456[root@centos77 tmp]# yum --disablerepo=epel install device-mapper-multipath[root@centos77 ~]# yum --disablerepo=epel install targetcli iscsi-initiator-utils[root@centos77 ~]# dd if=/dev/zero of=/tmp/image.iso bs=1M count=2048[root@centos77 tmp]# losetup -f[root@centos77 tmp]# losetup /dev/loop0 /tmp/image.iso[root@centos77 tmp]# lsblk 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168[root@centos77 tmp]# targetcli/&gt; backstores/block create dev=/dev/loop0 name=shareddisk/&gt; iscsi/ create iqn.2020-02.com.baidu:shareddisk/&gt; iscsi/iqn.2020-02.com.baidu:shareddisk/tpg1/acls create iqn.2020-02.com.baidu:client/&gt; /iscsi/iqn.2020-02.com.baidu:shareddisk/tpg1/luns create /backstores/block/shareddisk/&gt; saveconfig/&gt; exitGlobal pref auto_save_on_exit=trueConfiguration saved to /etc/target/saveconfig.json[root@centos77 ~]# targetclitargetcli shell version 2.1.fb49Copyright 2011-2013 by Datera, Inc and others.For help on commands, type &#x27;help&#x27;./&gt; lso- / ................................................................................................... [...] o- backstores ........................................................................................ [...] | o- block ............................................................................ [Storage Objects: 1] | | o- shared_disk .............................................. [/dev/loop0 (2.0GiB) write-thru activated] | | o- alua ............................................................................. [ALUA Groups: 1] | | o- default_tg_pt_gp ................................................. [ALUA state: Active/optimized] | o- fileio ........................................................................... [Storage Objects: 0] | o- pscsi ............................................................................ [Storage Objects: 0] | o- ramdisk .......................................................................... [Storage Objects: 0] o- iscsi ...................................................................................... [Targets: 1] | o- iqn.2020-02.com.baidu:shareddisk ............................................................ [TPGs: 1] | o- tpg1 ......................................................................... [no-gen-acls, no-auth] | o- acls .................................................................................... [ACLs: 1] | | o- iqn.2020-02.com.baidu:client ................................................... [Mapped LUNs: 1] | | o- mapped_lun0 ..................................................... [lun0 block/shared_disk (rw)] | o- luns .................................................................................... [LUNs: 1] | | o- lun0 ........................................ [block/shared_disk (/dev/loop0) (default_tg_pt_gp)] | o- portals .............................................................................. [Portals: 1] | o- 0.0.0.0:3260 ............................................................................... [OK] o- loopback ................................................................................... [Targets: 0]/&gt; [root@centos77 tmp]# systemctl restart target[root@centos77 tmp]# systemctl status target[root@centos77 tmp]# systemctl status iscsid[root@centos77 ~]# iscsiadm -m discoverydb -t st -p 192.168.1.10 --discoveriscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.10: No such deviceiscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.10: No such deviceiscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.10: No such deviceiscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.10: No such deviceiscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.10: No such deviceiscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.10: No such deviceiscsiadm: connection login retries (reopen_max) 5 exceeded192.168.1.10:3260,1 iqn.2020-02.com.baidu:shareddisk[root@centos77 ~]# iscsiadm -m discoverydb -t st -p 192.168.1.11 --discoveriscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.11: No such deviceiscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.11: No such deviceiscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.11: No such deviceiscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.11: No such deviceiscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.11: No such deviceiscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.11: No such deviceiscsiadm: connection login retries (reopen_max) 5 exceeded192.168.1.11:3260,1 iqn.2020-02.com.baidu:shareddisk[root@centos77 ~]# iscsiadm -m node192.168.1.10:3260,1 iqn.2020-02.com.baidu:shareddisk192.168.1.11:3260,1 iqn.2020-02.com.baidu:shareddisk[root@centos77 tmp]# iscsiadm -m iface -I iface0 --op=new //删除iface为：iscsiadm -m iface -I iface0 --op=deleteNew interface iface0 added[root@centos77 tmp]# iscsiadm -m iface -I iface1 --op=new //删除iface为：iscsiadm -m iface -I iface1 --op=deleteNew interface iface1 added[root@centos77 tmp]# ls -l /var/lib/iscsi/ifaces/total 8-rw-------. 1 root root 419 Feb 15 10:01 iface0-rw-------. 1 root root 419 Feb 15 10:01 iface1[root@centos77 tmp]# iscsiadm -m iface -I iface0 --op=update -n iface.net_ifacename -v ens33iface0 updated.[root@centos77 tmp]# iscsiadm -m iface -I iface1 --op=update -n iface.net_ifacename -v ens33:0iface0 updated.[root@centos77 ~]# iscsiadm -m ifacedefault tcp,&lt;empty&gt;,&lt;empty&gt;,&lt;empty&gt;,&lt;empty&gt;iser iser,&lt;empty&gt;,&lt;empty&gt;,&lt;empty&gt;,&lt;empty&gt;iface0 tcp,&lt;empty&gt;,&lt;empty&gt;,ens33,&lt;empty&gt;iface1 tcp,&lt;empty&gt;,&lt;empty&gt;,ens33:0,&lt;empty&gt;[root@centos77 tmp]# iscsiadm -m discoverydb -t st -p 192.168.1.10 -I iface0 -I iface1# BEGIN RECORD 6.2.0.874-10discovery.startup = manualdiscovery.type = sendtargetsdiscovery.sendtargets.address = 192.168.1.10discovery.sendtargets.port = 3260discovery.sendtargets.auth.authmethod = Nonediscovery.sendtargets.auth.username = &lt;empty&gt;discovery.sendtargets.auth.password = &lt;empty&gt;discovery.sendtargets.auth.username_in = &lt;empty&gt;discovery.sendtargets.auth.password_in = &lt;empty&gt;discovery.sendtargets.timeo.login_timeout = 15discovery.sendtargets.use_discoveryd = Nodiscovery.sendtargets.discoveryd_poll_inval = 30discovery.sendtargets.reopen_max = 5discovery.sendtargets.timeo.auth_timeout = 45discovery.sendtargets.timeo.active_timeout = 30discovery.sendtargets.iscsi.MaxRecvDataSegmentLength = 32768# END RECORD[root@centos77 ~]# iscsiadm --mode node --targetname iqn.2020-02.com.baidu:shareddisk --portal 192.168.1.10:3260 --login[root@centos77 ~]# iscsiadm --mode node --targetname iqn.2020-02.com.baidu:shareddisk --portal 192.168.1.11:3260 --login或者[root@centos77 ~]# iscsiadm -m node -l //登出为：iscsiadm -m node -u[root@centos77 ~]# iscsiadm -m node192.168.1.10:3260,1 iqn.2020-02.com.baidu:shareddisk192.168.1.11:3260,1 iqn.2020-02.com.baidu:shareddisk[root@centos77 ~]# iscsiadm -m session //查看登录会话tcp: [5] 192.168.1.10:3260,1 iqn.2020-02.com.baidu:shareddisk (non-flash)tcp: [6] 192.168.1.11:3260,1 iqn.2020-02.com.baidu:shareddisk (non-flash)//也可以查看登录会话[root@centos77 ~]# netstat -anp | grep 3260tcp 0 0 0.0.0.0:3260 0.0.0.0:* LISTEN - tcp 0 0 192.168.1.10:57166 192.168.1.11:3260 ESTABLISHED 1727/iscsid tcp 0 0 192.168.1.11:3260 192.168.1.10:57166 ESTABLISHED - tcp 0 0 192.168.1.10:41850 192.168.1.10:3260 ESTABLISHED 1727/iscsid tcp 0 0 192.168.1.10:3260 192.168.1.10:41850 ESTABLISHED - [root@centos77 tmp]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 7G 0 disk ├─sda1 8:1 0 1G 0 part /boot└─sda2 8:2 0 6G 0 part ├─centos-root 253:0 0 5.3G 0 lvm / └─centos-swap 253:1 0 716M 0 lvm [SWAP]sdb 8:16 0 2G 0 disk sdc 8:32 0 2G 0 disk sr0 11:0 1 1024M 0 rom loop0 7:0 0 2G 0 loop//其中loop0是dd出来的作为共享的挂载在/dev/loop0上的/tmp/images.iso//sdb,sdc是通过initiator登录target识别出来的2块硬盘(其实就是一个loop0共享出来的target)//所以说，target，initiator，multipath同在一台机器上[root@centos77 tmp]# netstat -anp | grep 3260tcp 0 0 0.0.0.0:3260 0.0.0.0:* LISTEN - tcp 0 0 192.168.1.10:3260 192.168.1.10:46320 ESTABLISHED - tcp 0 0 192.168.1.10:45494 192.168.1.11:3260 ESTABLISHED 2290/iscsid tcp 0 0 192.168.1.10:46320 192.168.1.10:3260 ESTABLISHED 2290/iscsid tcp 0 0 192.168.1.11:3260 192.168.1.10:45494 ESTABLISHED - //如上输出也能证明，所以说，target，initiator，multipath同在一台机器上[root@centos77 ~]# cat /proc/scsi/scsi Attached devices:Host: scsi0 Channel: 00 Id: 00 Lun: 00 Vendor: VMware, Model: VMware Virtual S Rev: 1.0 Type: Direct-Access ANSI SCSI revision: 02Host: scsi2 Channel: 00 Id: 00 Lun: 00 Vendor: NECVMWar Model: VMware IDE CDR10 Rev: 1.00 Type: CD-ROM ANSI SCSI revision: 05Host: scsi15 Channel: 00 Id: 00 Lun: 00 Vendor: LIO-ORG Model: shared_disk Rev: 4.0 Type: Direct-Access ANSI SCSI revision: 05Host: scsi16 Channel: 00 Id: 00 Lun: 00 Vendor: LIO-ORG Model: shared_disk Rev: 4.0 Type: Direct-Access ANSI SCSI revision: 05[root@centos77 ~]# grep -v &quot;zZzZ&quot; -H /sys/class/scsi_host/host&#123;0,1,2,15,16&#125;/state/sys/class/scsi_host/host0/state:running/sys/class/scsi_host/host1/state:running/sys/class/scsi_host/host2/state:running/sys/class/scsi_host/host15/state:running/sys/class/scsi_host/host16/state:running 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229[root@centos77 tmp]# multipath -llFeb 15 10:31:52 | DM multipath kernel driver not loadedFeb 15 10:31:52 | /etc/multipath.conf does not exist, blacklisting all devices.Feb 15 10:31:52 | A default multipath.conf file is located atFeb 15 10:31:52 | /usr/share/doc/device-mapper-multipath-0.4.9/multipath.confFeb 15 10:31:52 | You can run /sbin/mpathconf --enable to createFeb 15 10:31:52 | /etc/multipath.conf. See man mpathconf(8) for more detailsFeb 15 10:31:52 | DM multipath kernel driver not loaded[root@centos77 tmp]# modprobe dm_multipath[root@centos77 tmp]# modprobe dm-multipath[root@centos77 tmp]# modprobe dm-round-robin[root@centos77 tmp]# service multipathd start[root@centos77 tmp]# lsmod | grep dm_dm_multipath 27792 0 dm_mirror 22289 0 dm_region_hash 20813 1 dm_mirrordm_log 18411 2 dm_region_hash,dm_mirrordm_mod 124501 9 dm_multipath,dm_log,dm_mirror--- 补充在 Linux 7下，可以使用如下命令：# /usr/lib/udev/scsi_id -g -u /dev/sdb在 Linux 6下，可以使用如下命令：# /sbin/scsi_id -g -u /dev/sdb在 Linux 5下，可以使用如下命令：# /sbin/scsi_id -g -u -s /block/sdb/sdb[root@centos77 block]# /usr/lib/udev/scsi_id -g -u /dev/sdb3600140565524db35468485692d22ebc2[root@centos77 block]# /usr/lib/udev/scsi_id -g -u /dev/sdc3600140565524db35468485692d22ebc2[root@centos77 block]# ll /dev/disk/by-id/total 0lrwxrwxrwx. 1 root root 9 Feb 15 09:27 ata-VMware_Virtual_IDE_CDROM_Drive_10000000000000000001 -&gt; ../../sr0lrwxrwxrwx. 1 root root 10 Feb 15 09:27 dm-name-centos-root -&gt; ../../dm-0lrwxrwxrwx. 1 root root 10 Feb 15 09:27 dm-name-centos-swap -&gt; ../../dm-1lrwxrwxrwx. 1 root root 10 Feb 15 09:27 dm-uuid-LVM-knguIEmnftLwQDqkmD2j8t1X3PhKdvBs6uzAGweaam1OoGS7uo0sKH0o5YeY78P9 -&gt; ../../dm-0lrwxrwxrwx. 1 root root 10 Feb 15 09:27 dm-uuid-LVM-knguIEmnftLwQDqkmD2j8t1X3PhKdvBse8RGeQgafMPcyDCCQP3RN4c0tMfvwM9c -&gt; ../../dm-1lrwxrwxrwx. 1 root root 10 Feb 15 09:27 lvm-pv-uuid-5di517-Kstv-hVjb-Ags4-gJzc-a7e7-WPnfgY -&gt; ../../sda2lrwxrwxrwx. 1 root root 9 Feb 15 10:27 scsi-3600140565524db35468485692d22ebc2 -&gt; ../../sdclrwxrwxrwx. 1 root root 9 Feb 15 10:27 wwn-0x600140565524db35468485692d22ebc2 -&gt; ../../sdc[root@centos77 block]# [root@centos77 tmp]# mpathconf --enable[root@centos77 tmp]# vim /etc/multipath.conf[root@centos77 ~]# grep ^[^#] /etc/multipath.confdefaults &#123; user_friendly_names yes find_multipaths yes&#125;blacklist &#123; devnode &quot;sda&quot; devnode &quot;loop0&quot; devnode &quot;sr0&quot;&#125;[root@centos77 ~]# systemctl restart multipathd[root@centos77 ~]# multipath -llmpatha (3600140565524db35468485692d22ebc2) dm-2 LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=rw|-+- policy=&#x27;service-time 0&#x27; prio=1 status=active| `- 15:0:0:0 sdb 8:16 active ready running`-+- policy=&#x27;service-time 0&#x27; prio=1 status=enabled `- 16:0:0:0 sdc 8:32 active ready running[root@centos77 ~]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 7G 0 disk ├─sda1 8:1 0 1G 0 part /boot└─sda2 8:2 0 6G 0 part ├─centos-root 253:0 0 5.3G 0 lvm / └─centos-swap 253:1 0 716M 0 lvm [SWAP]sdb 8:16 0 2G 0 disk └─mpatha 253:2 0 2G 0 mpath sdc 8:32 0 2G 0 disk └─mpatha 253:2 0 2G 0 mpath sr0 11:0 1 1024M 0 rom loop0 7:0 0 2G 0 loop[root@centos77 tmp]# vim /etc/multipath.conf[root@centos77 ~]# grep ^[^#] /etc/multipath.conf defaults &#123; user_friendly_names yes find_multipaths yes&#125;blacklist &#123; devnode &quot;sda&quot; devnode &quot;loop0&quot; devnode &quot;sr0&quot;&#125;multipaths&#123; multipath&#123; wwid 3600140565524db35468485692d22ebc2 alias shareddisk &#125;&#125;[root@centos77 ~]# systemctl restart multipathd[root@centos77 ~]# multipath -llshareddisk (3600140565524db35468485692d22ebc2) dm-2 LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=rw|-+- policy=&#x27;service-time 0&#x27; prio=1 status=active| `- 15:0:0:0 sdb 8:16 active ready running`-+- policy=&#x27;service-time 0&#x27; prio=1 status=enabled `- 16:0:0:0 sdc 8:32 active ready running[root@centos77 ~]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 7G 0 disk ├─sda1 8:1 0 1G 0 part /boot└─sda2 8:2 0 6G 0 part ├─centos-root 253:0 0 5.3G 0 lvm / └─centos-swap 253:1 0 716M 0 lvm [SWAP]sdb 8:16 0 2G 0 disk └─shareddisk 253:2 0 2G 0 mpath sdc 8:32 0 2G 0 disk └─shareddisk 253:2 0 2G 0 mpath sr0 11:0 1 1024M 0 rom loop0 7:0 0 2G 0 loop [root@centos77 tmp]# vim /etc/multipath.conf[root@centos77 ~]# grep ^[^#] /etc/multipath.conf defaults &#123; user_friendly_names yes find_multipaths yes polling_interval 10 path_selector &quot;round-robin 0&quot; path_grouping_policy multibus uid_attribute ID_SERIAL prio alua path_checker readsector0 rr_min_io 100 max_fds 8192 rr_weight priorities failback immediate no_path_retry fail&#125;blacklist &#123; devnode &quot;sda&quot; devnode &quot;loop0&quot; devnode &quot;sr0&quot;&#125;multipaths&#123; multipath&#123; wwid 3600140565524db35468485692d22ebc2 alias shareddisk &#125;&#125;[root@centos77 ~]# systemctl restart multipathd[root@centos77 ~]# multipath -llshareddisk (3600140565524db35468485692d22ebc2) dm-2 LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=rw`-+- policy=&#x27;round-robin 0&#x27; prio=50 status=active |- 15:0:0:0 sdb 8:16 active ready running `- 16:0:0:0 sdc 8:32 active ready running[root@centos77 ~]# lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 7G 0 disk ├─sda1 8:1 0 1G 0 part /boot└─sda2 8:2 0 6G 0 part ├─centos-root 253:0 0 5.3G 0 lvm / └─centos-swap 253:1 0 716M 0 lvm [SWAP]sdb 8:16 0 2G 0 disk └─shareddisk 253:2 0 2G 0 mpath sdc 8:32 0 2G 0 disk └─shareddisk 253:2 0 2G 0 mpath sr0 11:0 1 1024M 0 rom loop0 7:0 0 2G 0 loop[root@centos77 ~]# sg_map -x/dev/sg0 0 0 0 0 0 /dev/sda/dev/sg1 2 0 0 0 5 /dev/sr0/dev/sg2 15 0 0 0 0 /dev/sdb/dev/sg3 16 0 0 0 0 /dev/sdc[root@centos77 ~]# ls -lrht /dev/mapper/*crw-------. 1 root root 10, 236 Feb 15 09:27 /dev/mapper/controllrwxrwxrwx. 1 root root 7 Feb 15 09:27 /dev/mapper/centos-swap -&gt; ../dm-1lrwxrwxrwx. 1 root root 7 Feb 15 09:27 /dev/mapper/centos-root -&gt; ../dm-0lrwxrwxrwx. 1 root root 7 Feb 15 11:15 /dev/mapper/shareddisk -&gt; ../dm-2[root@centos77 ~]# ll /sys/class/scsi_host/total 0lrwxrwxrwx. 1 root root 0 Feb 15 09:27 host0 -&gt; ../../devices/pci0000:00/0000:00:10.0/host0/scsi_host/host0lrwxrwxrwx. 1 root root 0 Feb 15 09:27 host1 -&gt; ../../devices/pci0000:00/0000:00:07.1/ata1/host1/scsi_host/host1lrwxrwxrwx. 1 root root 0 Feb 15 10:24 host15 -&gt; ../../devices/platform/host15/scsi_host/host15lrwxrwxrwx. 1 root root 0 Feb 15 10:27 host16 -&gt; ../../devices/platform/host16/scsi_host/host16lrwxrwxrwx. 1 root root 0 Feb 15 09:27 host2 -&gt; ../../devices/pci0000:00/0000:00:07.1/ata2/host2/scsi_host/host2[root@centos77 ~]# ll /sys/class/block/total 0lrwxrwxrwx. 1 root root 0 Feb 15 09:27 dm-0 -&gt; ../../devices/virtual/block/dm-0lrwxrwxrwx. 1 root root 0 Feb 15 09:27 dm-1 -&gt; ../../devices/virtual/block/dm-1lrwxrwxrwx. 1 root root 0 Feb 15 10:49 dm-2 -&gt; ../../devices/virtual/block/dm-2lrwxrwxrwx. 1 root root 0 Feb 15 09:51 loop0 -&gt; ../../devices/virtual/block/loop0lrwxrwxrwx. 1 root root 0 Feb 15 09:27 sda -&gt; ../../devices/pci0000:00/0000:00:10.0/host0/target0:0:0/0:0:0:0/block/sdalrwxrwxrwx. 1 root root 0 Feb 15 09:27 sda1 -&gt; ../../devices/pci0000:00/0000:00:10.0/host0/target0:0:0/0:0:0:0/block/sda/sda1lrwxrwxrwx. 1 root root 0 Feb 15 09:27 sda2 -&gt; ../../devices/pci0000:00/0000:00:10.0/host0/target0:0:0/0:0:0:0/block/sda/sda2lrwxrwxrwx. 1 root root 0 Feb 15 10:35 sdb -&gt; ../../devices/platform/host15/session13/target15:0:0/15:0:0:0/block/sdblrwxrwxrwx. 1 root root 0 Feb 15 10:35 sdc -&gt; ../../devices/platform/host16/session14/target16:0:0/16:0:0:0/block/sdclrwxrwxrwx. 1 root root 0 Feb 15 09:27 sr0 -&gt; ../../devices/pci0000:00/0000:00:07.1/ata2/host2/target2:0:0/2:0:0:0/block/sr0[root@centos77 ~]# ll /dev/disk/by-idtotal 0lrwxrwxrwx. 1 root root 9 Feb 15 09:27 ata-VMware_Virtual_IDE_CDROM_Drive_10000000000000000001 -&gt; ../../sr0lrwxrwxrwx. 1 root root 10 Feb 15 09:27 dm-name-centos-root -&gt; ../../dm-0lrwxrwxrwx. 1 root root 10 Feb 15 09:27 dm-name-centos-swap -&gt; ../../dm-1lrwxrwxrwx. 1 root root 10 Feb 15 11:07 dm-name-shareddisk -&gt; ../../dm-2lrwxrwxrwx. 1 root root 10 Feb 15 09:27 dm-uuid-LVM-knguIEmnftLwQDqkmD2j8t1X3PhKdvBs6uzAGweaam1OoGS7uo0sKH0o5YeY78P9 -&gt; ../../dm-0lrwxrwxrwx. 1 root root 10 Feb 15 09:27 dm-uuid-LVM-knguIEmnftLwQDqkmD2j8t1X3PhKdvBse8RGeQgafMPcyDCCQP3RN4c0tMfvwM9c -&gt; ../../dm-1lrwxrwxrwx. 1 root root 10 Feb 15 11:07 dm-uuid-mpath-3600140565524db35468485692d22ebc2 -&gt; ../../dm-2lrwxrwxrwx. 1 root root 10 Feb 15 09:27 lvm-pv-uuid-5di517-Kstv-hVjb-Ags4-gJzc-a7e7-WPnfgY -&gt; ../../sda2lrwxrwxrwx. 1 root root 9 Feb 15 10:49 scsi-3600140565524db35468485692d22ebc2 -&gt; ../../sdblrwxrwxrwx. 1 root root 9 Feb 15 10:49 wwn-0x600140565524db35468485692d22ebc2 -&gt; ../../sdb[root@centos77 ~]# ll /dev/disk/by-path/total 0lrwxrwxrwx. 1 root root 9 Feb 15 10:49 fc---lun-0 -&gt; ../../sdblrwxrwxrwx. 1 root root 10 Feb 15 09:27 fc---lun-0-part1 -&gt; ../../sda1lrwxrwxrwx. 1 root root 10 Feb 15 09:27 fc---lun-0-part2 -&gt; ../../sda2lrwxrwxrwx. 1 root root 9 Feb 15 10:49 ip-192.168.1.10:3260-iscsi-iqn.2020-02.com.baidu:shareddisk-lun-0 -&gt; ../../sdblrwxrwxrwx. 1 root root 9 Feb 15 10:49 ip-192.168.1.11:3260-iscsi-iqn.2020-02.com.baidu:shareddisk-lun-0 -&gt; ../../sdclrwxrwxrwx. 1 root root 9 Feb 15 09:27 pci-0000:00:07.1-ata-2.0 -&gt; ../../sr0lrwxrwxrwx. 1 root root 9 Feb 15 09:27 pci-0000:00:10.0-scsi-0:0:0:0 -&gt; ../../sdalrwxrwxrwx. 1 root root 10 Feb 15 09:27 pci-0000:00:10.0-scsi-0:0:0:0-part1 -&gt; ../../sda1lrwxrwxrwx. 1 root root 10 Feb 15 09:27 pci-0000:00:10.0-scsi-0:0:0:0-part2 -&gt; ../../sda2 unimportant1234567891011121314151617181920[root@centos77 ~]# multipath -llshareddisk (3600140565524db35468485692d22ebc2) dm-2 LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=rw`-+- policy=&#x27;round-robin 0&#x27; prio=50 status=active |- 15:0:0:0 sdb 8:16 active ready running `- 16:0:0:0 sdc 8:32 active ready running[root@centos77 ~]# multipath -F[root@centos77 ~]# multipath -ll[root@centos77 ~]# multipath -v2create: shareddisk (3600140565524db35468485692d22ebc2) undef LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=undef`-+- policy=&#x27;round-robin 0&#x27; prio=50 status=undef |- 15:0:0:0 sdb 8:16 undef ready running `- 16:0:0:0 sdc 8:32 undef ready running[root@centos77 ~]# multipath -llshareddisk (3600140565524db35468485692d22ebc2) dm-2 LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=rw`-+- policy=&#x27;round-robin 0&#x27; prio=50 status=active |- 15:0:0:0 sdb 8:16 active ready running `- 16:0:0:0 sdc 8:32 active ready running 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147[root@centos77 ~]# multipath -llshareddisk (3600140565524db35468485692d22ebc2) dm-2 LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=rw`-+- policy=&#x27;round-robin 0&#x27; prio=50 status=active |- 15:0:0:0 sdb 8:16 active ready running `- 16:0:0:0 sdc 8:32 active ready running[root@centos77 ~]# multipath -F[root@centos77 ~]# multipath -ll[root@centos77 ~]# multipath -v3Feb 15 11:21:39 | set open fds limit to 8192/8192Feb 15 11:21:39 | loading /lib64/multipath/libcheckdirectio.so checkerFeb 15 11:21:39 | loading /lib64/multipath/libprioconst.so prioritizerFeb 15 11:21:39 | sr0: not found in pathvecFeb 15 11:21:39 | sr0: device node name blacklistedFeb 15 11:21:39 | sda: not found in pathvecFeb 15 11:21:39 | sda: device node name blacklistedFeb 15 11:21:39 | sdb: not found in pathvecFeb 15 11:21:39 | sdb: mask = 0x3fFeb 15 11:21:39 | sdb: dev_t = 8:16Feb 15 11:21:39 | sdb: size = 4194304Feb 15 11:21:39 | sdb: vendor = LIO-ORG Feb 15 11:21:39 | sdb: product = shared_disk Feb 15 11:21:39 | sdb: rev = 4.0 Feb 15 11:21:39 | sdb: h:b:t:l = 15:0:0:0Feb 15 11:21:39 | sdb: tgt_node_name = iqn.2020-02.com.baidu:shareddiskFeb 15 11:21:39 | sdb: path state = runningFeb 15 11:21:39 | sdb: 1009 cyl, 67 heads, 62 sectors/track, start at 0Feb 15 11:21:39 | sdb: serial = 65524db3-5468-4856-92d2-2ebc2471e3daFeb 15 11:21:39 | sdb: get_stateFeb 15 11:21:39 | sdb: detect_checker = 1 (config file default)Feb 15 11:21:39 | loading /lib64/multipath/libcheckreadsector0.so checkerFeb 15 11:21:39 | sdb: path checker = readsector0 (config file default)Feb 15 11:21:39 | sdb: checker timeout = 30000 ms (sysfs setting)Feb 15 11:21:39 | sdb: readsector0 state = upFeb 15 11:21:39 | sdb: uid_attribute = ID_SERIAL (config file default)Feb 15 11:21:39 | sdb: uid = 3600140565524db35468485692d22ebc2 (udev)Feb 15 11:21:39 | sdb: detect_prio = 1 (config file default)Feb 15 11:21:39 | loading /lib64/multipath/libprioalua.so prioritizerFeb 15 11:21:39 | sdb: prio = alua (config file default)Feb 15 11:21:39 | sdb: prio args = (null) (config file default)Feb 15 11:21:39 | reported target port group is 0Feb 15 11:21:39 | aas = 00 [active/optimized]Feb 15 11:21:39 | sdb: alua prio = 50Feb 15 11:21:39 | sdc: not found in pathvecFeb 15 11:21:39 | sdc: mask = 0x3fFeb 15 11:21:39 | sdc: dev_t = 8:32Feb 15 11:21:39 | sdc: size = 4194304Feb 15 11:21:39 | sdc: vendor = LIO-ORG Feb 15 11:21:39 | sdc: product = shared_disk Feb 15 11:21:39 | sdc: rev = 4.0 Feb 15 11:21:39 | sdc: h:b:t:l = 16:0:0:0Feb 15 11:21:39 | sdc: tgt_node_name = iqn.2020-02.com.baidu:shareddiskFeb 15 11:21:39 | sdc: path state = runningFeb 15 11:21:39 | sdc: 1009 cyl, 67 heads, 62 sectors/track, start at 0Feb 15 11:21:39 | sdc: serial = 65524db3-5468-4856-92d2-2ebc2471e3daFeb 15 11:21:39 | sdc: get_stateFeb 15 11:21:39 | sdc: detect_checker = 1 (config file default)Feb 15 11:21:39 | sdc: path checker = readsector0 (config file default)Feb 15 11:21:39 | sdc: checker timeout = 30000 ms (sysfs setting)Feb 15 11:21:39 | sdc: readsector0 state = upFeb 15 11:21:39 | sdc: uid_attribute = ID_SERIAL (config file default)Feb 15 11:21:39 | sdc: uid = 3600140565524db35468485692d22ebc2 (udev)Feb 15 11:21:39 | sdc: detect_prio = 1 (config file default)Feb 15 11:21:39 | sdc: prio = alua (config file default)Feb 15 11:21:39 | sdc: prio args = (null) (config file default)Feb 15 11:21:39 | reported target port group is 0Feb 15 11:21:39 | aas = 00 [active/optimized]Feb 15 11:21:39 | sdc: alua prio = 50Feb 15 11:21:39 | loop0: not found in pathvecFeb 15 11:21:39 | loop0: device node name blacklistedFeb 15 11:21:39 | dm-0: not found in pathvecFeb 15 11:21:39 | dm-0: device node name blacklistedFeb 15 11:21:39 | dm-1: not found in pathvecFeb 15 11:21:39 | dm-1: device node name blacklisted===== paths list =====uuid hcil dev dev_t pri dm_st chk_st vend/pro3600140565524db35468485692d22ebc2 15:0:0:0 sdb 8:16 50 undef undef LIO-ORG 3600140565524db35468485692d22ebc2 16:0:0:0 sdc 8:32 50 undef undef LIO-ORG Feb 15 11:21:39 | found multiple paths with wwid 3600140565524db35468485692d22ebc2, multipathing sdbFeb 15 11:21:39 | sdb: ownership set to shareddiskFeb 15 11:21:39 | sdb: not found in pathvecFeb 15 11:21:39 | sdb: mask = 0xcFeb 15 11:21:39 | sdb: path state = runningFeb 15 11:21:39 | sdb: get_stateFeb 15 11:21:39 | sdb: readsector0 state = upFeb 15 11:21:39 | reported target port group is 0Feb 15 11:21:39 | aas = 00 [active/optimized]Feb 15 11:21:39 | sdb: alua prio = 50Feb 15 11:21:39 | sdc: ownership set to shareddiskFeb 15 11:21:39 | sdc: not found in pathvecFeb 15 11:21:39 | sdc: mask = 0xcFeb 15 11:21:39 | sdc: path state = runningFeb 15 11:21:39 | sdc: get_stateFeb 15 11:21:39 | sdc: readsector0 state = upFeb 15 11:21:39 | reported target port group is 0Feb 15 11:21:39 | aas = 00 [active/optimized]Feb 15 11:21:39 | sdc: alua prio = 50Feb 15 11:21:39 | shareddisk: pgfailback = -2 (config file default)Feb 15 11:21:39 | shareddisk: pgpolicy = multibus (config file default)Feb 15 11:21:39 | shareddisk: selector = round-robin 0 (config file default)Feb 15 11:21:39 | shareddisk: features = 0 (config file default)Feb 15 11:21:39 | shareddisk: retain_attached_hw_handler = 1 (config file default)Feb 15 11:21:39 | shareddisk: hwhandler = 0 (internal default)Feb 15 11:21:39 | shareddisk: rr_weight = 2 (config file default)Feb 15 11:21:39 | shareddisk: minio = 1 rq (config file default)Feb 15 11:21:39 | shareddisk: no_path_retry = -1 (config file default)Feb 15 11:21:39 | shareddisk: pg_timeout = NONE (internal default)Feb 15 11:21:39 | shareddisk: fast_io_fail_tmo = 5 (config file default)Feb 15 11:21:39 | shareddisk: deferred_remove = 1 (config file default)Feb 15 11:21:39 | delay_watch_checks = DISABLED (internal default)Feb 15 11:21:39 | delay_wait_checks = DISABLED (internal default)Feb 15 11:21:39 | marginal_path_err_sample_time = DISABLED (internal default)Feb 15 11:21:39 | marginal_path_err_rate_threshold = DISABLED (internal default)Feb 15 11:21:39 | marginal_path_err_recheck_gap_time = DISABLED (internal default)Feb 15 11:21:39 | marginal_path_double_failed_time = DISABLED (internal default)Feb 15 11:21:39 | skip_kpartx = 1 (config file default)Feb 15 11:21:39 | unpriv_sgio = 1 (config file default)Feb 15 11:21:39 | shareddisk: remove queue_if_no_path from &#x27;0&#x27;Feb 15 11:21:39 | shareddisk: assembled map [0 0 1 1 round-robin 0 2 1 8:16 50 8:32 50]Feb 15 11:21:39 | shareddisk: set ACT_CREATE (map does not exist)Feb 15 11:21:39 | ghost_delay = -1 (config file default)Feb 15 11:21:39 | shareddisk: unset queue_if_no_path featurecreate: shareddisk (3600140565524db35468485692d22ebc2) undef LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=undef`-+- policy=&#x27;round-robin 0&#x27; prio=50 status=undef |- 15:0:0:0 sdb 8:16 undef ready running `- 16:0:0:0 sdc 8:32 undef ready runningFeb 15 11:21:39 | readsector0 checker refcount 2Feb 15 11:21:39 | alua prioritizer refcount 2Feb 15 11:21:39 | readsector0 checker refcount 1Feb 15 11:21:39 | alua prioritizer refcount 1Feb 15 11:21:39 | unloading alua prioritizerFeb 15 11:21:39 | unloading const prioritizerFeb 15 11:21:39 | unloading readsector0 checkerFeb 15 11:21:39 | unloading directio checker[root@centos77 ~]# multipath -llshareddisk (3600140565524db35468485692d22ebc2) dm-2 LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=rw`-+- policy=&#x27;round-robin 0&#x27; prio=50 status=active |- 15:0:0:0 sdb 8:16 active ready running `- 16:0:0:0 sdc 8:32 active ready running n条链路 配置N个浮动IP就可以有N+1(真实物理IP)条链路 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293[root@centos77 ~]# ifconfig ens33:1 192.168.1.12 netmask 255.255.255.0[root@centos77 ~]# iscsiadm -m iface -I iface2 --op=newNew interface iface2 added[root@centos77 ~]# iscsiadm -m iface -I iface2 --op=update -n iface.net_ifacename -v ens33:1iface2 updated.[root@centos77 ~]# iscsiadm -m ifacedefault tcp,&lt;empty&gt;,&lt;empty&gt;,&lt;empty&gt;,&lt;empty&gt;iser iser,&lt;empty&gt;,&lt;empty&gt;,&lt;empty&gt;,&lt;empty&gt;iface1 tcp,&lt;empty&gt;,&lt;empty&gt;,ens33:0,&lt;empty&gt;iface0 tcp,&lt;empty&gt;,&lt;empty&gt;,ens33,&lt;empty&gt;iface2 tcp,&lt;empty&gt;,&lt;empty&gt;,ens33:1,&lt;empty&gt;[root@centos77 ~]# iscsiadm -m discoverydb -t st -p 192.168.1.10 -I iface0 -I iface1 -I iface2# BEGIN RECORD 6.2.0.874-10discovery.startup = manualdiscovery.type = sendtargetsdiscovery.sendtargets.address = 192.168.1.10discovery.sendtargets.port = 3260discovery.sendtargets.auth.authmethod = Nonediscovery.sendtargets.auth.username = &lt;empty&gt;discovery.sendtargets.auth.password = &lt;empty&gt;discovery.sendtargets.auth.username_in = &lt;empty&gt;discovery.sendtargets.auth.password_in = &lt;empty&gt;discovery.sendtargets.timeo.login_timeout = 15discovery.sendtargets.use_discoveryd = Nodiscovery.sendtargets.discoveryd_poll_inval = 30discovery.sendtargets.reopen_max = 5discovery.sendtargets.timeo.auth_timeout = 45discovery.sendtargets.timeo.active_timeout = 30discovery.sendtargets.iscsi.MaxRecvDataSegmentLength = 32768# END RECORD[root@centos77 ~]# iscsiadm -m discoverydb -t st -p 192.168.1.12 --discoveriscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.12: No such deviceiscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.12: No such deviceiscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.12: No such deviceiscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.12: No such deviceiscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.12: No such deviceiscsiadm: Could not bind connection 0 to ens33:0iscsiadm: cannot make connection to 192.168.1.12: No such deviceiscsiadm: connection login retries (reopen_max) 5 exceedediscsiadm: Could not bind connection 0 to ens33:1iscsiadm: cannot make connection to 192.168.1.12: No such deviceiscsiadm: Could not bind connection 0 to ens33:1iscsiadm: cannot make connection to 192.168.1.12: No such deviceiscsiadm: Could not bind connection 0 to ens33:1iscsiadm: cannot make connection to 192.168.1.12: No such deviceiscsiadm: Could not bind connection 0 to ens33:1iscsiadm: cannot make connection to 192.168.1.12: No such deviceiscsiadm: Could not bind connection 0 to ens33:1iscsiadm: cannot make connection to 192.168.1.12: No such deviceiscsiadm: Could not bind connection 0 to ens33:1iscsiadm: cannot make connection to 192.168.1.12: No such deviceiscsiadm: connection login retries (reopen_max) 5 exceeded192.168.1.12:3260,1 iqn.2020-02.com.baidu:shareddisk[root@centos77 ~]# iscsiadm -m node192.168.1.10:3260,1 iqn.2020-02.com.baidu:shareddisk192.168.1.11:3260,1 iqn.2020-02.com.baidu:shareddisk192.168.1.12:3260,1 iqn.2020-02.com.baidu:shareddisk[root@centos77 ~]# iscsiadm --mode node --targetname iqn.2020-02.com.baidu:shareddisk --portal 192.168.1.12:3260 --loginLogging in to [iface: iface0, target: iqn.2020-02.com.baidu:shareddisk, portal: 192.168.1.12,3260] (multiple)Login to [iface: iface0, target: iqn.2020-02.com.baidu:shareddisk, portal: 192.168.1.12,3260] successful.[root@centos77 ~]# iscsiadm -m sessiontcp: [5] 192.168.1.10:3260,1 iqn.2020-02.com.baidu:shareddisk (non-flash)tcp: [6] 192.168.1.11:3260,1 iqn.2020-02.com.baidu:shareddisk (non-flash)tcp: [7] 192.168.1.12:3260,1 iqn.2020-02.com.baidu:shareddisk (non-flash)[root@centos77 ~]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 7G 0 disk ├─sda1 8:1 0 1G 0 part /boot└─sda2 8:2 0 6G 0 part ├─centos-root 253:0 0 5.3G 0 lvm / └─centos-swap 253:1 0 716M 0 lvm [SWAP]sdb 8:16 0 2G 0 disk └─shareddisk 253:2 0 2G 0 mpath sdc 8:32 0 2G 0 disk └─shareddisk 253:2 0 2G 0 mpath sdd 8:48 0 2G 0 disk └─shareddisk 253:2 0 2G 0 mpath sr0 11:0 1 1024M 0 rom loop0 7:0 0 2G 0 loop [root@centos77 ~]# multipath -llshareddisk (3600140565524db35468485692d22ebc2) dm-2 LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=rw`-+- policy=&#x27;round-robin 0&#x27; prio=50 status=active |- 7:0:0:0 sdb 8:16 active ready running |- 8:0:0:0 sdc 8:32 active ready running `- 9:0:0:0 sdd 8:48 active ready running[root@centos77 ~]# 测试断路123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104[root@centos77 ~]# ifconfigens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.1.10 netmask 255.255.255.0 broadcast 192.168.1.255 ether 00:0c:29:19:60:fc txqueuelen 1000 (Ethernet) RX packets 13470 bytes 1225681 (1.1 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 4841 bytes 798163 (779.4 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0ens33:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.1.11 netmask 255.255.255.0 broadcast 192.168.1.255 ether 00:0c:29:19:60:fc txqueuelen 1000 (Ethernet)ens33:1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.1.12 netmask 255.255.255.0 broadcast 192.168.1.255 ether 00:0c:29:19:60:fc txqueuelen 1000 (Ethernet)lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10&lt;host&gt; loop txqueuelen 1000 (Local Loopback) RX packets 15034 bytes 16187808 (15.4 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 15034 bytes 16187808 (15.4 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0[root@centos77 ~]# multipath -llshareddisk (3600140565524db35468485692d22ebc2) dm-2 LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=rw`-+- policy=&#x27;round-robin 0&#x27; prio=50 status=active |- 7:0:0:0 sdb 8:16 active ready running |- 8:0:0:0 sdc 8:32 active ready running `- 9:0:0:0 sdd 8:48 active ready running[root@centos77 ~]# ip addr del 192.168.1.12 dev ens33:1Warning: Executing wildcard deletion to stay compatible with old scripts. Explicitly specify the prefix length (192.168.1.12/32) to avoid this warning. This special behaviour is likely to disappear in further releases, fix your scripts![root@centos77 ~]# ifconfigens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.1.10 netmask 255.255.255.0 broadcast 192.168.1.255 ether 00:0c:29:19:60:fc txqueuelen 1000 (Ethernet) RX packets 13502 bytes 1228927 (1.1 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 4873 bytes 803439 (784.6 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0ens33:0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.1.11 netmask 255.255.255.0 broadcast 192.168.1.255 ether 00:0c:29:19:60:fc txqueuelen 1000 (Ethernet)lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10&lt;host&gt; loop txqueuelen 1000 (Local Loopback) RX packets 15160 bytes 16200828 (15.4 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 15160 bytes 16200828 (15.4 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0[root@centos77 ~]# multipath -llshareddisk (3600140565524db35468485692d22ebc2) dm-2 LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=rw`-+- policy=&#x27;round-robin 0&#x27; prio=50 status=active |- 7:0:0:0 sdb 8:16 active ready running |- 8:0:0:0 sdc 8:32 active ready running `- 9:0:0:0 sdd 8:48 active faulty running[root@centos77 ~]# ifconfig ens33:1 192.168.1.12 netmask 255.255.255.0[root@centos77 ~]# multipath -llshareddisk (3600140565524db35468485692d22ebc2) dm-2 LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=rw`-+- policy=&#x27;round-robin 0&#x27; prio=50 status=active |- 7:0:0:0 sdb 8:16 active ready running |- 8:0:0:0 sdc 8:32 active ready running `- 9:0:0:0 sdd 8:48 failed ready running[root@centos77 ~]# multipath -llshareddisk (3600140565524db35468485692d22ebc2) dm-2 LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=rw`-+- policy=&#x27;round-robin 0&#x27; prio=50 status=active |- 7:0:0:0 sdb 8:16 active ready running |- 8:0:0:0 sdc 8:32 active ready running `- 9:0:0:0 sdd 8:48 failed ready running[root@centos77 ~]# multipath -llshareddisk (3600140565524db35468485692d22ebc2) dm-2 LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=rw`-+- policy=&#x27;round-robin 0&#x27; prio=50 status=active |- 7:0:0:0 sdb 8:16 active ready running |- 8:0:0:0 sdc 8:32 active ready running `- 9:0:0:0 sdd 8:48 failed ready running[root@centos77 ~]# multipath -llshareddisk (3600140565524db35468485692d22ebc2) dm-2 LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=rw`-+- policy=&#x27;round-robin 0&#x27; prio=50 status=active |- 7:0:0:0 sdb 8:16 active ready running |- 8:0:0:0 sdc 8:32 active ready running `- 9:0:0:0 sdd 8:48 failed ready running[root@centos77 ~]# multipath -llshareddisk (3600140565524db35468485692d22ebc2) dm-2 LIO-ORG ,shared_disk size=2.0G features=&#x27;0&#x27; hwhandler=&#x27;0&#x27; wp=rw`-+- policy=&#x27;round-robin 0&#x27; prio=50 status=active |- 7:0:0:0 sdb 8:16 active ready running |- 8:0:0:0 sdc 8:32 active ready running `- 9:0:0:0 sdd 8:48 active ready running[root@centos77 ~]# 参考 Multipath实现LUN设备名称的持久化 Centos7.4 配置ISCSI共享磁盘 Linux下多路径multipath配置 openfiler 搭建虚拟存储 并 配置服务端 Linux Device Mapper Multipathing技术 在vmware虚机上用iscsi协议建立多路径环境测试multipath ubuntu的iscsi多路径环境搭建 （multipath)","categories":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"}],"author":"susu"},{"title":"Gentoo在重复编译内核的时候报warning Clock skew detected","slug":"gentoo-compile-problem","date":"2020-01-06T08:48:13.000Z","updated":"2021-12-05T13:59:35.634Z","comments":true,"path":"2020/01/06/gentoo-compile-problem/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/gentoo-compile-problem/","excerpt":"","text":"gentoo在重复编译内核的时候报：warning: Clock skew detected. Your build may be incomplete. vmware linux 从光盘启动 开始启动vmware启动时，由于速度太快设置页面一晃就过去了，多试几次后再如下界面按F2进入Bios设置. VMware的Bios设置界面,根据最下方的提示，用+/-来调整VMware启动系统时加载的顺序，这里从光驱启动的话自然要将CD-ROM Drive放在第一项，然后按F10保存退出，再次启动后就会从光驱启动了。 g++: internal compiler error: Killed (program cc1plus) 12345678sudo dd if=/dev/zero of=/swapfile bs=64M count=16#count的大小就是增加的swap空间的大小，64M是块大小，所以空间大小是bs*count=1024MBsudo mkswap /swapfile#把刚才空间格式化成swap格式sudo swapon /swapfile#使用刚才创建的swap空间sudo swapoff /swapfilesudo rm /swapfile g++: internal compiler error: Killed 查看HBA卡信息 $ systool -c fc_host -v from sysfsutils package $ grep -v “zZzZ” -H /sys/class/fc_host/host*/port_state 查看RAID信息 cat /proc/mdstat dmesg |grep -i raid cat /proc/scsi/scsi","categories":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"}],"author":"susu"},{"title":"","slug":"os/openbsd/openbsd_01","date":"2020-01-06T08:48:13.000Z","updated":"2021-12-05T12:32:55.863Z","comments":true,"path":"2020/01/06/os/openbsd/openbsd_01/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/os/openbsd/openbsd_01/","excerpt":"","text":"OpenBSD Series 01 : 基础 OpenBSD系统安装 关于OpenBSD系统的安装，我就不赘述了，其他博主写的很好，引用如下： OpenBSD FAQ - Installation Guide 安装OpenBSD6.4的步骤 OpenBSD全能服务器安装手册之系统安装篇–分区概念的相关介绍 安装OpenBSD相关说明 OpenBSD个性化及安全加固 使用OPENBSD的初步设置 OpenBSD基本设置 OpenBSD&amp;PF基本防火墙设定","categories":[{"name":"BSD","slug":"BSD","permalink":"http://jsunnyr.github.io/categories/BSD/"}],"tags":[{"name":"OpenBSD","slug":"OpenBSD","permalink":"http://jsunnyr.github.io/tags/OpenBSD/"}],"author":"susu"},{"title":"","slug":"os/openbsd/openbsd_pfctl","date":"2020-01-06T08:48:13.000Z","updated":"2021-12-05T12:32:55.866Z","comments":true,"path":"2020/01/06/os/openbsd/openbsd_pfctl/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/os/openbsd/openbsd_pfctl/","excerpt":"","text":"pfctl OpenBSD pfctl 控制指令 12345678910111213141516171819202122232425-- 重新載入pf.conf 設定檔#pfctl -f /etc/pf.conf-- 確認語法有無符合，但不載入#pfctl -nf /etc/pf.conf-- 只載入 NAT 的設定檔#pfctl -Nf /etc/pf.conf-- 只載入防火牆的過濾設定#pfctl -Rf /etc/pf.conf-- 顯示現階段 NAT 的規則#pfctl -sn-- 顯示現階段過濾的規則#pfctl -sr-- 顯示現階段封包運作狀態#pfctl -ss-- 顯示現階段過濾封包的統計資料#pfctl -si-- 顯示現階段所有統計的資料#pfctl -sa","categories":[{"name":"BSD","slug":"BSD","permalink":"http://jsunnyr.github.io/categories/BSD/"}],"tags":[{"name":"OpenBSD","slug":"OpenBSD","permalink":"http://jsunnyr.github.io/tags/OpenBSD/"}],"author":"susu"},{"title":"OpenBSD rcctl","slug":"os/openbsd/openbsd_rcctl","date":"2020-01-06T08:48:13.000Z","updated":"2021-12-05T13:57:06.647Z","comments":true,"path":"2020/01/06/os/openbsd/openbsd_rcctl/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/os/openbsd/openbsd_rcctl/","excerpt":"","text":"rcctl是OpenBSD系统上的后台进程(daemon)管理程序，功能上类似于以前RedHat Linux上的chkconfig或新版中的systemctl。 12345678910rcctl enable httpdrcctl disable httpdrcctl start httpdrcctl stop httpdrcctl get httpdrcctl getdef httpdrcctl order drcctl order d0 d1 d2rcctl set httpd status onrcctl set ntpd flags -s 123456all all services and daemons ## 所有的服务和进程faulty enabled but stopped daemons ## 启用但未能启动的服务和进程off disabled services and daemons ## 禁用的服务和进程on enabled services and daemons ## 启用的服务和进程started running daemons ## 已经启动的进程stopped stopped daemons ## 已经停止的进程","categories":[{"name":"BSD","slug":"BSD","permalink":"http://jsunnyr.github.io/categories/BSD/"}],"tags":[{"name":"OpenBSD","slug":"OpenBSD","permalink":"http://jsunnyr.github.io/tags/OpenBSD/"}],"author":"susu"},{"title":"CentOS7 升级git版本","slug":"os/rpm/linux-centos-package-git2u","date":"2020-01-06T08:48:13.000Z","updated":"2021-12-10T04:16:38.211Z","comments":true,"path":"2020/01/06/os/rpm/linux-centos-package-git2u/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/os/rpm/linux-centos-package-git2u/","excerpt":"","text":"CentOS6 123456#安装Gityum install -y epel-releaserpm -ivh https://centos6.iuscommunity.org/ius-release.rpmyum list git2uyum install -y git2ugit --version CentOS7 123456#安装Gityum install -y epel-releaserpm -ivh https://centos7.iuscommunity.org/ius-release.rpmyum list git2uyum install -y git2ugit --version","categories":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"}],"author":"susu"},{"title":"在 Emacs 中使用邮件发信","slug":"os/rpm/linux-emacs-mail","date":"2020-01-06T08:48:13.000Z","updated":"2021-12-09T06:24:03.802Z","comments":true,"path":"2020/01/06/os/rpm/linux-emacs-mail/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/os/rpm/linux-emacs-mail/","excerpt":"","text":"Emacs send email Message send email 12345678# for centosyum install mail mailx# for ubuntuapt install mailutils# for windowscygwin--&gt; install mail Meta-x customize-group RET smtp,设置 smtp server smtp port. username and password is located in ~/.authinfo[1] 1234[susu@master]# cat ~/.authinfomachine smtp.163.com login 163email@163.com password MyGeneratedCodeBy163[susu@master]# Note there are tab not space among them, Or you will spend all day long to consider why it doesn’t work. Ctrl-x m invoke email editing, Ctrl-c Ctrl-c to send the email.[2][3] https://www.gnu.org/software/emacs/manual/html_mono/auth.html#index-auth_002dsources-1 ↩︎ https://www.gnu.org/software/emacs/manual/html_mono/smtpmail.html ↩︎ https://www.gnu.org/software/emacs/manual/html_node/smtpmail/index.html ↩︎","categories":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"},{"name":"Emacs","slug":"Emacs","permalink":"http://jsunnyr.github.io/tags/Emacs/"}],"author":"susu"},{"title":"The history of UNIX & Linux","slug":"os/rpm/linux_history","date":"2020-01-06T08:48:13.000Z","updated":"2021-12-05T12:32:55.835Z","comments":true,"path":"2020/01/06/os/rpm/linux_history/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/os/rpm/linux_history/","excerpt":"","text":"Reference Unix History History of UNIX GNU/Linux Distribution Timeline Unix历史流程图 BSD: 加州大学伯克利分校开发 System V： AT&amp;T团队开发 最早unix模型是 AT&amp;T和MIT麻省理工开发 x86-32 BSD-&gt;386/BSD NetBSD-&gt;openBSD 386/BSD FreeBSD-&gt;DragonFlyBSD","categories":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"}],"author":"susu"},{"title":"","slug":"os/rpm/linux_problem","date":"2020-01-06T08:48:13.000Z","updated":"2021-12-05T12:32:55.836Z","comments":true,"path":"2020/01/06/os/rpm/linux_problem/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/os/rpm/linux_problem/","excerpt":"","text":"gentoo在重复编译内核的时候报：warning: Clock skew detected. Your build may be incomplete. vmware linux 从光盘启动 开始启动vmware启动时，由于速度太快设置页面一晃就过去了，多试几次后再如下界面按F2进入Bios设置. VMware的Bios设置界面,根据最下方的提示，用+/-来调整VMware启动系统时加载的顺序，这里从光驱启动的话自然要将CD-ROM Drive放在第一项，然后按F10保存退出，再次启动后就会从光驱启动了。 g++: internal compiler error: Killed (program cc1plus) 12345678sudo dd if=/dev/zero of=/swapfile bs=64M count=16#count的大小就是增加的swap空间的大小，64M是块大小，所以空间大小是bs*count=1024MBsudo mkswap /swapfile#把刚才空间格式化成swap格式sudo swapon /swapfile#使用刚才创建的swap空间sudo swapoff /swapfilesudo rm /swapfile g++: internal compiler error: Killed 查看HBA卡信息 $ systool -c fc_host -v from sysfsutils package $ grep -v “zZzZ” -H /sys/class/fc_host/host*/port_state 查看RAID信息 cat /proc/mdstat dmesg |grep -i raid cat /proc/scsi/scsi","categories":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"}],"author":"susu"},{"title":"","slug":"os/rpm/linux_tool_lrzsz","date":"2020-01-06T08:48:13.000Z","updated":"2021-12-05T12:32:55.839Z","comments":true,"path":"2020/01/06/os/rpm/linux_tool_lrzsz/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/os/rpm/linux_tool_lrzsz/","excerpt":"","text":"lrzsz、lrz、lsz、xshell、secureCRT Xshell SecureCRT 系列 ：串口传输文件 lrzsz 介绍 文件传输协议 文件传输是数据交换的主要形式。在进行文件传输时，为使文件能被正确识别和传送，我们需要在两台计算机之间建立统一的传输协议。这个协议包括了文件的识别、传送的起止时间、错误的判断与纠正等内容。 XMODEM协议[1][2] XMODEM协议,是最早出现的2台计算机间通过RS232异步串口进行文件传输的通信协议标准，相对于YMODEM,ZMODEM等其他文件传送协议来说，XMODEM协议实现简单，适合于那些存储器有限的场合。 XMODEM协议是串行通信中的一种简单的异步文件传输协议,可以作为嵌入式设备bootloader通过串口升级应用时的传输协议。 XMODEM文件发送方将文件分解成128字节的定长数据块，每发送一个数据块，等待对方应答后才发送下一个数据块，数据校验采用垂直累加和校验，也可以采用16位的CRC校验。属于简单ARQ（自动请求重发）协议，所以也适合于2线制的半双工的RS485网络中使用。Xmodeme分为XModem和1k-XModem协议两种，前者使用128字节的数据块，后者使用1024字节即1k字节的数据块。 Ymodem 它包括XMODEM-1K的所有特征。允许批处理文件传输，效率更高。 Zmodem modem则是改进的了Xmodem，只需要对损坏的块进行重发，其它正确的块不需要发送确认字节,减少通信量。 控制字符 符合 ASICII 标准定义，长度均为 1 字节 12345&gt; SOH 0x01&gt; EOT 0x04&gt; ACK 0x06&gt; NAK 0x15&gt; CAN 0x18 SecureCRT下传输协议: ASCII、Xmodem、Ymodem、Zmodem4 ASCII：这是最快的传输协议，但只能传送文本文件。 Xmodem：这种古老的传输协议速度较慢，但由于使用了CRC错误侦测方法，传输的准确率可高达99.6%。 Ymodem：这是Xmodem的改良版，使用了1024位区段传送，速度比Xmodem要快。 Zmodem：Zmodem采用了串流式（streaming）传输方式，传输速度较快，而且还具有自动改变区段大小和断点续传、快速错误侦测等功能。这是目前最流行的文件传输协议。 命令 1234567-- linuxrzsz-- OpenBSDlrb lrx lrzlsb lsx lsz 报错 在服务器上使用rz上传本地的文件到服务器时，出现乱码，并报错 1Zmodem transfer cancelder by remote side 原因 需要对控制字符转义（escape），这可以保证文件传输正确 解决方法 123rz -e orrz -e xxx.tar.gz 个性化 SecureCRT 个性化设置 https://www.cnblogs.com/packer/p/6024444.html ↩︎ http://web.cecs.pdx.edu/~rootd/catdoc/guide/TheGuide_226.html ↩︎","categories":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"}],"author":"susu"},{"title":"MySQL_error","slug":"db/mysql/mysql-error","date":"2020-01-06T08:11:05.000Z","updated":"2021-12-05T12:32:55.848Z","comments":true,"path":"2020/01/06/db/mysql/mysql-error/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/db/mysql/mysql-error/","excerpt":"","text":"error error 解决MYSQL的错误：Got a packet bigger than ‘max_allowed_packet’ bytes 数据库客户端和数据库服务器端器均有自己的max_allowed_packet变量，因此，如你打算处理大的信息包，必须增加客户端和服务器上的该变量配置数值。 一般情况下，服务器默认max-allowed-packet为1MB，客户端的max-allowed-packet为16MB。 [root@ocp init.d]# mysql -hlocalhost -pabcd1234 -S /data/mysql/data/mysqld.sock ERROR 1862 (HY000): Your password has expired. To log in you must change it using a client that supports expired passwords. 很明显报错显示：change it using a client that supports expired passwords ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement 解决方法：alter user root@‘localhost’ identified by ‘abcd1234’;不是update mysql.user set authentication_string=password(‘abcd1234’) where user=‘root’; ERROR 1222 (21000): The used SELECT statements have a different number of columns union/union all 中SELECT 列表中的表达式在数量上必须匹配或是显示使用NULL来补足。","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://jsunnyr.github.io/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://jsunnyr.github.io/tags/MySQL/"}],"author":"susu"},{"title":"iptables in Linux","slug":"os/rpm/os_linux_iptables","date":"2020-01-06T08:05:43.000Z","updated":"2021-12-05T12:32:55.883Z","comments":true,"path":"2020/01/06/os/rpm/os_linux_iptables/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/os/rpm/os_linux_iptables/","excerpt":"","text":"iptables 12345678910111213141516171819[root@master tmp]# cat /etc/redhat-release Red Hat Enterprise Linux Server release 5.1 (Santiago)[root@master tmp]# service iptables startiptables: No config file. [WARNING][root@master tmp]# service iptables statusTable: filterChain INPUT (policy ACCEPT)num target prot opt source destination Chain FORWARD (policy ACCEPT)num target prot opt source destination Chain OUTPUT (policy ACCEPT)num target prot opt source destination[root@master tmp]# service iptables stopiptables: Setting chains to policy ACCEPT: filter [ OK ]iptables: Flushing firewall rules: [ OK ]iptables: Unloading modules: [ OK ] 12345678910vim /etc/sysconfig/iptables-- 永久性生效，重启后不会复原chkconfig iptables on #开启 chkconfig iptables off #关闭 -- 即时生效，重启后复原service iptables stop --停止service iptables start --启动 [!NOTE] Reference https://blog.51cto.com/13677371/2094355 http://www.zsythink.net/archives/1199/ https://www.cnblogs.com/alimac/p/5848372.html","categories":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"},{"name":"iptables","slug":"iptables","permalink":"http://jsunnyr.github.io/tags/iptables/"}],"author":"susu"},{"title":"gitbook_plugin","slug":"gitbook-plugin","date":"2020-01-06T05:43:54.000Z","updated":"2021-12-05T12:32:55.772Z","comments":true,"path":"2020/01/06/gitbook-plugin/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/gitbook-plugin/","excerpt":"","text":"Gitbook Pluginsback-to-top-buttonchapter-foldexpandable-chapters-smallexpandable-chapterscodecopy-code-buttontodoinsert-logosearch-proadvanced-emojigithubemphasizesplittersharing-plustbfed-pagefooterpage-copyrightsectionxpage-treeviewsimple-page-tocpage-toc-buttonancre-navigationklipsedonatechange_girlsalertsflexible-alertspageview-countauto-scroll-tablepopuplightboxclick-revealcustom-faviconaccordionhide-element","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://jsunnyr.github.io/tags/git/"}],"author":"susu"},{"title":"Perl","slug":"perl","date":"2020-01-06T04:27:49.000Z","updated":"2021-12-05T12:32:55.885Z","comments":true,"path":"2020/01/06/perl/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/perl/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031# CPAN 配置文件所在[root@localhost] yum -y install perl-CPAN[root@localhost] pwd/root/.cpan/CPAN/MyConfig.pm[root@localhost][root@localhost] perl -MCPAN -e shell# 查看配置信息cpan&gt; o conf# 查看源cpan&gt; o conf urllist# 添加源cpan&gt; o conf urllist push https://mirrors.aliyun.com/CPAN/# 一次添加多个源cpan&gt; o conf urllist ftp://mirrors.sohu.com/CPAN/ https://mirrors.163.com/cpan/# 删除源cpan&gt; o conf urllist pop 2# 一次删除多个源cpan&gt; o conf urllist pop https://mirrors.163.com/cpan/ ftp://mirrors.sohu.com/CPAN/再次查看当前源信息# 递交更改cpan&gt; o conf commit# 初始化CPANcpan&gt; o conf init# cpan查看模块[root@localhost] cpan -i Module_name# 检查模块是否安装成功,无任何返回表示成功，否则报错[root@localhost] perl -Mmodule_name -e1 12345678910111213141516171819202122232425[root@master ~]# cpan -i Sys::SyslogReading &#x27;/root/.cpan/Metadata&#x27; Database was generated on Wed, 18 Dec 2019 03:55:15 GMTSys::Syslog is up to date (0.36).pm# perl查看帮助文件# 显示所有内置文档的目录[root@localhost] perldoc perltoc#主要描述Perl的基本语法[root@localhost] perldoc perlsyn# 阅读关于Perl内置函数的用法[root@localhost] perldoc perlfunc# 阅读该函数相关的内容[root@localhost] perldoc -f split # 阅读模块内嵌的文档[root@localhost] perldoc Module_name# 查询模块安装位置[root@master ~]# perldoc -l Sys::Syslog/root/perl5/lib/perl5/x86_64-linux-thread-multi/Sys/Syslog.pm# 查看模块源代码[root@localhost] perldoc -m Module_name# 搜索相关主题[root@localhost] perldoc -q keyword perlfaq 常见问题perltoc 文档内容表perldata Perl数据结构perlsyn Perl 语法perlop Perl 运算符及优先级perlre Perl 正则表达式perlrun 运行Perl内部函数perlopentut Perl open() 函数使用指导perlvar Perl 内部变量perlsub Perl 子程序perlmod Perl 模块: 他们是如何工作的perlmodlib Perl 模块: 怎么样写和使用PERL模块perlmodinstall Perl 模块: 怎样安装来自CPAN的模块perlform Perl 格式化perlunicode Perl 对unicode的支持perllocale Perl 对locale的支持perlreftut Perl 引用的简单介绍perlref 关于Perl 引用的更多知识perldsc Perl 数据结构介绍perllol Perl 数据结构:数组的数组perlboot Perl 面向对象基础教程perltoot Perl 新手指南, 第1部分perltootc Perl 新手指南,第2部分perlobj Perl 对象perltie Perl 隐藏在简单变量之后的对象perlbot Perl 技巧与实例perlipc Perl 进程间通讯perlfork Perl fork() 函数的知识perlthrtut Perl 线程指南perllexwarn Perl 的警告与控制perlfilter Perl 过滤源代码perldbmfilter Perl DBM 过滤器perlcompile Perl 编译套件介绍perldebug Perl 调试perldiag Perl 诊断信息perlnumber Perl 数字的语义perlsec Perl 安全perltrap Perl 无意的陷阱perlport Perl 便利性指导perlstyle Perl 风格指导perlpod Perl 老的文本文档perlbook Perl 书籍信息perlembed Perl 在你的C，C＋＋程序中嵌入PERLperlapio Perl 内部IO抽象接口perldebguts Perl 调试技巧perlxs Perl XS 应用程序接口perlxstut Perl XS 指南perlguts Perl 用于扩展的内部函数perlcall Perl 从C语言继承的风格perlapi Perl API 列表 (自动生成的)perlintern Perl 内部函数 (自动生成的)perltodo Perl 要做的事perlhack Perl hackers指导perlhist Perl 历史记录perlamiga Perl 对于Amiga需注意的事项perlcygwin Perl 对于Cygwin需注意的事项perldos Perl 对于DOS需注意的事项perlhpux Perl 对于HP-UX需注意的事项perlmachten Perl 对于Power MachTen需注意的事项perlos2 Perl 对于OS/2需注意的事项perlos390 Perl 对于OS/390需注意的事项perlvms Perl 对于VMS需注意的事项perlwin32 Perl 对于Windows需注意的事项 字符串相关函数: split, join, substr, chomp 数组相关函数：shift, pop, unshift, push, scalar, length 哈希相关函数：keys,values, exists 其他函数： sort, reverse Perl输出用print,printf Perl语句需要分号；结尾 Perl单行注释# 使用 POD(Plain Old Documentations) 来进行多行注释=pod =cut Perl 程序有声明与语句组成，程序自上而下执行，包含了循环，条件控制，每个语句以分号 (;) 结束 Perl 解释器不会关心有多少个空白,可有可无空格 所有类型的空白如：空格，tab ，空行等如果在引号外解释器会忽略它，如果在引号内会原样输出。 perl 输出字符串可以使用单引号和双引号 Perl双引号和单引号的区别: 双引号可以正常解析一些转义字符与变量，而单引号无法解析会原样输出 需要输出一个特殊的字符，可以使用反斜线（\\）来转义 HERE文档 Perl 是一种弱类型语言，所以变量不需要指定类型，Perl 解释器会根据上下文自动选择匹配类型。 Perl 有三个基本的数据类型：标量、数组、哈希 标量是 Perl 语言中最简单的一种数据类型。这种数据类型的变量可以是数字，字符串，浮点数，不作严格的区分。在使用时在变量的名字前面加上一个 $，表示是标量 数组变量以字符 @ 开头，索引从 0 开始，如：@arr=(1,2,3) 哈希是一个无序的 key/value 对集合。可以使用键作为下标获取值。哈希变量以字符 % 开头 变量不需要显式声明类型，在变量赋值后，解释器会自动分配匹配的类型空间。 变量使用等号(=)来赋值，变量定义需要$ 命令use strict意味着所有变量必须用my来声明，裸单词必须用引号括起来 Perl v字符串 Perl 串行与数组 Perl引用就是指针，Perl 引用是一个标量类型可以指向变量、数组、哈希表（也叫关联数组）甚至子程序，可以应用在程序的任何地方 Perl中，||, =, or 这三者优先级从左至右逐渐降低。 在PERL开发中，通常可以用system函数或 ``操作符来执行系统命令,但对于shell内部命令（即在文件系统中无执行文件的命令）这样直接执行会出错，错误是无法找到该文件或目录。可以在命令前加sh –c来实现。而对cd、umask等SESSION型命令，应该用PERL的内部函数chdir、umask等来实现功能更可靠。 Perl基本语法Perl文件操作Perl目录操作Perl错误处理Perl特殊变量 @_ $_ $! $# $` $&amp; $’ $$Perl正则表达式Perl邮件Perl Socket编程","categories":[],"tags":[{"name":"Perl","slug":"Perl","permalink":"http://jsunnyr.github.io/tags/Perl/"}],"author":"susu"},{"title":"Linux 基础理论","slug":"os/rpm/os-linux","date":"2020-01-06T04:26:13.000Z","updated":"2021-12-05T12:32:55.882Z","comments":true,"path":"2020/01/06/os/rpm/os-linux/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/os/rpm/os-linux/","excerpt":"","text":"硬件管理 硬件信息 lspci lshw dmesg dmidecode 123456789dmidecode -s system-product-namedmidecode | grep &#x27;Product Name&#x27;dmidecode | grep -i &#x27;system information&#x27; -A9dmidecode -i 0,1,2,4dmidecode | grep &quot;Memory Device&quot; -A5 | grep -i size | grep -v Range CPU lscpu getconf LONG_BIT cat /proc/cpuinfo | grep flags | grep ‘lm’ | wc -l 12345678grep -i &#x27;physical id&#x27; /proc/cpuinfo | uniqgrep -i &#x27;cores&#x27; /proc/cpuinfo | uniqgrep -i &#x27;processor&#x27; /proc/cpuinfo | uniqgrep -i &#x27;sibling&#x27; /proc/cpuinfo | uniq 内存 cat /proc/meminfo dmidecode | grep “Memory Device” -A5 | grep -i size | grep -v Range swapon -s 显卡 glxinfo/glxgears 声卡 /proc/asound/cards lspci | grep audio lshw | grep sound aplay -l alsactl -v HBA卡 硬盘 lsblk blkid fdisk -l fdisk -l | grep Disk mount | column -t smartctl -a /dev/sdxxx 驱动模块 1234567modinfolsmodinsmod/modprobermmod ls /sys/bus/ ls /dev/ Performance /proc/cpuinfo /proc/meminfo /proc/loadavg /proc/devices /proc/modules grep -c ‘processor’ /proc/cpuinfo grep -i mem /proc/meminfo procinfo iotop sar 1234567891011121314151617sar -usar -qsar -rsar -Psar -P 0sar -P ALLsar -b (i/o)sar -n DEVsar -f free 12345freefree -kfree -m vmstat 123vmstatvmstat 1 5 mpstat 1234567mpstatmpstat 2 10mpstat -P ALL 1 iostat 1234567891011iostat 1 5iostat -diostat -d 1 5iostat -xiostat -x 1 10 java 12345uptimetoptop -Hp pid_processprintf %x pid_threadjstack pid_process | grep -A 200 mem_addr_%x_get_from_above 用户管理 /etc/passwd /etc/shadow /etc/group /etc/pam.d/system-auth-ac /etc/pam.d/password-auth-ac /etc/login.defs /var/spool/cron/user_name /etc/skel/ /etc/default/useradd echo 用户名:密码 | chpasswd 权限管理 UGO SUID SGID SBIT 网络管理 /etc/sysconfg/network-scripts/ifcg-* /etc/sysconfig/network /etc/hostname /etc/resolv.conf /etc/hosts lspci | grep -i eth cat /proc/net/dev ifconfig -a setup(永久配置IP，但是服务需要重启) hostname 1234567hostname xxx(临时生效)hostnamectl set-hostname=xxxx(永久生效)vim /etc/hostname(永久生效)vim /etc/sysconfig/network(永久生效) route 1route -n netstat 123456789101112131415161718192021222324252627netstat -lnpnetstat -annetstat -innetstat -tunlp -t (tcp) 仅显示tcp相关选项 -u (udp)仅显示udp相关选项 -n 拒绝显示别名，能显示数字的全部转化为数字 -l 仅列出在Listen(监听)的服务状态 -p 显示建立相关链接的程序名netstat -tunapnetstat -lnt | grep 22netstat -tunlp | grep -w 21ss | grep ssh ip 12345ip aip a ship -4 a nmcli nmtui tcpdump ethtool eth_name mii-tool eth_name 看本机网卡是否连接正常 iptraf 查看本机当前的流量 watch -n 1 “/sbin/ifconfig eth_name | grep bytes” ifstat traceroute 路由管理 网卡多IP(网络别名) 多网卡Link配置(网卡绑定) 启动管理 chkconfig systemctl 内核管理 mkinitrd dracut 进程管理 进程查看 进程运行 进程挂起 挂起进程作业前台/后台 进程作业后台运行 ps 12345ps -aux | grep pid_pidps -eo comm,size --sort -size | head -n 10ps -eo comm,pcpu --sort -pcpu | head -n 10 top 12345top -bn1top -p pid_pidpmap -x pid_pid lsof 123456789101112131415lsof -i:port_numlsof -u usernamelsof -c program_namelsof -p pid_pidlsof file_namelsof | grep deletedfuser -c /path-or-file_namecat /proc/$process_id/status strace -p pid_pid pgrep httpd 查询这个服务的所有进程号 ldd binary_program_name 显示当前这个命令运行时所需要的库文件 strace +服务名称 分析出当前的命令执行时所找的库文件的路径 screen Ctrl + a， d 退出会话 Ctrl + d， exit 结束会话 pgrep pkill pidof dstat 文件管理 find sort awk/sed 工作管理 jobs fg bg nohup &amp; at batch crontab 磁盘与文件系统管理 sync echo 3 &gt; /proc/sys/vm/drop_caches 存储池 LVM(disk-&gt;pv-vg-&gt;lv-&gt;-mkfs-/mount_point) FS(disk-&gt;mkfs-&gt;/mount) df 12345df -mdf -kdf -i xargs ls | xargs -n1 -i{} mv {} {}.bak 系统日志管理 /var/log/journal /etc/logrotate.conf tail -f filename journalctl 123456789journalctl -n 3(date_num_wanted_to_check)journalctl -p errjournalctl -o verbosejournalctl --since time_wanted_to_checkjournalctl --util time_wanted_to_check SELinux /etc/selinux/config /etc/sysconfig/selinux DAC: Discretionary Access Control MAC: Mandatory Access Control 可信计算机系统评估准侧 setenforce 1/0 getenforce sestatus selinuxenabled 返回值0表示开启，1表示关闭 getsebool -a semanage boolean -l setsebool -P 1/0 sestatus -b ls -Z 查看文件上下文 ps -eZ( ps -eM) 查看进程上下文 id -Z 查看用户上下文 SELinux拒接 发生SELinux拒接，可通过审计工具查看/var/log/audit/audit.log日志 1234567audit2why &lt; /var/log/audit/audit.logaudit2allow &lt; /va/log/audit/audit.logsetroubleshootdsealeart -b 打标签 123semanage fcontext -a -t httpd_sys_content_t &#x27;/var/www/html(/.*)?&#x27;restorecon -Rv /var/www/html 1chcon --reference=/file_name file_name 服务管理 Apache 12345678910111213141516171819202122232425262728293031323334353637383940414243配置cronolog进行日志轮询错误页面优雅显示mod_deflate文件压缩功能mod_expires缓存功能更改apache的默认用户worker模式，提升并发数（可以达到2000-5000）屏蔽apache版本等敏感信息apache目录文件权限设置（root，目录755，文件644）开启httpd-mpm.conf 增加连接数apache防盗链功能禁止目录Index 禁止用户覆盖(重载）关闭CGI避免使用.htaccess文件（分布式配置文件） apache的安全模块正确途径取得源代码，勤打apache补丁apache日志授予root 700权限系统内核参数优化禁止PHP解析指定站点的目录使用tmpfs文件系统替代频繁访问的目录尽可能减少 HTTP 请求数使用CDN做网站加速 时钟同步 /etc/chrony.conf /etc/ntp.conf chrony 12chronyc source -v ntp 12ntpd server timedatectl 123456789timedatectl statustimedatectl set-timetimedatectl set-timezonetimedatectl list-timezonestimedatectl set-local-rtc 0/1 设置是否支持UTC SSH HOME/.ssh/knownhostsHOME/.ssh/known_hosts HOME/.ssh/known​h​​ostsHOME/.ssh/id_rsa HOME/.ssh/idrsa.pub/etc/ssh/HOME/.ssh/id_rsa.pub /etc/ssh/ HOME/.ssh/id​r​​sa.pub/etc/ssh/HOME/.ssh/authorized_keys ssh-keygen ssh-copy-id user@remote 绑定本地端口 本地端口转发 动态端口转发 内容分发 安全管理 /etc/passwd /etc/group /var/adm/sulog /etc/security/passwd /etc/security/user /etc/security/group /etc/security/login.cfg /etc/security/limits /etc/security/lastlog /etc/motd /etc/ssh/sshd_config 设备管理 lsdev lsattr lscfg prtconf 存储管理 文件系统管理 内存管理(页空间管理) 备份与恢复 系统备份 ##文件系统备份 卷组备份 数据备份 数据库备份 备份策略 完全备份 增量备份 差量备份(差异备份) 备份介质 软盘 3.5寸盘 5.25寸盘 光盘 磁盘 磁带 4mm 磁带磁盘 8mm 磁带磁盘 存储","categories":[{"name":"OS","slug":"OS","permalink":"http://jsunnyr.github.io/categories/OS/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"},{"name":"OS","slug":"OS","permalink":"http://jsunnyr.github.io/tags/OS/"}],"author":"susu"},{"title":"Winlogbeat","slug":"win/winlogbeat","date":"2020-01-06T04:02:40.000Z","updated":"2021-12-07T00:56:04.736Z","comments":true,"path":"2020/01/06/win/winlogbeat/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/win/winlogbeat/","excerpt":"","text":"How to install Winlogbeat on Windows 123456789101112PS C:\\Program Files\\Winlogbeat&gt; .\\install-service-winlogbeat.ps1-- 如果在系统上禁用了脚本执行，则需要为当前会话设置执行策略以允许脚本运行PowerShell.exe -ExecutionPolicy UnRestricted -File .\\install-service-winlogbeat.ps1PS C:\\Program Files\\Winlogbeat&gt; set-executionpolicy remotesignedPS C:\\Program Files\\Winlogbeat&gt; set-executionpolicy Bypass PS C:\\Program Files\\Winlogbeat&gt; .\\winlogbeat.exe test config -c .\\winlogbeat.yml -ePS C:\\Program Files\\Winlogbeat&gt; Start-Service winlogbeatPS C:\\Program Files\\Winlogbeat&gt; Get-Process | findstr winlogbe Reference [https://www.jianshu.com/p/1e4266af6202] [https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-modules-overview.html] [https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-modules-quickstart.html] [https://www.elastic.co/guide/en/beats/filebeat/current/directory-layout.html] [https://www.elastic.co/guide/en/beats/winlogbeat/current/winlogbeat-getting-started.html] [https://www.elastic.co/cn/downloads/beats/winlogbeat] [https://blog.csdn.net/vip100549/article/details/79592409] [https://blog.csdn.net/weixin_40467243/article/details/80562495]","categories":[],"tags":[{"name":"logstash","slug":"logstash","permalink":"http://jsunnyr.github.io/tags/logstash/"}],"author":"susu"},{"title":"ruby_installation","slug":"ruby-installation","date":"2020-01-06T03:15:44.000Z","updated":"2021-12-05T12:32:55.892Z","comments":true,"path":"2020/01/06/ruby-installation/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/ruby-installation/","excerpt":"","text":"Rubyfor common use, we can type yum install -y ruby ruby-devel ruby-docs ruby-ri ruby-rdoc rubygems to install ruby. But some other error unknown occurs. So use [rvm](http://rvm.io/) or rbenv to install Ruby and then install rails 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283-- 删除默认源# gem sources --remove https://rubygems.org/-- 添加源# gem sources -a https://gems.ruby-china.org# gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/https://gems.ruby-china.com/ added to sourceshttps://rubygems.org/ removed from sources# gem sources -l*** CURRENT SOURCES ***https://gems.ruby-china.com/# gem sources -u source cache successfully updated-- 更新 gem 本身# gem update --system-- 更新所有程序包# gem update--查看 gem 安装环境gem environment-- 查看ruby 版本ruby -vruby -e &#x27;&#x27;require&quot;watir&quot;; puts Watir::IE::VERSION&#x27;&#x27; #查看watir版本-- 查看gem版本gem -v-- 安装rake,从本地或远程服务器gem install rake-- 安装rake,从远程服务器gem install rake --remote-- 指定安装版本的gem install watir -v(或者--version) 1.6.2-- 卸载rake包gem uninstall rake-- 列出本地以d打头的包gem list d-- 查找本地含有数字的包gem query -n &#x27;&#x27;[0-9]&#x27;&#x27; --local-- 从本地和远程服务器上查找含有log字符串的包gem search log --both-- 只从远程服务器上查找含有log字符串的包gem search log --remoter-- 只从远程服务器上查找含有log字符串的包gem search -r log-- 提醒式的帮助gem help-- 列出install命令 帮助gem help install-- 列出gem命令使用一些例子gem help examples-- 把rake.gemspec编译成rake.gemgem build rake.gemspec-- 检测rake是否有效gem check -v pkg/rake-0.4.0.gem-- 清除所有包旧版本，保留最新版本gem cleanup-- 显示rake包中所包含的文件gem contents rake-- 列出与rails相互依赖的包gem dependency rails -v 0.10.1 编译安装ruby1234567# lynx http://www.ruby-lang.org/en/downloads/# tar -zxvf ruby-Version.tar.gz# cd ruby-Version# ./configure# make &amp;&amp; make install# ruby -v","categories":[],"tags":[{"name":"Ruby","slug":"Ruby","permalink":"http://jsunnyr.github.io/tags/Ruby/"}],"author":"susu"},{"title":"npm_installation","slug":"npm-installation","date":"2020-01-06T02:52:25.000Z","updated":"2021-12-05T12:32:55.857Z","comments":true,"path":"2020/01/06/npm-installation/","link":"","permalink":"http://jsunnyr.github.io/2020/01/06/npm-installation/","excerpt":"","text":"nodejsfor common use, we just type yum install nodejs is OK, but node version is low, so we need try to install latest Nodejs on CentOS [!NOTE]for suggestion 123456lynx https://nodejs.org/en/download/wget nodejs-version.tar.gzmkdir /opt/nodejs./configure --prefix=/opt/nodejsmake &amp;&amp; make installnode -v npmWhen we try to download and install some package, we hope a fast registry https://registry.npm.taobao.org. 123[root@master ~]# npm config set registry https://registry.npm.taobao.org[root@master ~]# npm config get registryhttps://registry.npm.taobao.org/ HEXOHEXO can help us build a blog site. official site : HEXOofficial theme : HEXO theme 12345678-- step to init blog[root@localhost]# npm install hexo-cli -g[susu@localhost]$ hexo init blog[susu@localhost]$ cd blognpm installhexo server[root@localhost]# npm install --save hexo-deployer-git[root@localhost]# hexo deploy [!NOTE]when you are supposed to deploy to github, make configuration.filename: _config.yml 1234deploy: type: git repo: git@github.com:user/user.github.io.git branch: master hexo 相关指令 1234567891011121314151617hexo generate (hexo g) 生成静态文件hexo server (hexo s) 启动本地服务hexo deploy (hexo d) 提交到远程仓库hexo new page &quot;xx&quot;(hexo n page) 创建页面 hexo new &quot;xx&quot; (hexo n &quot;&quot;) 创建文章hexo d -g 生成静态并提交到远程仓库hexo s -g 生成静态文件并启动本地预览hexo clean 清除本地 public 文件npm install hexo-renderer-pug hexo-renderer-stylusnpm install cheerio@0.22.0 --savenpm install hexo-generator-searchdb --savenpm install hexo-tag-bootstrap --savenpm install hexo-tag-fontawesome --savenpm install hexo-deployer-git --savenpm install hexo-generator-sitemap --savenpm install hexo-generator-feed --savenpm install hexo-generator-baidu-sitemap --save","categories":[{"name":"JS","slug":"JS","permalink":"http://jsunnyr.github.io/categories/JS/"}],"tags":[{"name":"npm","slug":"npm","permalink":"http://jsunnyr.github.io/tags/npm/"}],"author":"susu"},{"title":"小工具：xls2csv","slug":"Linux-xls2csv","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-08T05:46:16.806Z","comments":true,"path":"2019/09/01/Linux-xls2csv/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/Linux-xls2csv/","excerpt":"","text":"Prefix installation Usage Prefix xls2csv xls2csv is a perl script to convert xls to csv. installation 123456789101112131415[root@localhost] perl -MCPAN -e shellcpan&gt; install Locale::Recodecpan&gt; install Unicode::Mapcpan&gt; install Spreadsheet::ParseExcelcpan&gt; install Text::CSV_XScpan&gt; q[root@localhost] wget https://cpan.metacpan.org/authors/id/K/KE/KEN/xls2csv-1.07.tar.gz[root@localhost] tar -zxvf xls2csv-1.07.tar.gz[root@localhost] cd xls2csv-1.07[root@localhost] perl Makefile.pl[root@localhost] make[root@localhost] make test[root@localhost] make install[root@localhost] whereis xls2csv[root@localhost] which xls2csv Usage type xls2csv -h to get help from xls2csv inside. 1[root@localhost] xls2csv -x file.xls -b encoding_type -c output.csv -b encoding_type","categories":[{"name":"tools","slug":"tools","permalink":"http://jsunnyr.github.io/categories/tools/"}],"tags":[{"name":"xls2csv","slug":"xls2csv","permalink":"http://jsunnyr.github.io/tags/xls2csv/"}]},{"title":"CMD batch programming","slug":"programming-cmd","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-07T01:00:44.387Z","comments":true,"path":"2019/09/01/programming-cmd/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/programming-cmd/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122cmd CMD命令提示符devmgmt.mscMSConfig 系统配置实用程序regedit 注册表编辑器notepad 打开记事本calc 启动计算器mstsc 远程桌面连接services.msc 系统服务gpedit.msc 组策略shutdown 60秒倒计时关机命令Nslookup -IP地址侦测器explorer 打开资源管理器chkdsk.exe Chkdsk磁盘检查dcomcnfg 打开系统组件服务devmgmt.msc 设备管理器cleanmgr 垃圾整理compmgmt.msc 计算机管理secpol.msc 本地安全策略netstat -an (TC)命令检查接口taskmgr 任务管理器mmc 打开控制台logoff 注销命令lusrmgr.msc 本机用户和组dvdplay DVD播放器diskmgmt.msc 磁盘管理实用程序dxdiag 检查DirectX信息perfmon.msc 计算机性能检测程序winver 检测Windows版本write 写字板wiaacmgr 扫描仪和照相机向导mspaint 画图板magnify 放大镜实用程序utilman 辅助工具管理器osk 打开屏幕键盘odbcad32 ODBC数据源管理器Sndvol32或Sndvol 音量控制程序sfc.exe 系统文件检查器sfc /scannow Windows文件保护eventvwr 事件查看器cliconfg SQL Server客户端网络实用程序certmgr.msc 证书管理实用程序lusrmgr.mscdiskmgmt.mscdevmgmt.msccompmgmt.mscinetcpl.cplsysdm.cplncpa.cpleventvwr.exewinver.exever.exe使用 Win键+其他键组合：Win键：打开“开始”菜单Win键+E：打开我的电脑Win键+R：打开运行对话框Win键+D：显示桌面Win键+M：最小化所有窗口Win键+X：Windows移动中心，调节音量，屏幕亮度Win键+Home：除了正在选择的窗口，其他窗口最小化Win键+PAUSE BREAK：打开“系统属性”对话框Win键+【+/-】：打开Windows放大、缩小功能Win键+Pause：显示系统属性对话框Win键+TAB：Aero三维效果切换程序Win键+数字键：让位于任务栏上的程序打开（数字为序号）Win键+P：选择一个演示文稿显示模式，可以用来关闭屏幕Win键+L：锁定计算机，需要输入密码或者选择其他用户Win键+T：多次按可以在多个程序间顺序切换Win键+F：计算机搜索，可以搜索计算机里面所有文件Win键+【←/→】：在屏幕左/右半个屏幕最大化Win键+【↑/↓】：最大化/最小化get-helpget-commandget-processget-historyget-jobget-formatdataget-eventget-aliasget-cultureget-dateget-hostget-memberget-randomget-uicultureget-uniqueget-variableget-eventlogget-childitemget-contentget-itempropertyget-wmiobjectget-locationget-PSDriveget-itemget-processget-serviceget-transactionget-executionpolicyset-aliasset-PSDebugset-StrictModeset-dateset-variableset-PSBreakpointset-Locationset-Itemset-Serviceset-Contentset-itempolicyset-WmiInstanceset-ExecutionPolicywrite-hostwrite-processwrite-debugwrite-verbosewrite-warningwrite-errorwrite-outputwrite-eventlog","categories":[{"name":"Programming","slug":"Programming","permalink":"http://jsunnyr.github.io/categories/Programming/"},{"name":"CMD","slug":"Programming/CMD","permalink":"http://jsunnyr.github.io/categories/Programming/CMD/"}],"tags":[{"name":"CMD","slug":"CMD","permalink":"http://jsunnyr.github.io/tags/CMD/"}]},{"title":"Oracle library cache","slug":"ansible/ansible-01-ping-error-连通性测试错误","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-10T04:06:58.295Z","comments":true,"path":"2019/09/01/ansible/ansible-01-ping-error-连通性测试错误/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/ansible/ansible-01-ping-error-%E8%BF%9E%E9%80%9A%E6%80%A7%E6%B5%8B%E8%AF%95%E9%94%99%E8%AF%AF/","excerpt":"","text":"Connection timed out during banner exchange 123456789101112131415161718# inventory.yml10.238.4.45 ansible_ssh_common_args=&#x27;-o ProxyCommand=&quot;ssh -W %h:%p -q ansible@10.238.81.239&quot;&#x27;10.246.3.11 ansible_ssh_common_args=&#x27;-o ProxyCommand=&quot;ssh -W %h:%p -q ansible@10.246.81.162&quot;&#x27;# pb.yml---- hosts: all become: true become_user: root gather_facts: True tasks: - name: pwd shell: pwd register: location - name: debug out debug: msg: &quot;&#123;&#123; location &#125;&#125;&quot; 12345678910# output 110.238.4.45 UNREACHABLE! =&gt; &#123;&quot;changed&quot;: false, &quot;msg&quot;: &quot;Authentication or permission failure. In some cases, you may have been able to authenticate and did not have permissions on the target directory. Consider changing the remote tmp path in ansible.cfg to a path rooted in \\&quot;/tmp\\&quot;. Failed command was: ( umask 77 &amp;&amp; mkdir -p \\&quot;` echo ~/.ansible/tmp/ansible-tmp-1637588359.02-24546627978751 `\\&quot; &amp;&amp; echo ansible-tmp-1637588359.02-24546627978751=\\&quot;` echo ~/.ansible/tmp/ansible-tmp-1637588359.02-24546627978751 `\\&quot; ), exited with result 1&quot;, &quot;unreachable&quot;: true&#125;# output 2[ansible@master tmp]$ ansible -i inventory.yml all -m ping10.238.4.45 | UNREACHABLE! =&gt; &#123; &quot;changed&quot;: false, &quot;msg&quot;: &quot;Failed to connect to the host via ssh: Connection timed out during banner exchange&quot;, &quot;unreachable&quot;: true&#125; ssh_exchange_identification: Connection closed by remote host 110.204.91.34 ansible_ssh_common_args=&#x27;-o ProxyCommand=&quot;ssh -W %h:%p -q ansible@10.204.91.239&quot;&#x27; 123456789101112# output 1fatal: [10.204.91.34]: UNREACHABLE! =&gt; &#123;&quot;changed&quot;: false, &quot;msg&quot;: &quot;Failed to connect to the host via ssh: ssh_exchange_identification: Connection closed by remote host&quot;# [ansible@master tmp]$ ansible -i inventory.yml all -m ping10.204.91.34 | SUCCESS =&gt; &#123; &quot;ansible_facts&quot;: &#123; &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot; &#125;, &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;&#125; setup module failed 1234567891011121314151617# inventory.yml# pb.yml---- hosts: all become: true become_user: root gather_facts: True tasks: - name: pwd shell: pwd register: location - name: debug out debug: msg: &quot;&#123;&#123; location &#125;&#125;&quot; 1234567891011# outputfatal: [10.231.213.42]: FAILED! =&gt; &#123;&quot;ansible_facts&quot;: &#123;&quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;&#125;, &quot;changed&quot;: false, &quot;module_stderr&quot;: &quot;Shared connection to 10.231.213.42 closed.\\r\\n&quot;, &quot;module_stdout&quot;: &quot;sudo: a password is required\\r\\n&quot;, &quot;msg&quot;: &quot;MODULE FAILURE\\nSee stdout/stderr for the exact error&quot;, &quot;rc&quot;: 1&#125;# succeed outpu10.231.213.42 | SUCCESS =&gt; &#123; &quot;ansible_facts&quot;: &#123; &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot; &#125;, &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;&#125; ansible playbook在执行过程中卡住 这种情况下，并不知道ansibe 当前执行到的主机是哪一台，无法进行下去。 12310.232.17.69 ansible_ssh_common_args=&#x27;-o ProxyCommand=&quot;ssh -W %h:%p -q ansible@10.232.81.239&quot;&#x27;10.232.17.82 ansible_ssh_common_args=&#x27;-o ProxyCommand=&quot;ssh -W %h:%p -q ansible@10.232.81.239&quot;&#x27;10.232.17.80 ansible_ssh_common_args=&#x27;-o ProxyCommand=&quot;ssh -W %h:%p -q ansible@10.232.81.239&quot;&#x27; 123456789101112131415161718192021222324[ansible@master tmp]$ ansible -i inventory.yml all -m ping10.232.17.80 | SUCCESS =&gt; &#123; &quot;ansible_facts&quot;: &#123; &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot; &#125;, &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;&#125;10.232.17.82 | SUCCESS =&gt; &#123; &quot;ansible_facts&quot;: &#123; &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot; &#125;, &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;&#125;...卡住不动了10.232.17.69 ansible_ssh_common_args=&#x27;-o ProxyCommand=&quot;ssh -W %h:%p -q ansible@10.232.81.239&quot;&#x27;然而，10.232.17.69上有代理用户ansible并且跟10.232.81.239代理是联通的。^C [ERROR]: User interrupted execution```","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"Oracle Controlfile 控制文件","slug":"kvm/kvm-01-bridge-configuration-网桥配置","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-08T04:22:13.398Z","comments":true,"path":"2019/09/01/kvm/kvm-01-bridge-configuration-网桥配置/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/kvm/kvm-01-bridge-configuration-%E7%BD%91%E6%A1%A5%E9%85%8D%E7%BD%AE/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152[root@ksqit0102m network-scripts]# cd /etc/sysconfig/network-scripts/[root@ksqit0102m network-scripts]# ls -lrth | tail -12 | sort -k9-rw-r--r-- 1 root root 165 Jan 7 2021 ifcfg-bond0-rw-r--r-- 1 root root 98 Jan 7 2021 ifcfg-bond1-rw-r--r-- 1 root root 99 Jan 25 2021 ifcfg-bond1.3681-rw-r--r-- 1 root root 100 Aug 27 10:22 ifcfg-bond1.3684-rw-r--r-- 1 root root 99 Jan 25 2021 ifcfg-bond1.3901-rw-r--r-- 1 root root 111 Jan 25 2021 ifcfg-br3681-rw-r--r-- 1 root root 111 Aug 27 10:23 ifcfg-br3684-rw-r--r-- 1 root root 110 Jan 25 2021 ifcfg-br3901-rw-r--r-- 1 root root 311 Jan 7 2021 ifcfg-enp61s0f0-rw-r--r-- 1 root root 311 Jan 7 2021 ifcfg-enp61s0f1-rw-r--r-- 1 root root 85 Jan 7 2021 ifcfg-ens1f0-rw-r--r-- 1 root root 85 Jan 7 2021 ifcfg-ens4f0[root@ksqit0102m network-scripts]# cat ifcfg-bond0DEVICE=bond0IPADDR=10.207.83.21NETMASK=255.255.255.0GATEWAY=10.207.83.254BOOTPROTO=noneUSERCTL=noBONDING_OPTS=&quot;mode=1 miimon=100 primary=enp61s0f0&quot;HOTPLUG=no[root@ksqit0102m network-scripts]# cat ifcfg-enp61s0f0TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=noneDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=enp61s0f0UUID=39a8362a-2f2a-40e7-acbb-017147930f1aDEVICE=enp61s0f0ONBOOT=yesSLAVE=yesMASTER=bond0[root@ksqit0102m network-scripts]# cat ifcfg-enp61s0f1TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=dhcpDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=enp61s0f1UUID=f16d05c9-e27c-44a7-a617-343da8e27c67DEVICE=enp61s0f1ONBOOT=yesSLAVE=yesMASTER=bond0[root@ksqit0102m network-scripts]# cat ifcfg-bond1.3681DEVICE=bond1.3681NAME=&quot;VLAN3681 sqit 10.207.81&quot;BOOTPROTO=noneUSERCTL=noVLAN=yesBRIDGE=&#x27;br3681&#x27;ONBOOT=yes[root@ksqit0102m network-scripts]# cat ifcfg-br3681DEVICE=&#x27;br3681&#x27;NAME=&quot;Br3681 vlan3681 10.207.81&quot;NM_CONTROLLED=&#x27;yes&#x27;ONBOOT=&#x27;yes&#x27;TYPE=&#x27;Bridge&#x27;BOOTPROTO=none[root@ksqit0102m ~]# brctl showbridge name bridge id STP enabled interfacesbr3681 8000.f010907f853d no bond1.3681br3684 8000.f010907f853d no bond1.36842222222eth02222222vnet02222222vnet12222222vnet22222222vnet32222222vnet42222222vnet52222222vnet62222222vnet72222222vnet8br3901 8000.f010907f853d no bond1.3901virbr0 8000.5254000289d9 yes virbr0-nic[root@ksqit0102m ~]# df -THFilesystem Type Size Used Avail Use% Mounted ondevtmpfs devtmpfs 270G 0 270G 0% /devtmpfs tmpfs 270G 0 270G 0% /dev/shmtmpfs tmpfs 270G 323M 270G 1% /runtmpfs tmpfs 270G 0 270G 0% /sys/fs/cgroup/dev/mapper/vg_root-lv_root xfs 54G 18G 36G 34% //dev/sda1 xfs 1.1G 196M 868M 19% /boot/dev/mapper/vg_root-lv_tmp xfs 22G 256M 22G 2% /tmp/dev/mapper/vg_root-lv_boslog xfs 5.4G 35M 5.4G 1% /boslog/dev/mapper/vg_root-lv_nbu65 xfs 17G 3.2G 13G 20% /nbu65/dev/mapper/vg_root-lv_patrol xfs 5.4G 1.2G 4.3G 22% /patroltmpfs tmpfs 54G 33k 54G 1% /run/user/0/dev/mapper/vg_data-lv_data xfs 5.0T 4.3T 724G 86% /data[root@ksqit0102m data]# ls -lrth /datatotal 0drwxr-xr-x 2 root root 37 Aug 20 19:15 template_centos78drwxr-xr-x 2 root root 84 Aug 20 20:53 sqmsbmslakafka01drwxr-xr-x 2 root root 72 Aug 20 20:54 sqmsbmslakafka02drwxr-xr-x 2 root root 72 Aug 20 20:55 sqmsbmslakafka03drwxr-xr-x 2 root root 78 Aug 20 20:56 sqmsbmslaes01drwxr-xr-x 2 root root 78 Aug 20 20:56 sqmsbmslaes02drwxr-xr-x 2 root root 66 Aug 20 20:57 sqmsbmslaes03drwxr-xr-x 2 root root 70 Aug 20 21:12 sqmsbmsiaprom01drwxr-xr-x 2 root root 88 Aug 20 21:12 sqmsbmsiapromfed01[root@ksqit0102m data]# virsh list --all Id Name State---------------------------------------------------- 38 sqmsbmsiaprom01 running 39 sqmsbmsiapromfed01 running 49 sqmsbmslakafka01 running 50 sqmsbmslakafka02 running 51 sqmsbmslakafka03 running 52 sqmsbmslaes01 running 53 sqmsbmslaes02 running 54 sqmsbmslaes03 running - template_centos78 shut off[root@ksqit0102m ~]# virsh attach-interface --domain sqmsbmslaes01 --type bridge --source 3684 --model virtio --config --persistent[root@ksqit0102m ~]# virsh attach-disk --domain sqmsbmslaes01 --source /data/sqmsbmslaes01/sqmsbmslaes01-data.qcow2 --config --persistent[root@ksqit0102m ~]# virsh domiflist --domain sqmsbmslaes01Interface Type Source Model MAC-------------------------------------------------------vnet6 bridge br3684 virtio 52:54:00:c9:e0:fd[root@ksqit0102m ~]# virsh domifaddr --domain sqmsbmslaes01 --source agent Name MAC address Protocol Address------------------------------------------------------------------------------- lo 00:00:00:00:00:00 ipv4 127.0.0.1/8 - - ipv6 ::1/128 eth0 52:54:00:c9:e0:fd ipv4 10.207.84.13/24 - - ipv6 fe80::5054:ff:fec9:e0fd/64[root@ksqit0102m ~]# virsh domblklist --domain sqmsbmslaes01Target Source------------------------------------------------vda /data/sqmsbmslaes01/sqmsbmslaes01.qcow2vdb /data/sqmsbmslaes01/sqmsbmslaes01-disk1.qcow2","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"Windows注册服务","slug":"win/windows-sc-create-services","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-07T00:57:25.448Z","comments":true,"path":"2019/09/01/win/windows-sc-create-services/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/win/windows-sc-create-services/","excerpt":"","text":"Windows 注册服务 sc 等号和值之间需要一个空格 1234sc create srv_name binPath= &quot;C:\\xxx.exe&quot; // 新建服务，binPath后一定要跟一个空格[SC] CreateService Successsc delete srv_name //删除服务 InstallUtil.exe 123456789@ 安装服务InstallUtil.exe 服务名@ 卸载服务InstallUtil.exe 服务名 /u 或者 服务名 -uninstall@ 启动服务net start 服务名@ 停止服务net stop 服务名 instsrv.exe + srvany.exe srvinstw.exe Reference microsoft: sc创建 cnblogs: SC Create 创建一个Windows系统服务 [cnblogs:]SC命令创建和删除windows服务(https://www.cnblogs.com/inuex/p/4299690.html) 51cto:使用instsrv.exe+srvany.exe将应用程序安装为windows服务","categories":[{"name":"Windows","slug":"Windows","permalink":"http://jsunnyr.github.io/categories/Windows/"}],"tags":[{"name":"service-management","slug":"service-management","permalink":"http://jsunnyr.github.io/tags/service-management/"}]},{"title":"Windows用户管理","slug":"win/windows-user-mgmt","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-07T00:56:41.510Z","comments":true,"path":"2019/09/01/win/windows-user-mgmt/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/win/windows-user-mgmt/","excerpt":"","text":"Windows 用户管理 12net usernet localgroup 示例 123456789@ 查看所有用户net user@ 查看特定用户net user user_name@ 添加用户并设置密码net user user_name passwordnet user user_name *","categories":[{"name":"Windows","slug":"Windows","permalink":"http://jsunnyr.github.io/categories/Windows/"}],"tags":[{"name":"user-management","slug":"user-management","permalink":"http://jsunnyr.github.io/tags/user-management/"}]},{"title":"MySQL 常用SQL语句","slug":"db/mysql/mysql-01-common-sql","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-20T06:00:37.080Z","comments":true,"path":"2019/09/01/db/mysql/mysql-01-common-sql/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/mysql/mysql-01-common-sql/","excerpt":"","text":"123456select count(*) form information_schema.processlist where COMMAND != &#x27;Sleep&#x27;;select * from information_schema.processlist where COMMAND !=&#x27;Sleep&#x27; limit 5;explaim sql;show engine innodb status;","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"MySQL","slug":"Database/MySQL","permalink":"http://jsunnyr.github.io/categories/Database/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://jsunnyr.github.io/tags/MySQL/"}]},{"title":"MySQL 通过 profiling 分析性能问题","slug":"db/mysql/mysql-diag-profiling","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-19T13:15:41.335Z","comments":true,"path":"2019/09/01/db/mysql/mysql-diag-profiling/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/mysql/mysql-diag-profiling/","excerpt":"","text":"Profiling 12345set profiling=1;# then execute actual sql;show profiles;show profile cpu,block io for query 5;","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"MySQL","slug":"Database/MySQL","permalink":"http://jsunnyr.github.io/categories/Database/MySQL/"},{"name":"Profiling","slug":"Database/MySQL/Profiling","permalink":"http://jsunnyr.github.io/categories/Database/MySQL/Profiling/"}],"tags":[{"name":"Peformance Tuning","slug":"Peformance-Tuning","permalink":"http://jsunnyr.github.io/tags/Peformance-Tuning/"}]},{"title":"一步步进行 Oracle GI db 新建","slug":"db/oracle/database-oracle-installation-step-by-step","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-10T07:54:55.334Z","comments":true,"path":"2019/09/01/db/oracle/database-oracle-installation-step-by-step/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/oracle/database-oracle-installation-step-by-step/","excerpt":"","text":"12345-rwxrwxrwx. 1 root root 1239269270 Aug 6 09:38 linux.x64_11gR2_database_1of2.zip-rwxrwxrwx. 1 root root 1111416131 Aug 6 09:47 linux.x64_11gR2_database_2of2.zip-rwxrwxrwx. 1 root root 1052897657 Aug 6 09:32 linux.x64_11gR2_grid.zip-rwxrwxrwx. 1 root root 19360 Aug 6 09:28 oracleasmlib-2.0.12-1.el7.x86_64.rpm-rwxrwxrwx. 1 root root 86908 Aug 6 09:28 oracleasm-support-2.1.11-2.el7.x86_64.rpm [root@localhost] yum install kmod-oracleasm [root@localhost] rpm -ivh ./oracleasmlib-2.0.12-1.el7.x86_64.rpm oracleasm-support-2.1.11-2.el7.x86_64.rpm [root@localhost] hostnamectl set-hostname rhel [root@localhost] vim /etc/hosts 192.168.1.32 rhel [root@rhel] groupadd -r -g 500 oinstall [root@rhel] groupadd -r -g 501 dba [root@rhel] groupadd -r -g 502 asmadmin [root@rhel] groupadd -r -g 503 asmdba [root@rhel] useradd -r -u 500 -g oinstall -G dba,asmadmin,asmdba -m -d /home/oracle oracle [root@rhel] useradd -r -u 501 -g oinstall -G dba,asmadmin,asmdba -m -d /home/grid grid [root@rhel] mkdir -p /u01/app/oraInventory [root@rhel] mkdir -p /u01/app/grid [root@rhel] mkdir -p /u01/app/11.2.0/grid [root@rhel] mkdir -p /u01/app/oracle [root@rhel] chown -R grid:oinstall /u01 [root@rhel] chown grid:oinstall /u01/app/oraInventory [root@rhel] chown grid:oinstall /u01/app/grid [root@rhel] chown grid:oinstall /u01/app/11.2.0/grid [root@rhel] chown oracle:oinstall /u01/app/oracle [root@rhel] chmod -R 775 /u01/ [root@rhel] chmod -R 775 /u01/app/oraInventory [root@rhel] chmod -R 775 /u01/app/grid [root@rhel] chmod -R 775 /u01/app/11.2.0 [root@rhel] chmod -R 775 /u01/app/oracle [root@rhel] oracleasm configure -i [root@rhel] fdisk /dev/sdb [root@rhel] oracleasm status [root@rhel] oracleasm init [root@rhel] oracleasm status [root@rhel] systemctl status oracleasm [root@rhel] oracleasm createdisk data01 /dev/sdb1 [root@rhel] oracleasm createdisk data02 /dev/sdc1 [root@rhel/dev/oracleasm]# ls -ld /dev/oracleasm/ drwxr-xr-x. 4 root root 0 Aug 7 16:00 /dev/oracleasm/ [root@rhel/dev/oracleasm]# ll total 0 drwxr-xr-x. 1 root root 0 Aug 7 16:06 disks drwxrwx—. 1 grid oinstall 0 Aug 7 16:07 iid [root@rhel/dev/oracleasm/disks]# ll total 0 brw-rw----. 1 grid oinstall 8, 17 Aug 7 16:08 DATA01 brw-rw----. 1 grid oinstall 8, 33 Aug 7 16:08 DATA02 [root@rhel/u01]# tree -L 4 . . └── app ├── 11.2.0 │ └── grid ├── grid ├── oracle └── oraInventory 6 directories, 0 files [root@rhel] ll -rwxrwxrwx. 1 root root 1239269270 Aug 6 09:38 linux.x64_11gR2_database_1of2.zip -rwxrwxrwx. 1 root root 1111416131 Aug 6 09:47 linux.x64_11gR2_database_2of2.zip -rwxrwxrwx. 1 root root 1052897657 Aug 6 09:32 linux.x64_11gR2_grid.zip [root@rhel] unzip linux.x64_11gR2_grid.zip -d /tmp [root@rhel] su - grid 打开xstart [grid@rhel] export DISPLAY=10.242.138.45:0.0(export DISPLAY=192.168.1.1:0.0) [grid@rhel/tmp/grid] ./runInstaller /u01/app/oraInventory/orainstRoot.sh [root@rhel] yum install -y binutils-* compat-libstdc+±* elfutils-libelf-* elfutils-libelf-devel-static-0.125 gcc-4.1.2 gcc-c+±4.1.2 glibc-2.5-24 glibc-common-2.5 glibc-devel-2.5 glibc-headers-2.5 ksh-20060214 libaio-0.3.106 libaio-devel-0.3.106 libgcc-4.1.2 libgomp-4.1.2 libstdc+±4.1.2 libstdc+±devel-4.1.2 make-3.81 sysstat-7.0.2 /u01/app/grid/product/11.2.0/grid/root.sh [root@rhel] /bin/dd if=/var/tmp/.oracle/npohasd of=/dev/null bs=1024 count=1 [root@rhel] chown root:oinstall /var/tmp/.oracle/npohasd [root@rhel] unzip linux.x64_11gR2_database_1of2.zip -d /tmp [root@rhel] unzip linux.x64_11gR2_database_2of2.zip -d /tmp [root@rhel] su - oracle [oracle@rhel/tmp/database] ./runInstaller /u01/app/oracle/product/11.2.0/dbhome_1/root.sh [grid@rhel] /u01/app/grid/product/11.2.0/grid/bin/netca 创建的监听器一定要是默认的LISTENER（否则dbca时一定会报告Oracle Restart need a default listener） [grid@rhelora ~]$ crsctl start res -all CRS-2672: Attempting to start ‘ora.LISTENER.lsnr’ on ‘rhelora’ CRS-2672: Attempting to start ‘ora.cssd’ on ‘rhelora’ CRS-2672: Attempting to start ‘ora.diskmon’ on ‘rhelora’ CRS-2676: Start of ‘ora.LISTENER.lsnr’ on ‘rhelora’ succeeded CRS-2676: Start of ‘ora.diskmon’ on ‘rhelora’ succeeded CRS-2676: Start of ‘ora.cssd’ on ‘rhelora’ succeeded CRS-2672: Attempting to start ‘ora.asm’ on ‘rhelora’ CRS-2676: Start of ‘ora.asm’ on ‘rhelora’ succeeded CRS-2672: Attempting to start ‘ora.DATA.dg’ on ‘rhelora’ CRS-2676: Start of ‘ora.DATA.dg’ on ‘rhelora’ succeeded [grid@rhelora ~]$ crsctl stat res -t NAME TARGET STATE SERVER STATE_DETAILS Local Resources ora.DATA.dg ONLINE ONLINE rhelora ora.LISTENER.lsnr ONLINE ONLINE rhelora ora.asm ONLINE ONLINE rhelora Started Cluster Resources ora.cssd 1 ONLINE ONLINE rhelora ora.diskmon 1 ONLINE ONLINE rhelora [grid@rhelora ~]$ crs_stat -t Name Type Target State Host ora.DATA.dg ora…up.type ONLINE ONLINE rhelora ora…ER.lsnr ora…er.type ONLINE ONLINE rhelora ora.asm ora.asm.type ONLINE ONLINE rhelora ora.cssd ora.cssd.type ONLINE ONLINE rhelora ora.diskmon ora…on.type ONLINE ONLINE rhelora [root@rhelora ~]# ls -ld /dev/oracleasm/ drwxr-xr-x. 4 root root 0 Aug 9 03:39 /dev/oracleasm/ [root@rhelora ~]# ls -l /dev/oracleasm/ total 0 drwxr-xr-x. 1 root root 0 Aug 9 03:39 disks drwxrwx—. 1 grid oinstall 0 Aug 9 03:39 iid [root@rhelora ~]# ls -l /dev/oracleasm/disks/ total 0 brw-rw----. 1 grid oinstall 8, 37 Aug 9 03:56 DATA01 brw-rw----. 1 grid oinstall 8, 38 Aug 9 03:56 DATA02 [root@rhelora ~]# [root@rhelora ~]# ls -ld /var/tmp/.oracle/ drwxrwxrwt. 2 root oinstall 4096 Aug 9 03:42 /var/tmp/.oracle/ [root@rhelora ~]# ls -l /var/tmp/.oracle/npohasd prw-r–r--. 1 root oinstall 0 Aug 8 22:14 /var/tmp/.oracle/npohasd [oracle@rhel] /u01/app/oracle/product/11.2.0/dbhome_1/bin/dbca [grid@rhelora disks]$ ps -ef | grep ^grid grid 1736 1 1 17:01 ? 00:03:23 /u01/app/11.2.0/grid/bin/ohasd.bin reboot grid 2347 2345 0 17:01 pts/0 00:00:01 -bash grid 2420 1 1 17:02 ? 00:03:21 /u01/app/11.2.0/grid/bin/oraagent.bin grid 2422 1 0 17:02 ? 00:00:14 /u01/app/11.2.0/grid/bin/cssdagent grid 2462 1 2 17:02 ? 00:05:39 /u01/app/11.2.0/grid/bin/ocssd.bin grid 2463 1 0 17:02 ? 00:00:04 /u01/app/11.2.0/grid/bin/tnslsnr LISTENER -inherit grid 2487 1 0 17:02 ? 00:00:08 /u01/app/11.2.0/grid/bin/orarootagent.bin grid 2500 1 0 17:02 ? 00:01:37 /u01/app/11.2.0/grid/bin/diskmon.bin -d -f grid 2561 1 0 17:03 ? 00:00:05 asm_pmon_+ASM grid 2563 1 0 17:03 ? 00:01:46 asm_vktm_+ASM grid 2567 1 0 17:03 ? 00:00:00 asm_gen0_+ASM grid 2569 1 0 17:03 ? 00:00:01 asm_diag_+ASM grid 2571 1 0 17:03 ? 00:00:00 asm_psp0_+ASM grid 2573 1 0 17:03 ? 00:00:09 asm_dia0_+ASM grid 2575 1 0 17:03 ? 00:00:01 asm_mman_+ASM grid 2577 1 0 17:03 ? 00:00:00 asm_dbw0_+ASM grid 2579 1 0 17:03 ? 00:00:00 asm_lgwr_+ASM grid 2581 1 0 17:03 ? 00:00:01 asm_ckpt_+ASM grid 2583 1 0 17:03 ? 00:00:00 asm_smon_+ASM grid 2585 1 0 17:03 ? 00:00:02 asm_rbal_+ASM grid 2587 1 0 17:03 ? 00:00:09 asm_gmon_+ASM grid 2589 1 0 17:03 ? 00:00:02 asm_mmon_+ASM grid 2591 1 0 17:03 ? 00:00:04 asm_mmnl_+ASM grid 2624 1 0 17:03 ? 00:00:00 asm_asmb_+ASM grid 2626 1 0 17:03 ? 00:00:02 oracle+ASM_asmb_+asm (DESCRIPTION=(LOCAL=YES)(ADDRESS=(PROTOCOL=beq))) grid 2711 1 0 17:03 ? 00:00:02 oracle+ASM_asmb_myora (DESCRIPTION=(LOCAL=YES)(ADDRESS=(PROTOCOL=beq))) grid 8889 2347 0 21:19 pts/0 00:00:00 ps -ef grid 8890 2347 0 21:19 pts/0 00:00:00 grep --color=auto ^grid [grid@rhelora disks]$ ps -ef | grep ^oracle oracle 2675 1 0 17:03 ? 00:00:06 ora_pmon_myora oracle 2677 1 0 17:03 ? 00:01:44 ora_vktm_myora oracle 2681 1 0 17:03 ? 00:00:00 ora_gen0_myora oracle 2683 1 0 17:03 ? 00:00:01 ora_diag_myora oracle 2685 1 0 17:03 ? 00:00:00 ora_dbrm_myora oracle 2687 1 0 17:03 ? 00:00:01 ora_psp0_myora oracle 2689 1 0 17:03 ? 00:00:13 ora_dia0_myora oracle 2691 1 0 17:03 ? 00:00:04 ora_mman_myora oracle 2693 1 0 17:03 ? 00:00:04 ora_dbw0_myora oracle 2695 1 0 17:03 ? 00:00:04 ora_lgwr_myora oracle 2697 1 0 17:03 ? 00:00:13 ora_ckpt_myora oracle 2699 1 0 17:03 ? 00:00:04 ora_smon_myora oracle 2701 1 0 17:03 ? 00:00:00 ora_reco_myora oracle 2703 1 0 17:03 ? 00:00:00 ora_rbal_myora oracle 2705 1 0 17:03 ? 00:00:00 ora_asmb_myora oracle 2707 1 0 17:03 ? 00:00:07 ora_mmon_myora oracle 2709 1 0 17:03 ? 00:00:08 ora_mmnl_myora oracle 2713 1 0 17:03 ? 00:00:00 ora_d000_myora oracle 2715 1 0 17:03 ? 00:00:01 ora_mark_myora oracle 2717 1 0 17:03 ? 00:00:00 ora_s000_myora oracle 2807 1 0 17:03 ? 00:00:00 ora_qmnc_myora oracle 2822 1 0 17:03 ? 00:00:06 ora_cjq0_myora oracle 2843 1 0 17:03 ? 00:00:00 ora_q000_myora oracle 2845 1 0 17:03 ? 00:00:00 ora_q001_myora oracle 2938 2937 0 17:04 pts/1 00:00:00 -bash oracle 3060 1 0 17:08 ? 00:00:00 ora_smco_myora oracle 4698 2938 0 18:19 pts/1 00:00:00 sqlplus as sysdba oracle 4699 4698 0 18:19 ? 00:00:00 oraclemyora (DESCRIPTION=(LOCAL=YES)(ADDRESS=(PROTOCOL=beq))) oracle 8092 1 0 20:48 ? 00:00:00 ora_w000_myora oracle 8892 1 0 21:19 ? 00:00:00 ora_j000_myora oracle 8894 1 0 21:19 ? 00:00:00 ora_j001_myora","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"Oracle 常用表和视图","slug":"db/oracle/oracle-01-dynamic-performance-views-常用表和视图","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-08T06:20:02.089Z","comments":true,"path":"2019/09/01/db/oracle/oracle-01-dynamic-performance-views-常用表和视图/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/oracle/oracle-01-dynamic-performance-views-%E5%B8%B8%E7%94%A8%E8%A1%A8%E5%92%8C%E8%A7%86%E5%9B%BE/","excerpt":"","text":"数据字典分类 静态数据字典表 静态数据字典视图 user_ all_ dba_ 动态数据字典表 动态数据字典视图 1. 静态数据字典表 静态数据字典表只能由 ORACLE 进行维护。 2. 静态数据字典视图 通常用户通过对静态数据字典视图的查询可以获取所需 要的所有数据库信息。（dba_ 开头的 必须是 sys 用户所有 ，非 sys 用户 需要在前面加 sys 前缀） user_ 包含了当前数据库用户所拥有的所有的模式对象的信息 all_ 包含了当前数据库用户可以访问的所有的模式对象的信息 dba_ 包含了所有数据库对象信息，只有具有 DBA 角色的用户访问 常用的静态视图 views 视图信息 users 用户信息 。包括用户临时和默认的表空间的类型 triggers 触发器信息 包括触发器的类型，事件。触发器体等信息 tables 表信息 包括表所属的表空间 ，存储参数 ，数据行数量等信息。 tab_privs 表权限信息 tab_columns 表和视图的列信息，包括列的数据类型等信息 sys_privs 系统权限信息 包括系统权限名称 授予者 synonyms 同义词信息 包括引用的对象等信息 source 除触发器之外的所有存储过程，函数，包的源代码信息 sequences 序列信息 包含序列名称 ，循环性，最大值等信息 segments 表和索引的数据段信息，包括表空间，存储设置等信息 object 对象信息， 包括对象名称 类型 创建时间 等信息 ind_columns 索引列信息 包括索引上的列的排序方式等信息 indexes 索引信息 包含索引类型， 唯一性， 索引作用等表的信息 extents 存储分配信息，包括数据段名 表空间名和分区编号，分区大小 col_privs 包含了表的列权限信息，包含授予者，被授予者和权限名称等信息 权限视图 role_sys_privs 角色拥有的系统权限视图 role_tab_privs 角色拥有的对象权限 user_role_privs 用户拥有的角色 user_sys_privs 用户拥有的权限的角色 user_tab_privs_mads 用户分配的关于表对象权限 user_tab_privs_recd 用户拥有的关于表对象权限 user_col_privs_mads 用户分配的关于列的对象权限 user_col_privs_recd 用户拥有的关于列的对象权限 3. 动态性能表 动态性能表是数据库实例启动后 创建的表。动态性能表都数据 SYS 用户； 用于存放数据库在运行的过程中的性能相关的信息。 12# 查看所有的动态性能表select name from v$fixed_table; 4. 动态性能视图 只有 sys 用户和拥有 DBA 角色的用户可以访问 。 在数据库启动到 NOMOUNT 的状态时 可以访问 vparametervparameter vparametervsga vsessionvsession vsessionvprocess vinstancevinstance vinstancevversion v$option 当数据库启动到 mount 的状态时 我们还可以访问 vlogvlog vlogvlogfiel vdatafilevdatafile vdatafilevcontrolfile v$ database vthreadvthread vthreadvdatafile_header 当数据库完全启动后。可以访问 v_$fixed_table 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657v$access 包含当前被锁定的数据库对象及正在访问他们的会话v$archive 包含归档所需的重做日志文件中的信息v$archived_log 包含从控制文件中获取的归档日志信息v$archive_processes 包含于一个实例相关的 arch 进程的状态信息v$backup 包含联机数据文件的备份状态信息v$backup_async_io 包括从控制文件中获取的备份集的信息v$backup_corruption 包含从控制文件中获取的有关数据文件备份中损坏的信息v$backup_datafile 包含从控制文件中获取的备份的数据文件和备份控制文件的信息v$backup_device 包含支持备份设备的信息v$backup_piece 包含从控制文件中获取的备份块的信息v$backup_redolog 包含从控制文件中获取的关于备份集的归档日志的信息v$backup_set 包含从控制文件中获取的备份集的信息v$bgprocess 包含数据库后台进程信息v$buffer_pool 包含当前实例中所有可用缓冲池的信息v$buffer_pool_statistics 包含当前实例所有可用缓冲池的统计信息v$cache 包含当前实例的 SGA 中的每一块的头部信息v$context 包含当前对话的属性信息v$controlfile 包含控制文件信息v$controlfile_record_section 包含控制文件记录部分的信息v$copy_curruption 包含从控制问价中获取的数据文件副本损坏的信息v$database 包含从控制文件中获取的数据库信息v$datafile 包含从控制文件中获取的数据文件信息v$datafile_copy 包括从控制文件中获取的数据文件副本的信息v$datafile_header 包含数据文件头部信息v$db_object_cache 包含缓存在库高速缓冲中的数据库对象信息v$db_pipes 包含当前数据库中的管道信息v$deleted_object 包含从控制文件中获取的被删除的归档日志，数据文件副本和备份块的信息v$dispatcher_rate 包含调度进程速率统计量的信息v$dispatche 包含调度进程的信息v$DLM_ALL_LOCKS 包含当前所有v$DLM_CONVERT_LOCAL 包含本地锁转换操作所消耗的时间的信息v$EVENT_NAME 包含等待时间的信息v$fixed_table 包含所有可用的动态性能视图和动态性能表的信息v$sysstat 包含当前实例的性能统计信息v$instance 包含当前实例的详细信息v$sga 包含 SGA 区的主要组成部分的信息v$sgainfo 包含 SGA 区的详细消v$parameter 包含初始化参数信息v$sversion 包含 Oracle 版本信息v$option 包含已安装的 Oraclette 组件的选项信息v$session 包含当前所有会话信息v$process 包含当前系统所有进程信息v$bgprocess 包含数据库所有后台进程信息v$database 包含当前数据库信息v$controlfile 包含当前数据库所有控制文件信息v$datafile 包含当前数据库所有的数据文件的信息v$dbfile 包含所有数据文件的编号信息v$logfile 包含当前数据库所有的重做日志文件信息v$log 包含当前数据库重做日志文件信息v$log_history 包含重做日志文件切换情况的历史信息v$thread 包含当前数据库线程的信息v$lock 包含锁的信息v$locked_object 包含被加锁的数据库对象信息v$rollname 包含当前处于联机状态的回退信息v$rollstat 包含当前所有的回退段的统计信息v$tablespace 包含当前数据库所有表空间信息v$tempfile 包含当前数据库多有的临时数据文件的信息 all表 12345all_users 数据库所有用户的信息all_objects 数据库所有的对象的信息all_def_audit_opts 所有默认的审计设置信息all_tables 所有的表对象信息all_indexes 所有的数据库对象索引的信息 session表 12session_roles 会话的角色信息session_privs 会话的权限信息 dba表 123456789101112131415161718192021222324252627282930313233343536 dba_users 数据库用户信息 dba_segments 表段信息 dba_extents 数据区信息 dba_objects 数据库对象信息 dba_tablespaces 数据库表空间信息 dba_data_files 数据文件设置信息 dba_temp_files 临时数据文件信息 dba_rollback_segs 回滚段信息 dba_ts_quotas 用户表空间配额信息 dba_free_space 数据库空闲空间信息 dba_profiles 数据库用户资源限制信息 dba_sys_privs 用户的系统权限信息 dba_tab_privs 用户具有的对象权限信息 dba_col_privs 用户具有的列对象权限信息 dba_role_privs 用户具有的角色信息 dba_audit_trail 审计跟踪记录信息 dba_stmt_audit_opts 审计设置信息 dba_audit_object 对象审计结果信息 dba_audit_session 会话审计结果信息 dba_indexes 用户模式的索引信息 dba_tablespacesdba_data_filesdba_temp_filesdba_segmentsdba_free_spacedba_usersdba_ts_quotasdba_rolesdba_role_privsdba_table_privsdba_data_filesdba_free_space dba_roles 所有数据库角色 role_role_privs 每个角色的角色权限 role_sys_privs 每个角色的系统权限 role_tab_privs 每个角色的表权限 user表 123456789101112131415161718192021222324 user_objects 用户对象信息 user_source 数据库用户的所有资源对象信息 user_segments 用户的表段信息 user_tables 用户的表对象信息 user_tab_columns 用户的表列信息 user_constraints 用户的对象约束信息 user_sys_privs 当前用户的系统权限信息 user_tab_privs 当前用户的对象权限信息 user_col_privs 当前用户的表列权限信息 user_role_privs 当前用户的角色权限信息 user_indexes 用户的索引信息 user_ind_columns 用户的索引对应的表列信息 user_cons_columns 用户的约束对应的表列信息 user_clusters 用户的所有簇信息user_clu_columns 用户的簇所包含的内容信息user_cluster_hash_expressions 散列簇的信息user_tables;user_views;user_sequences;user_triggers;user_users;user_role_privs;user_sys_privs;user_tab_privs; dynamic performance view 1234567891011121314151617181920212223242526272829303132333435363738v$sysstatv$system_event# session相关v$processv$sessionv$session_waitv$session_eventv$sesstatv$process# sql相关v$sqlv$sqltestv$sqlareav$sql_plan_statisticsv$sqltext_with_newlines# 闩和锁v$latchv$latch_childrenv$latch_holderv$bhv$lockV$enqueue_statV$enqueue_lock# iov$segstatv$filestatv$tempstatv$datafilev$tempfile# shared pool/Library Cachev$librarycachev$rowcachex$ksmsp Synonym 1234567891011121314151617181920212223242526SQL&gt; set pagesize 999 linesize 999SQL&gt; SQL&gt; SQL&gt; col table_name for a10SQL&gt; col comments for a30SQL&gt; /TABLE_NAME COMMENTS---------- ------------------------------CAT Synonym for USER_CATALOGCLU Synonym for USER_CLUSTERSCOLS Synonym for USER_TAB_COLUMNSDICT Synonym for DICTIONARYDICTIONARY Description of data dictionary tables and viewsDUALIND Synonym for USER_INDEXESOBJ Synonym for USER_OBJECTSRECYCLEBIN Synonym for USER_RECYCLEBINSEQ Synonym for USER_SEQUENCESSYN Synonym for USER_SYNONYMSTABS Synonym for USER_TABLES12 rows selected. 其他 index_stats 索引的位置和存储信息 dual 系统伪列表信息 v$parameter","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"Oracle Controlfile 控制文件","slug":"db/oracle/oracle-02-controfile-控制文件","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-07T03:12:47.879Z","comments":true,"path":"2019/09/01/db/oracle/oracle-02-controfile-控制文件/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/oracle/oracle-02-controfile-%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6/","excerpt":"","text":"oracle controlfile 控制文件 Oracle控制文件，管理数据库的状态及描述数据库的物理结构，是实现异步通信的重要手段之一，对保证Oracle实例的正常工作具有重要的作用。 查看控制文件信息 123456789101112131415161718192021222324252627282930SQL&gt; select name from v$controlfileSQL&gt; select name from v$controlfile;NAME---------------------------------------------------------+DATA/susu/controlfile/current.261.1029148979+DATA/susu/controlfile/current.260.1029148979SQL&gt; show parameter control_files;NAME TYPE VALUE------------------------------------ ----------- ------------------------------control_files string +DATA/susu/controlfile/current .261.1029148979, +DATA/susu/co ntrolfile/current.260.10291489 79SQL&gt;select name,value from v$parameter where name=&#x27;control_files&#x27;;SQL&gt; select name,value from v$parameter where name=&#x27;control_files&#x27;;NAME---------------------------------------------------------VALUE---------------------------------------------------------control_files+DATA/susu/controlfile/current.261.1029148979, +DATA/susu/controlfile/current.260.1029148979# 查看控制文件记录的内容select * from v$controlfile_record_section; 查看控制文件的内容 123456789SQL&gt; alter session set events &#x27;immediate trace name controlf level 8&#x27;;Session altered.SQL&gt; select value from v$diag_info where name=&#x27;Default Trace File&#x27;;VALUE---------------------------/oracle/app/oracle/diag/rdbms/orcl/ORCL/trace/ORCL_ora_8575.trc 增加控制文件 12345678910SQL&gt;alter system set control_files=&#x27;/opt/oracle/data/orcl/control01.ctl&#x27;,&#x27;/opt/oracle/data/orcl/contorl02.ctl&#x27; scope=spfile如果出现control file版本不一致的情况，那么把版本高的拷贝给版本低的再执行：SQL&gt;alter database mount;SQL&gt;alter database open; 备份控制文件 12345678910# 归档模式下alter database backup controlfile to &#x27;/opt/oracle/data/orcl/control2013.bak&#x27;;# 任何模式下alter databae backup controlfile to trace as &#x27;&#x27;;alter database backup controlfile to trace as &#x27;/oracle/app/control180116.ora&#x27;;# rman备份backup current controlfile；backup database include current controlfile;","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"Oracle alter system/session set events 跟踪事件","slug":"db/oracle/oracle-03-set-events-跟踪事件","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-07T03:13:50.000Z","comments":true,"path":"2019/09/01/db/oracle/oracle-03-set-events-跟踪事件/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/oracle/oracle-03-set-events-%E8%B7%9F%E8%B8%AA%E4%BA%8B%E4%BB%B6/","excerpt":"","text":"Oracle跟踪事件","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"Oracle parameters","slug":"db/oracle/oracle-04-parameters-list-参数列表","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-07T07:11:46.904Z","comments":true,"path":"2019/09/01/db/oracle/oracle-04-parameters-list-参数列表/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/oracle/oracle-04-parameters-list-%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8/","excerpt":"","text":"Parameters 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051db_unique_name;service_name;background_dump_dest;control_files;cluster_database;sgadb_nameinstance_namepga_aggregate_targetsort_area_sizehash_area_sizecreate_bitmap_area_sizebitmap_merge_area_sizeundo_tablespaceworkarea_size_policydb_block_size(Oracle块大小)sga_max_size(直接决定内存粒度granule size)sga_target(大于0 sga则是自动管理，否则动态管理[提前设定])sga的管理方式 - 静态管理 - 动态管理(设定sga_max_size,其他池都设定值) - 自动管理(设定sga_max_size，设定sga_target&gt;0且小于等于sga_max_size,sga便会自动管理其他池而无需设定) + 自动管理可能会出现sga抖动 * 提前给各个池定值，不妨碍各个池依然被自动管理shared_pool_size(可以被自动管理) - nk buffer cache = db_cache_size 可以被自动管理 - keep buffer poll, recycle buffer pool 不可以被自动管理log_buffer(重做日志缓冲区，不能被自动管理)large_pool_size(可以被自动管理，如果不分配的话，某些行为需要大池时便会去shared_pool占用一部分)java_pool_size(可以被自动管理如果不分配的话，某些行为需要Java池时便会去shared_pool占用一部分)streams_pool_size(以前不可以被自动管理，从10gR2开始可以被自动管理)-- 生产实践值sga_max_size = (80%*MEM) * 2/3sga_target = 某个值 (大于0，进行自动管理)log_buffer不能被自动管理，应该设定大小其他能够自动管理的，也应提前给值，并不妨碍sga对其进行自动管理，主要是为了防止sga抖动db_flashback_retention_targetdb_recovery_file_destdb_recovery_file_dest_sizecontrol_file_record_keep_timestatistics_level-- rman IO同步、异步dbwr_io_slavesbackup_tape_io_slaves","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"Oracle 软件删除安装","slug":"db/oracle/oracle-06-delete-oracle-software","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-07T03:19:51.178Z","comments":true,"path":"2019/09/01/db/oracle/oracle-06-delete-oracle-software/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/oracle/oracle-06-delete-oracle-software/","excerpt":"","text":"123su - oracle$ORACLE_HOME/deinstall/deinstall 123456789101112131415161718su - oracleps -ef | grep lgwr. oraenvecho $ORACLE_HOMEenv | grep ORAsqlplus / as sysdbashutdown immediate;lsnrctl stopemctl stop dbconsolerm -rf $ORACLE_HOMEsu - rootrm -rf /usr/local/bin/dbhomerm -rf /usr/local/bin/oraenvrm -rf /usr/local/bin/coraenvrm -rf /etc/oratabrm -rf /etc/oraInst.locrm -rf /opt/ORCLfmap","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"sqlnet.ora listener.ora tnsnames.ora","slug":"db/oracle/oracle-07-listener","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-07T04:43:15.597Z","comments":true,"path":"2019/09/01/db/oracle/oracle-07-listener/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/oracle/oracle-07-listener/","excerpt":"","text":"$ORACLE_HOME/network/admin sqlnet.ora(客户及服务器端) 作用类似于linux或者其他unix的nsswitch.conf文件，通过这个文件来决定怎么样找一个连接中出现的连接字符串。 tnsnames.ora(客户及服务器端) 类似于unix 的hosts文件，提供的tnsname到主机名或者ip的对应，只有当sqlnet.ora中类似NAMES.DIRECTORY_PATH= (TNSNAMES) 这样，也就是客户端解析连接字符串的顺序中有TNSNAMES时，才会尝试使用这个文件。 listener.ora(服务器端) listener监听器进程的配置文件。接受远程对数据库的接入申请并转交给oracle的服务器进程。所以如果不是使用的远程的连接，listener进程就不是必需的，同样的如果关闭listener进程并不会影响已经存在的数据库连接。 sqlplus / as sysdba 典型的操作系统认证，不需要listener进程 sqlplus sys/oracle 只能连接本机数据库，不需要listener进程 sqlplus sys/oracle@orcl 需要listener进程处于可用状态。最普遍的通过网络连接。 1234567# 本地连接数据库，服务器进程显示如下：ps -ef | grep LOCALoracle 2878 2814 0 09:46 ? 00:00:00 oracleorcl (DESCRIPTION=(LOCAL=YES)(ADDRESS=(PROTOCOL=beq)))# 通过监听连接数据库，服务器进程显示如下ps -ef | grep LOCALoracle 3124 1 0 09:48 ? 00:00:00 oracleorcl (LOCAL=NO) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115[grid@StandaloneOracle admin]$ echo $ORACLE_HOME/u01/app/grid/product/11.2.0/grid[grid@StandaloneOracle admin]$ pwd/u01/app/grid/product/11.2.0/grid/network/admin[grid@StandaloneOracle admin]$ cat sqlnet.ora # sqlnet.ora Network Configuration File: /u01/app/grid/product/11.2.0/grid/network/admin/sqlnet.ora# Generated by Oracle configuration tools.NAMES.DIRECTORY_PATH= (TNSNAMES, EZCONNECT)ADR_BASE = /u01/app/grid[grid@StandaloneOracle admin]$ cat listener.ora# listener.ora Network Configuration File: /u01/app/grid/product/11.2.0/grid/network/admin/listener.ora# Generated by Oracle configuration tools.LISTENER1 = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = StandaloneOracle)(PORT = 1522)) )ENABLE_GLOBAL_DYNAMIC_ENDPOINT_LISTENER1 = ONSID_LIST_LISTENER1 = (SID_LIST = (SID_DESC = (GLOBAL_DBNAME = susu) (ORACLE_HOME = /u01/app/grid/product/11.2.0/grid) (SID_NAME = orasidsusu) ) )ADR_BASE_LISTENER1 = /u01/app/gridLISTENER = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = StandaloneOracle)(PORT = 1521)) )ADR_BASE_LISTENER = /u01/app/gridENABLE_GLOBAL_DYNAMIC_ENDPOINT_LISTENER = ON[grid@StandaloneOracle admin]$ [grid@StandaloneOracle admin]$ lsnrctl statusLSNRCTL for Linux: Version 11.2.0.1.0 - Production on 07-DEC-2019 11:28:23Copyright (c) 1991, 2009, Oracle. All rights reserved.Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=StandaloneOracle)(PORT=1521)))STATUS of the LISTENER------------------------Alias LISTENERVersion TNSLSNR for Linux: Version 11.2.0.1.0 - ProductionStart Date 07-MAY-2019 10:28:41Uptime 0 days 0 hr. 59 min. 42 secTrace Level offSecurity ON: Local OS AuthenticationSNMP OFFListener Parameter File /u01/app/grid/product/11.2.0/grid/network/admin/listener.oraListener Log File /u01/app/grid/diag/tnslsnr/StandaloneOracle/listener/alert/log.xmlListening Endpoints Summary... (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=StandaloneOracle)(PORT=1521)))Services Summary...Service &quot;+ASM&quot; has 1 instance(s). Instance &quot;+ASM&quot;, status READY, has 1 handler(s) for this service...Service &quot;orasidsusuXDB&quot; has 1 instance(s). Instance &quot;orasidsusu&quot;, status READY, has 1 handler(s) for this service...Service &quot;susu&quot; has 1 instance(s). Instance &quot;orasidsusu&quot;, status READY, has 1 handler(s) for this service...The command completed successfully[grid@StandaloneOracle admin]$ [grid@StandaloneOracle admin]$ lsnrctl status LISTENER1LSNRCTL for Linux: Version 11.2.0.1.0 - Production on 07-DEC-2019 11:30:16Copyright (c) 1991, 2009, Oracle. All rights reserved.Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=StandaloneOracle)(PORT=1522)))STATUS of the LISTENER------------------------Alias LISTENER1Version TNSLSNR for Linux: Version 11.2.0.1.0 - ProductionStart Date 07-DEC-2019 10:28:41Uptime 0 days 1 hr. 1 min. 35 secTrace Level offSecurity ON: Local OS AuthenticationSNMP OFFListener Parameter File /u01/app/grid/product/11.2.0/grid/network/admin/listener.oraListener Log File /u01/app/grid/diag/tnslsnr/StandaloneOracle/listener1/alert/log.xmlListening Endpoints Summary... (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=StandaloneOracle)(PORT=1522)))Services Summary...Service &quot;susu&quot; has 1 instance(s). Instance &quot;orasidsusu&quot;, status UNKNOWN, has 1 handler(s) for this service...The command completed successfully[grid@StandaloneOracle admin]$ [oracle@StandaloneOracle trace]$ tnsping susuTNS Ping Utility for Linux: Version 11.2.0.1.0 - Production on 07-MAY-2019 11:26:06Copyright (c) 1997, 2009, Oracle. All rights reserved.Used parameter files:/u01/app/oracle/product/11.2.0/dbhome_1/network/admin/sqlnet.oraUsed TNSNAMES adapter to resolve the aliasAttempting to contact (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = StandaloneOracle)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = susu)))OK (0 msec)[oracle@StandaloneOracle trace]$","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"Oracle explain plan 执行计划","slug":"db/oracle/oracle-08-explain-plan-执行计划","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-07T03:42:08.195Z","comments":true,"path":"2019/09/01/db/oracle/oracle-08-explain-plan-执行计划/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/oracle/oracle-08-explain-plan-%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/","excerpt":"","text":"oracle 执行计划","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"Oracle schema的解释","slug":"db/oracle/oracle-09-schema","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-07T04:29:51.936Z","comments":true,"path":"2019/09/01/db/oracle/oracle-09-schema/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/oracle/oracle-09-schema/","excerpt":"","text":"oracle数据库在数据文件里组织数据的基本单元：表空间（tablespace）、段（segment）、区（extent）、块（block）。 块是数据存储的物理单位，也是数据文件里最基础的单位，数据直接存储在块上。是oracle空间分配的最小单位。oracle中的块大小常见的有三种，2KB、4KB、8KB。块的大小在数据库创建时就已经固定下来，数据库中每一个块的大小都是同样的，并且全部的块都有同样的格式，由“块头＋表文件夹＋行文件夹＋空暇空间＋数据空间”组成。块头包括着块类型（比方是表块、还是索引块）的信息、磁盘上块的位置等信息。表文件夹（table directory），假设有的话，包括着此块中存储各行的表的信息（假设一个块中存有多个表中的数据）。行文件夹（row directory）包括着数据行的描写叙述信息，它是一个指针数组，指示了每一行在数据块中的物理位置。块头、表文件夹、行文件夹统称为块开销（block overhead），是oracle用来统计、管理块本身的；存有数据的就是数据空间；其余是空暇空间。 区又叫盘区，是数据文件里一个连续的分配空间，它比块要大，由块组成。有些对象分配空间时可能至少须要两个盘区，比方回滚段，而这两个盘区不一定要求相连。区的大小从一个块到2GB不等。 段是oracle数据库中的分配单位，对象如表、索引等都是以段为单位进行分配。当创建一个表时将创建一个表段，创建一个索引时就创建一个索引段。每个消耗存储空间的对象终于被存储到一个单一的段中。有回滚段、暂时段、聚簇段、索引段等。 表空间是一个逻辑容器，它和数据文件关联起来，一个表空间至少有一个数据文件与之关联。一个表空间能够有多个段，一个段仅仅能属于一个表空间。 方案（schema）又叫模式，是比表空间小一级的逻辑概念，它也是一个逻辑容器。多个用户可能共用一个表空间，为了区分开每个用户，在表空间中对每个用户都有一个相应的方案，用于保存单个用户的信息。 oracle中存储的层次结构 一、数据库由一个或多个表空间组成 二、表空间由一个或多个数据文件组成，一个表空间包括多个段 三、段由一个或多个区组成 四、区是数据文件里一个连续的分配空间，由一个或多个块组成 五、块是数据库中最小、最主要的单位，是数据库使用的最小的I/O单元 六、每一个用户都有一个相应的方案 具体说明： schema 为数据库对象的集合，为了区分各个集合，我们须要给这个集合起个名字，这些名字就是我们在企业管理器的 schema 下看到的很多类似username的节点，这些类似username的节点事实上就是一个schema，schema 里面包括了各种对象如：tables，views，sequences，stored procedures，synonyms，indexes，clusters，and database links。 一个用户（user）一般相应一个 schema，该用户的 schema 名等于username，并作为该用户缺省的 schema。这也就是我们在企业管理器的 schema 下看到 schema 名都为数据库username的原因。Oracle 数据库中不能新创建一个 schema，要想创建一个 schema，仅仅能通过创建一个 user 的方法解决（Oracle 中尽管有 create schema 语句，可是它并非用来创建一个 schema 的），在创建一个 user 的同一时候为这个 user 创建一个与username同名的 schem 并作为该用户的缺省 shcema。即 schema 的个数同 user 的个数同样，并且 schema 名字同 user 名字一一相应并且同样，全部我们能够称 schema 为 user 的别名，尽管这样说并不准确，可是更easy理解一些。 一个 user 有一个缺省的 schema，其 schema 名就等于username，当然一个 user 还能够使用其它的 schema。假设我们訪问一个表时，没有指明该表属于哪一个 schema 中的，系统就会自己主动给我们在表上加上缺省的 sheman 名。比方我们在訪问数据库时，訪问 scott 用户下的 emp 表，通过select * from emp; 事实上，这 sql 语句的完整写法为 select * from scott.emp。在数据库中一个对象的完整名称为 schema.object，而不属 user.object。类似假设我们在创建对象时不指定该对象的 schema，在该对象的 schema 为 user 的缺省 schema。这就像一个 user 有一个缺省的 tablespace，可是该 user 还能够使用其它的 tablespace，假设我们在创建对象时不指定 tablespace，则对象存储在缺省 tablespace 中，要想让对象存储在其它 tablespace 中，我们须要在创建对象时指定该对象的 tablespace。 schema 和 user 通常是一致的，建立一个 user 后就可以得到一个 schema，如：HR 用户建立后便有 HR 方案，接下来建立表、索引等数据库对象时，要指定其属于哪个 schema，也要指定其存放在哪个 tablespace 里。 也能够这样理解，schema 是数据库对象的逻辑归属和分类，而 tablespace 是数据库对象的物理和实际存放位置。 1234567891011Schema 就是用户所属对象的一个集合，对象包含表，索引，视图，JAVA，PL/SQL块等。 Schema 的名字与username一样，当创建一个用户时，这个用户所相应的shema也同一时候创建，username与schema交互使用。 Schema 与tablespace之间没有什么联系，同一个schema的对象能够存储在不同的表空间中，同一个表空间中能够存储不同schema的对象。 不要在SYS和SYSTEM SCHEMA下创建其他数据对象。 Schema is the collection of database objects owned by a database user. Schema has the same name as the user owns it. Schema objects include structures such as tables,views,indexes,Java,PL/SQL etc.. Schema is no relationship with tablespace. Object in the same schema can be in different tablespaces. When a database user is created,acorresponding schema with the same name is created for that user. Username and Schema are offen used interchangeably.","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"Oracle 工作常用SQL","slug":"db/oracle/oracle-10-common-sql-常用sql语句","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-19T23:03:26.560Z","comments":true,"path":"2019/09/01/db/oracle/oracle-10-common-sql-常用sql语句/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/oracle/oracle-10-common-sql-%E5%B8%B8%E7%94%A8sql%E8%AF%AD%E5%8F%A5/","excerpt":"","text":"12345678910111213141516171819# 查看oracle数据库的字符集select userenv(&#x27;language&#x27;) from dual;# 查看oracle数据库的编码select * from nls_database_parameters where parameter =&#x27;NLS_CHARACTERSET&#x27;;# 查询当前oracle的并发连接数select count(*) from v$session where status=&#x27;ACTIVE&#x27;;# 查看不同用户的连接数select username,count(username) from v$session where username is not null group by username;# 查询用户会话select username,serial#,sid,program,machine,status from vsession where username=&#x27;USERNAME&#x27; AND STATUS=&#x27;ACTIVE&#x27;;; select saddr,sid,serial#,paddr,username,status from vsession where username is not null;# 删除相关用户会话alter system kill session &#x27;sid, serial#&#x27;; Oracle 打补丁 1） 如果服务器是此数据库独占的，可以设置SGA到30%到40%的操作系统物理内存。 2） 如果是多个数据库共享的服务器，可以设置SGA为12GB到16GB，具体根据应用压力判断。一般小库可以设置8GB PGA设置为SGA的50%； 原则上，主机上所有数据库内存加起来不能超过主机的50%内存。 inux主机由于内存通常较多，unix相对较少，所以Linux内存分配为UNIX的1.5倍。 temp tablespace 1234567alter tablespace temp add tempfile &#x27;+DATA&#x27; size 10M autoextend off;alter tablespace temp add tempfile size 10M autoextend off;alter tablespace temp drop tempfile &#x27;+DATA/susu/tempfile/temp.382.1059144303&#x27;;alter tablespace undotbs1 add datafile size 10M autoextend off;alter tablespace undotbs1 add datafile &#x27;+DATA&#x27; size 20M autoextend off;select name,sum(bytes)/1024/1024 from v$datafile group by name;alter tablespace undotbs1 drop datafile &#x27;+DATA/susu/datafile/undotbs1.382.1059144851&#x27;; redo log file 12345678select group#,status,member from v$logfile;alter database add logfile thread 1 group 5 &#x27;+data&#x27; size 30M;# 日志组成员不需要指定大小，因为所有成员大小都是一样的。alter database add logfile member &#x27;+data&#x27; to group 5;alter database add logfile member &#x27;+data/susu/onlinelog/group_5.2.log&#x27; to group 5;ALTER DATABASE ADD LOGFILE GROUP6(&#x27;/usr/oracle/app/oradata/orcl/redo06a.log&#x27;,&#x27;/usr/oracle/app/oradata/orcl/redo06b.log&#x27;) SIZE 2048M;alter database drop logfile group 5; 开启归档日志 1234567sqlplus / as sysdbashutdown immediate;startup mount;alter database archivelog;alter system set log_archive_dest_1=&#x27;/arch&#x27; scope=both;archive log list;alter database open; 创建profile 创建用户 12create user patrol default tablespace users identified by &#x27;abcd1234&#x27; profile default;grant connect,create session,alter session,select any dictionary to patrol; 时间 1select to_char(sysdate,&#x27;yyyy-mm-dd hh24:mi:ss&#x27;) from dual; logfile 123select group#,type,status,member from v$logfile;select group#,sequence#,status from v$log;alter system switch logfile; 用户相关 123456789101112131415161718192021222324# 查看当前用户的缺省表空间select username,default_tablespace from user_users;# 查看当前用户的角色select * from user_role_privs;# 查看当前用户的系统权限和表级权限select * from user_sys_privs;select * from user_tab_privs;# 查看用户下所有的表select * from user_tables;# 显示当前会话所具有的权限select * from session_privs;# 显示指定用户所具有的系统权限select * from dba_sys_privs where grantee=’GAME’;# 查看名称包含log字符的表select object_name,object_id from user_objects where instr(object_name,’LOG’)&gt;0;# 查看序列号，last_number是当前值select * from user_sequences; 表相关 1234567891011# 查看某表的大小select sum(bytes)/(1024*1024) as “size(M)” from user_segments where segment_name=upper(‘&amp;table_name’);# 查看某表的创建时间select object_name,created from user_objects where object_name=upper(‘&amp;table_name’);# 查看放在ORACLE的内存区里的表select table_name,cache from user_tables where instr(cache,’Y&#x27;)&gt;0;# 同义词，查看同义词的名称select * from user_synonyms; 视图 1234567# 查看视图的名称select view_name from user_views;# 查看创建视图的select语句select view_name,text_length from user_views;set long 2000; 说明：可以根据视图的text_length值设定set long 的大小select text from user_views where view_name=upper(‘&amp;view_name’); 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192select * from dba_users; --数据库用户信息select * from dba_roles; --角色信息select * from dba_segments; --表段信息select * from dba_extents; --数据区信息select * from dba_objects; --数据库对象信息select * from dba_lobs; --lob数据信息select * from dba_tablespaces; --数据库表空间信息select * from dba_data_files; --数据文件设置信息select * from dba_temp_files; --临时数据文件信息select * from dba_rollback_segs; --回滚段信息select * from dba_ts_quotas; --用户表空间配额信息select * from dba_free_space; --数据库空闲空间信息select * from dba_profiles; --数据库用户资源限制信息select * from dba_sys_privs; --用户的系统权限信息select * from dba_tab_privs; --用户具有的对象权限信息select * from dba_col_privs; --用户具有的列对象权限信息select * from dba_role_privs; --用户具有的角色信息select * from dba_audit_trail; --审计跟踪记录信息select * from dba_stmt_audit_opts; --审计设置信息select * from dba_audit_object; --对象审计结果信息select * from dba_audit_session; --会话审计结果信息select * from dba_indexes; --用户模式的索引信息select * from all_users; --数据库所有用户的信息select * from all_objects; --数据库所有的对象的信息select * from all_def_audit_opts; --所有默认的审计设置信息select * from all_tables; --所有的表对象信息select * from all_indexes; --所有的数据库对象索引的信息select * from all_tab_comments; --查询所有用户的表,视图等select * from all_col_comments; --查询所有用户的表的列名和注释.select * from all_tab_columns; --查询所有用户的表的列名等信息(详细但是没有备注)select * from user_objects; --用户对象信息select * from user_source; --数据库用户的所有资源对象信息select * from user_segments; --用户的表段信息select * from user_tables; --用户的表对象信息select * from user_tab_columns; --用户的表列信息select * from user_constraints; --用户的对象约束信息select * from user_sys_privs; --当前用户的系统权限信息select * from user_tab_privs; --当前用户的对象权限信息select * from user_col_privs; --当前用户的表列权限信息select * from user_col_comments; -- 查询本用户的表的列名和注释select * from user_role_privs; --当前用户的角色权限信息select * from user_indexes; --用户的索引信息select * from user_ind_columns; --用户的索引对应的表列信息select * from user_cons_columns; --用户的约束对应的表列信息select * from user_clusters; --用户的所有簇信息select * from user_clu_columns; --用户的簇所包含的内容信息select * from user_cluster_hash_expressions; --散列簇的信息select * from v$database; --数据库信息select * from v$datafile; --数据文件信息select * from v$controlfile; --控制文件信息select * from v$logfile; --重做日志信息select * from v$instance; --数据库实例信息select * from v$log; --日志组信息select * from v$loghist; --日志历史信息select * from v$sga; --数据库SGA信息select * from v$parameter; --初始化参数信息select * from v$process; --数据库服务器进程信息select * from v$bgprocess; --数据库后台进程信息select * from v$controlfile_record_section; --控制文件记载的各部分信息select * from v$thread; --线程信息select * from v$datafile_header; --数据文件头所记载的信息select * from v$archived_log; --归档日志信息select * from v$archive_dest; --归档日志的设置信息select * from v$logmnr_contents; --归档日志分析的DML DDL结果信息select * from v$logmnr_dictionary; --日志分析的字典文件信息select * from v$logmnr_logs; --日志分析的日志列表信息select * from v$tablespace; --表空间信息select * from v$tempfile; --临时文件信息select * from v$filestat; --数据文件的I/O统计信息select * from v$undostat; --Undo数据信息select * from v$rollname; --在线回滚段信息select * from v$session; --会话信息select * from v$transaction; --事务信息select * from v$rollstat; --回滚段统计信息select * from v$pwfile_users; --特权用户信息select * from v$sqlarea; --当前查询过的sql语句访问过的资源及相关的信息select * from v$sql; --与v$sqlarea基本相同的相关信息select * from v$sysstat; --数据库系统状态信息select * from session_roles; --会话的角色信息select * from session_privs; --会话的权限信息select * from dual; --系统伪列表信息select sysdate from dual; --可将Sysdate视为一个其结果为当前日期和时间的函数，在任何可以使用Oracle函数的地方都可以使用Sysdate。也可以将它视为每个表的一个隐藏的列或伪列。select current_date from dual; --报告会话的时区中的系统日期。注：可以设置自己的时区，以区别于数据库的时区。select SYSTIMESTAMP from dual; --报告TIMESTAMP数据类型格式的系统日期。 锁 12345# 锁表SQL查询select object_name,machine,s.sid,s.serial# from gv$locked_object l, dba_objects d, gv$session s where l.object_id = d.object_id and l.session_id = s.sid# 解除锁表alter system kill session &#x27;sid, serial#&#x27;; 查看预设和当前shared_pool_size 和 db_cache_size值 123456select x.ksppinm name,y.ksppstvl value,x.ksppdesc describ from sys.x$ksppi x,sys.x$ksppcv y where x.inst_id=userenv(&#x27;Instance&#x27;) and y.inst_id=userenv(&#x27;Instance&#x27;) and x.indx=y.indx and x.ksppinm like &#x27;%db_cache_size%&#x27;;select x.ksppinm name,y.ksppstvl value,x.ksppdesc describ from sys.x$ksppi x,sys.x$ksppcv y where x.inst_id=userenv(&#x27;Instance&#x27;) and y.inst_id=userenv(&#x27;Instance&#x27;) and x.indx=y.indx and x.ksppinm like &#x27;%pool_size%&#x27;; 123select sql_text,parse_calls,loadsfrom v$sqlwhere sql_text like &#x27;sql_you_need_specify&#x27;; 建议当表做大批量数据变更后，马上手工收集统计信息 1exec dbms_stats.gather_table_stats(ownname=&gt;&#x27;&amp;owner&#x27;,tabname=&gt;&#x27;&amp;tablename&#x27;,estimate_percent=&gt;30,block_sample=&gt;TRUE,method_opt=&gt;&#x27;FOR ALL COLUMNS SIZE AUTO&#x27;,degree=&gt;8,granularity=&gt;&#x27;ALL&#x27;,cascade=&gt;true); 查看阻塞信息 123456789select sid,type,lmode,request,ctime,block from v$lock where type=&#x27;TX&#x27;;select blocking_session,sid,wait_class,seconds_in_wait from v$session;select s.session_id,s.object_id,d.object_name from v$locked_object s,dba_objects d where s.object_id=d.object_id;alter system kill session &#x27;sid,serial#&#x27;;select sid,serial#,user#,username,status,process,machine,port,program,type,service_name,lockwait from v$session where username is not null and status=&#x27;ACTIVE&#x27; order by logon_time,sid; 获取当前会话的SID 12345SELECT * FROM V$SESSION WHERE AUDSID = USERENV(&#x27;SESSIONID&#x27;); SELECT * FROM V$MYSTAT A WHERE ROWNUM=1; SELECT USERENV(&#x27;SID&#x27;) FROM DUAL; 查看当前会话执行的sql语句及进程信息 123456789101112131415SELECT P.SPID, S.SID, S.OSUSER, S.MACHINE, S.PROGRAM, S.LOGON_TIME, S.SERIAL#, Q.MODULE, Q.SQL_ID, Q.SQL_TEXT, Q.SQL_FULLTEXT FROM V$SESSION S, V$PROCESS P, V$SQLAREA Q WHERE S.PADDR = P.ADDR(+) AND S.SQL_ID = Q.SQL_ID(+) AND S.AUDSID = USERENV(&#x27;SESSIONID&#x27;); 让实例重新校验所有online文件的状态，恢复文件的可用小型 1alter system check datafiles;","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"Oracle User 用户管理","slug":"db/oracle/oracle-11-user-management-用户管理","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-07T06:37:24.362Z","comments":true,"path":"2019/09/01/db/oracle/oracle-11-user-management-用户管理/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/oracle/oracle-11-user-management-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/","excerpt":"","text":"oracle 用户管理 1select &#x27;alter system kill &#x27; || &#x27;&#x27;&#x27;&#x27; || sid || &#x27;,&#x27; || serial# || &#x27;&#x27;&#x27;&#x27; || &#x27;;&#x27; as SQL_STATEMENT from v$session where username=&#x27;HR&#x27;;","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"global_name, instance_name,db_name, db_unique_name,service_name","slug":"db/oracle/oracle-13-different-name-各种name的区别","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-08T06:11:40.222Z","comments":true,"path":"2019/09/01/db/oracle/oracle-13-different-name-各种name的区别/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/oracle/oracle-13-different-name-%E5%90%84%E7%A7%8Dname%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"instance_name(实例名) 1234567891011SQL&gt; select instance_number,instance_name from v$instance;INSTANCE_NUMBER INSTANCE_NAME--------------- ---------------- 1 orasidsusuSQL&gt; show parameters instance_name;NAME TYPE VALUE------------------------------------ ----------- --------instance_name string orasidsusu sid 12345SQL&gt; select instance from v$thread;INSTANCE--------------------------------------------------------------------------------orasidsusu global_name(全局数据库名) 1select * from global_name db_name(数据库名) 123456789101112SQL&gt; select dbid,name from v$database; DBID NAME---------- ---------1311078515 SUSUSQL&gt; show parameters db_name;NAME TYPE VALUE------------------------------------ ----------- ------------------------------db_name string susu service_name（服务名） service_name alias（服务别名） 1","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"Oracle library cache","slug":"db/oracle/oracle-14-tuning-librarycache","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-07T08:57:14.181Z","comments":true,"path":"2019/09/01/db/oracle/oracle-14-tuning-librarycache/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/oracle/oracle-14-tuning-librarycache/","excerpt":"","text":"Library Cache 123desc v$librarycache;select sum(pinhits)/sum(pins) hitratio from v$librarycache;select sum(reloads)/sum(pins) reloadratio from v$librarycache; ORACLE调优专家所推荐的长期运行的数据库的 library cache hitratio 最好应该在95%以上，sum(reloads)与sum(pins) 的比值应该小于 1%，如果pinhitratio 小于90%，或者reload ratio 大于1% ，而且shared pool 的free memory 很小或者为0，那么可以适当增加shared_pool的大小，检查应用程序代码效率，比如是否使用了绑定变量等等.","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"Oracle Roadmap","slug":"db/oracle/oracle-roadmap","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-07T01:38:48.652Z","comments":true,"path":"2019/09/01/db/oracle/oracle-roadmap/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/oracle/oracle-roadmap/","excerpt":"","text":"Oracle 规划 官方文档 Oracle 11g Oracle体系结构 内存结构 SGA PGA 进程结构 smon pmon lgwr ckpt 物理结构 参数文件 pfile spfile 控制文件 数据文件 日志文件 Online redo log Archived redo log Standby redo log 逻辑结构 表空间 段 区 块 监听结构 RAC 容灾结构 DG/ADG Oracle运用 GI/DB安装部署 GI srvctl crs_stat crsctl DBCA NETCA Export/import Data Pump/expdp/impdp RMAN RAC Oracle优化 Oracle新特性 执行计划 多表关联(Nest Loop，hash join，merge into…) 常见Hint 索引类型及特性 统计信息 SQL优化 Oracle ACE ACE Project(https://developer.oracle.com/ace/) FAQ(https://developer.oracle.com/oracle-ace-faq/) Apply(https://apexapps.oracle.com/pls/apex/f?p=251:1:20268759372916:::::)","categories":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/categories/Oracle/"},{"name":"Roadmap","slug":"Oracle/Roadmap","permalink":"http://jsunnyr.github.io/categories/Oracle/Roadmap/"}],"tags":[{"name":"Roadmap","slug":"Roadmap","permalink":"http://jsunnyr.github.io/tags/Roadmap/"}]},{"title":"redis 杂七杂八","slug":"db/redis/redis","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-07T01:05:03.507Z","comments":true,"path":"2019/09/01/db/redis/redis/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/db/redis/redis/","excerpt":"","text":"12345678[root@localhost] redis-server redist.conf[root@localhost] redis-server redist_slave.conf127.0.0.1:6379&gt; info127.0.0.1:6380&gt; slaveof 127.0.0.1 6379127.0.0.1:6380&gt; info127.0.0.1:6380&gt; slaveof no one 操作 配置守护进程 主从关系 一主一从 一主多从 树状结构 断开主从 切主操作 从机只读 传输延时 复制 注册复制 全量复制 部分复制 复制偏移量 复制积压缓冲区 异步复制 复制风暴 单主节点复制风暴 单机器复制风暴 Redis 数据持久化 RDB AOF 复制机制 主从复制 半-重新同步 重新同步 内存使用 ziplist intset 数据分片 分布式“数据分片” 单实例“数据分片” 性能及容量 Redis集群 Redis Cluster twemproxy Codis 基于Lua的Redis“存储过程”","categories":[{"name":"Windows","slug":"Windows","permalink":"http://jsunnyr.github.io/categories/Windows/"}],"tags":[{"name":"user-management","slug":"user-management","permalink":"http://jsunnyr.github.io/tags/user-management/"}]},{"title":"ubuntu 杂七杂八","slug":"os/deb/ubuntu 杂七杂八","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-07T01:03:54.032Z","comments":true,"path":"2019/09/01/os/deb/ubuntu 杂七杂八/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/deb/ubuntu%20%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/","excerpt":"","text":"12345# 初始化常用桌面应用程序sudo apt-get install gdebi unity-tweak-tool gnome-tweak-toolsudo add-apt-repository ppa:ricotz/dockysudo apt-get updatesudo apt-get install docky fonts-wqy-microhei 12345678# 本地仓库mkdir /media/cdrommount -t iso9660 -o loop /dev/sr0 /media/cdrom@mount -t auto /dev/cdrom /media/cdrom)sudo apt-cdrom -m -d=/media/cdrom addcat /etc/apt/sources.listdeb cdrom:[Ubuntu-Server 16.04.2 LTS _Xenial Xerus_ - Release amd64 (20170215.8)]/ xenial main restrictedapt-get update","categories":[{"name":"OS","slug":"OS","permalink":"http://jsunnyr.github.io/categories/OS/"},{"name":"ubuntu","slug":"OS/ubuntu","permalink":"http://jsunnyr.github.io/categories/OS/ubuntu/"}],"tags":[{"name":"package-management","slug":"package-management","permalink":"http://jsunnyr.github.io/tags/package-management/"}]},{"title":"Linux命令系列：perf","slug":"os/performance-tuning/linux-command-series-perf","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-20T07:59:24.264Z","comments":true,"path":"2019/09/01/os/performance-tuning/linux-command-series-perf/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/performance-tuning/linux-command-series-perf/","excerpt":"","text":"12345678910111213perf record -e cpu-clock -g -p pid#-g 选项是告诉perf record额外记录函数的调用关系#-e cpu-clock 指perf record监控的指标为cpu周期#-p 指定需要record的进程pidperf report -i perf.dataperf record -e cpu-clock -g -p pidperf script -i perf.data &amp;&gt; perf.unfoldgit clone https://github.com/brendangregg/FlameGraph --depth=1cd FlameGraph./stackcollapse-perf.pl ../perf.unfold &amp;&gt; ../perf.folded./flamegraph.pl ../perf.folded &gt; ../perf.svg","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"Command","slug":"GNULINUX/Command","permalink":"http://jsunnyr.github.io/categories/GNULINUX/Command/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"},{"name":"Command","slug":"Command","permalink":"http://jsunnyr.github.io/tags/Command/"},{"name":"Performance Tuning","slug":"Performance-Tuning","permalink":"http://jsunnyr.github.io/tags/Performance-Tuning/"}]},{"title":"Performance Tuning Concept 性能调优","slug":"os/performance-tuning/performance-tuning-concept","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-20T06:03:25.586Z","comments":true,"path":"2019/09/01/os/performance-tuning/performance-tuning-concept/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/performance-tuning/performance-tuning-concept/","excerpt":"","text":"二八原则 “二八原则”，也就是说 80% 的问题都是由 20% 的代码导致的。只要找出这 20% 的位置，你就可以优化 80% 的性能。 性能优化不要局限在单一维度的指标上。 性能优化并非没有成本。 并不是所有的性能问题都值得优化。 性能优化的目标，在可接受成本下保证服务状态的可用性，稳定性。 性能优化前的思考 是否准确找到性能瓶颈 如何判断优化的有效性 针对多种同时发生的性能问题，选择优化的对象 选择哪种优化方法 如何判断优化的有效性 确定性能的量化指标 测试优化前的性能指标 测试优化后的性能指标 确定性能的量化指标 不要局限于单一维度，至少应用程序和系统资源 应用程序维度：吞吐量和请求延迟 系统资源维度： CPU,MEM,IO(network io, disk io)","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"Performance Tuning","slug":"GNULINUX/Performance-Tuning","permalink":"http://jsunnyr.github.io/categories/GNULINUX/Performance-Tuning/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"},{"name":"Performance Tuning","slug":"Performance-Tuning","permalink":"http://jsunnyr.github.io/tags/Performance-Tuning/"}]},{"title":"Linux 用户相关 pam","slug":"os/rpm/linux-account_unlock","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-09T06:17:55.370Z","comments":true,"path":"2019/09/01/os/rpm/linux-account_unlock/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-account_unlock/","excerpt":"","text":"12345678910111213# redhat5faillog -u username -r# redhat6pam_tally2 -u username -r# HPUX## 查看用户是否被锁定,返回除0000000,其他均为锁定/usr/lbin/getprpw -l -m lockout username## 解锁用户/usr/lbin/modprpw -l -k username Reference hpux-用户解锁","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"Linux命令系列：lspci","slug":"os/rpm/linux-command-series-lspci","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-21T02:53:24.345Z","comments":true,"path":"2019/09/01/os/rpm/linux-command-series-lspci/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-command-series-lspci/","excerpt":"","text":"lspci 1lspci","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"Command","slug":"GNULINUX/Command","permalink":"http://jsunnyr.github.io/categories/GNULINUX/Command/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"},{"name":"Command","slug":"Command","permalink":"http://jsunnyr.github.io/tags/Command/"}]},{"title":"Linux命令系列：openssl","slug":"os/rpm/linux-command-series-openssl","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-19T10:00:30.966Z","comments":true,"path":"2019/09/01/os/rpm/linux-command-series-openssl/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-command-series-openssl/","excerpt":"","text":"example 1 123456789101112#生成私钥(umask 077; openssl genrsa -out dashboard.key 2048)#根据私钥生成证书签名请求openssl req -new -key dashboard.key -out dashboard.csr -subj &quot;/O=dashboard/CN=dashboard&quot;#用CA签署证书（根据csr生成证书）openssl x509 -req -in dashboard.csr -CA ca.crt -CAkey ca.key -out dashboard.crt -CAcreateserial -days 3650#查看证书信息openssl x509 -in apiserver-kubelet-client.crt -text -noout#生成自签证书openssl req -new -x509 -key tls.key -out tls.crt -subj &quot;/CN=aaa.baidu.com&quot; example 2 1234567891011121314#生成ca的key(umask 077; openssl genrsa -out cakey.pem 2048)#生成ca的自签名证书openssl req -new -x509 -key cakey.pem -out cacert.pem -days 365 -subj &quot;/O=devops/CN=ca.ilinux.com&quot;#生成客户端的keyopenssl genrsa -out nginx.key#生成客户端的证书签名请求，假设CN为www.ilinux.comopenssl req -new -key nginx.key -out nginx.csr -subj &quot;/O=devops/CN=www.ilinux.com&quot;#根据客户端的签名请求生成证书openssl x509 -req -in nginx.csr -CA cacert.pem -CAkey cakey.pem -out nginx.crt -CAcreateserial -days 3650","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"Command","slug":"GNULINUX/Command","permalink":"http://jsunnyr.github.io/categories/GNULINUX/Command/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"},{"name":"Command","slug":"Command","permalink":"http://jsunnyr.github.io/tags/Command/"}]},{"title":"Linux命令系列：ps","slug":"os/rpm/linux-command-series-ps","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-19T09:59:42.104Z","comments":true,"path":"2019/09/01/os/rpm/linux-command-series-ps/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-command-series-ps/","excerpt":"","text":"ps命令的选项格式 根据选项长短和是否有横线的情况，ps命令的选项可以分为以下3类： BSD风格语法，必须不能以中横线开头； SYSV风格语法，必须仅一个中横线开头； GNU风格语法，必须以两个中横线开头；","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"Command","slug":"GNULINUX/Command","permalink":"http://jsunnyr.github.io/categories/GNULINUX/Command/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"},{"name":"Command","slug":"Command","permalink":"http://jsunnyr.github.io/tags/Command/"}]},{"title":"LVM","slug":"os/rpm/linux-disk-lvm","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-09T06:47:37.252Z","comments":true,"path":"2019/09/01/os/rpm/linux-disk-lvm/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-disk-lvm/","excerpt":"","text":"lvm Physical Volume(PV) A physical volume is any block device (a disk, a partition, a RAID device or even an iSCSI device). All these devices can become a member of a volume group. Volume Group(vg) A volume group is an abstraction layer between block devices and logical volumes. Logical Volume(lv) A logical volume is created in a volume group. Logical volumes that contain a file system can be mounted. The use of logical volumes is similar to the use of partitions and is accomplished with the same standard commands (mkfs, mount, fsck, df, …). Note: lvm will work fine when using the complete device, but another operating system on the same computer (or on the same SAN) will not recognize lvm and will mark the block device as being empty! You can avoid this by creating a partition that spans the whole device, then run pvcreate on the partition instead of the disk. Volumes that are mounted as vfat or ext2 cannot be extended, so in the example here we use the ext3 file system. lvm mirror lvm snapshot A snapshot is a virtual copy of all the data at a point in time on a volume. A snapshot Logical Volume will retain a copy of all changed files of the snapshotted Logical Volume. lvm command pvcreate Use the pvcreate command to add devices to lvm. pvresize When you used fdisk to resize a partition on a disk, then you must use pvresize to make lvm recognize the new size of the physical volume that represents this partition. pvchange With pvchange you can prevent the allocation of a Physical Volume in a new Volume Group or Logical Volume. This can be useful if you plan to remove a Physical Volume. Also, to revert your previous decision, pvresize let you re-enable the Physical Volume to allow allocation. pvremove Use the pvremove command to remove physical volumes from lvm. The devices may not be in use. pvmove With pvmove you can move Logical Volumes from within a Volume Group to another Physical Volume. This must be done before removing a Physical Volume. pvs The pvscan command will scan all disks for existing Physical Volumes. pvdisplay Use pvdisplay to get more information about physical volumes. You can also use pvdisplay without an argument to display information about all physical (lvm) volumes. vgcreate Use the vgcreate command to create a volume group. vgextend Use the vgextend command to extend an existing volume group with a physical volume. vgremove Use the vgremove command to remove volume groups from lvm. The volume groups may not be in use. vgreduce Use the vgreduce command to remove a Physical Volume from the Volume Group. vgchange Use the vgchange command to change parameters of a Volume Group. vgmerge Merging two Volume Groups into one is done with vgmerge. vgs vgs to display a quick overview of all volume groups. vgscan The vgscan command will scan all disks for existing Volume Groups. It will also update the /etc/lvm/.cache file. This file contains a list of all current lvm devices. LVM will run the vgscan automatically at boot-up. vgdisplay The vgdisplay command will give you more detailed information about a volume group (or about all volume groups if you omit the argument). lvmdiskscan To get a list of block devices that can be used with LVM, use lvmdiskscan. lvcreate Use the lvcreate command to create Logical Volumes in a Volume Group. lvremove Use the lvremove command to remove Logical Volumes from a Volume Group. Removing a Logical Volume requires the name of the Volume Group. lvextend Extending the volume is easy with lvextend. lvrename Renaming a Logical Volume is done with lvrename. lvs The easiest way to verify whether devices are known to lvm is with the pvs command. Use lvs for a quick look at all existing logical volumes. lvscan The lvscan command will scan all disks for existing Logical Volumes. lvdisplay More detailed information about logical volumes is available through the lvdisplay(1) command.","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"sshd 安全防护 google authenticator","slug":"os/rpm/linux-google-authenticator","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-09T06:30:38.987Z","comments":true,"path":"2019/09/01/os/rpm/linux-google-authenticator/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-google-authenticator/","excerpt":"","text":"VPS云服务器 安全加固 iptables持久化 123iptables-save &gt; /etc/sysconfig/iptablesvim /etc/rc.d/rc.localiptables-restore &lt; /etc/sysconfig/iptables OTP:Google-authenticator on Linux 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148[root@VM-4-9-centos ~]# yum search google-authenticatorLoaded plugins: fastestmirror, langpacksLoading mirror speeds from cached hostfile============================================ N/S matched: google-authenticator =============================================google-authenticator.x86_64 : One-time pass-code support using open standards Name and summary matches only, use &quot;search all&quot; for everything.[root@VM-4-9-centos ~]# yum info google-authenticatorLoaded plugins: fastestmirror, langpacksLoading mirror speeds from cached hostfileAvailable PackagesName : google-authenticatorArch : x86_64Version : 1.04Release : 1.el7Size : 48 kRepo : epel/7/x86_64Summary : One-time pass-code support using open standardsURL : https://github.com/google/google-authenticator-libpam/License : ASL 2.0Description : The Google Authenticator package contains a plug-able authentication : module (PAM) which allows login using one-time pass-codes conforming to : the open standards developed by the Initiative for Open Authentication : (OATH) (which is unrelated to OAuth). : : Pass-code generators are available (separately) for several mobile : platforms. : : These implementations support the HMAC-Based One-time Password (HOTP) : algorithm specified in RFC 4226 and the Time-based One-time Password : (TOTP) algorithm currently in draft.[root@VM-4-9-centos ~]# yum install google-authenticatorLoaded plugins: fastestmirror, langpacksLoading mirror speeds from cached hostfileResolving Dependencies--&gt; Running transaction check---&gt; Package google-authenticator.x86_64 0:1.04-1.el7 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved============================================================================================================================ Package Arch Version Repository Size============================================================================================================================Installing: google-authenticator x86_64 1.04-1.el7 epel 48 kTransaction Summary============================================================================================================================Install 1 PackageTotal download size: 48 kInstalled size: 97 kIs this ok [y/d/N]: yDownloading packages:google-authenticator-1.04-1.el7.x86_64.rpm | 48 kB 00:00:00 Running transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : google-authenticator-1.04-1.el7.x86_64 1/1 Verifying : google-authenticator-1.04-1.el7.x86_64 1/1 Installed: google-authenticator.x86_64 0:1.04-1.el7 Complete![root@VM-4-9-centos ~]# [root@VM-4-9-centos ~]# google-authenticator -hgoogle-authenticator [&lt;options&gt;] -h, --help Print this message -c, --counter-based Set up counter-based (HOTP) verification -t, --time-based Set up time-based (TOTP) verification -d, --disallow-reuse Disallow reuse of previously used TOTP tokens -D, --allow-reuse Allow reuse of previously used TOTP tokens -f, --force Write file without first confirming with user -l, --label=&lt;label&gt; Override the default label in &quot;otpauth://&quot; URL -i, --issuer=&lt;issuer&gt; Override the default issuer in &quot;otpauth://&quot; URL -q, --quiet Quiet mode -Q, --qr-mode=&#123;NONE,ANSI,UTF8&#125; QRCode output mode -r, --rate-limit=N Limit logins to N per every M seconds -R, --rate-time=M Limit logins to N per every M seconds -u, --no-rate-limit Disable rate-limiting -s, --secret=&lt;file&gt; Specify a non-standard file location -S, --step-size=S Set interval between token refreshes -w, --window-size=W Set window of concurrently valid codes -W, --minimal-window Disable window of concurrently valid codes -e, --emergency-codes=N Number of emergency codes to generate[root@VM-4-9-centos ~]# google-authenticator -e 2Do you want authentication tokens to be time-based (y/n) y... 这里是一个QRCode... Your new secret key is: xxxxxxxxxxxxxxxxxYour verification code is 869657Your emergency scratch codes are: 14481696 53040810Do you want me to update your &quot;/root/.google_authenticator&quot; file? (y/n) yDo you want to disallow multiple uses of the same authenticationtoken? This restricts you to one login about every 30s, but it increasesyour chances to notice or even prevent man-in-the-middle attacks (y/n) yBy default, a new token is generated every 30 seconds by the mobile app.In order to compensate for possible time-skew between the client and the server,we allow an extra token before and after the current time. This allows for atime skew of up to 30 seconds between authentication server and client. If youexperience problems with poor time synchronization, you can increase the windowfrom its default size of 3 permitted codes (one previous code, the currentcode, the next code) to 17 permitted codes (the 8 previous codes, the currentcode, and the 8 next codes). This will permit for a time skew of up to 4 minutesbetween client and server.Do you want to do so? (y/n) nIf the computer that you are logging into isn&#x27;t hardened against brute-forcelogin attempts, you can enable rate-limiting for the authentication module.By default, this limits attackers to no more than 3 login attempts every 30s.Do you want to enable rate-limiting? (y/n) y[root@VM-4-9-centos ~]# rpm -ql `rpm -qf /bin/google-authenticator`/usr/bin/google-authenticator/usr/lib64/security/pam_google_authenticator.la/usr/lib64/security/pam_google_authenticator.so/usr/share/doc/google-authenticator-1.04/usr/share/doc/google-authenticator-1.04/CONTRIBUTING.md/usr/share/doc/google-authenticator/FILEFORMAT/usr/share/doc/google-authenticator/README.md/usr/share/doc/google-authenticator/totp.html/usr/share/licenses/google-authenticator-1.04/usr/share/licenses/google-authenticator-1.04/LICENSE/usr/share/man/man1/google-authenticator.1.gz/usr/share/man/man8/pam_google_authenticator.8.gz如果无法在 /usr/lib64/security 发现此链接库,则做软链[root@test ~]# ln -s /usr/local/lib/security/pam_google_authenticator.so /usr/lib64/security/pam_google_authenticator.so[root@test ~]# vim /etc/pam.d/sshd auth required pam_google_authenticator.so no_increment_hotp[root@test ~]# vim /etc/ssh/sshd_config ...PasswordAuthentication yesChallengeResponseAuthentication yesUsePAM yes[root@test ~]# systemctl restart sshd","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"linux 硬件管理","slug":"os/rpm/linux-hardware-mgmt","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-09T06:20:49.677Z","comments":true,"path":"2019/09/01/os/rpm/linux-hardware-mgmt/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-hardware-mgmt/","excerpt":"","text":"Linux硬件管理 总核数 = 物理CPU个数 X 每颗物理CPU的核数 总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数 一般情况，我们认为一颗cpu可以有多核，加上intel的超线程技术(HT)。 Linux cat /proc/cpuinfo 具有相同core id的CPU是同一个core的超线程，具有相同physical id的CPU是同一个CPU封装的线程或核心。 hardware info 123456789getconf LONG_BITdmesglspci [ -i | -tv ]ll /sys/class/class_name/lsusblsscsi [ -b | -v ]lshwdmidecodetune2fs -l /dev/sdc CPU 123lscpunumactl modules 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687[root@db ~]# clear[root@db ~]# pwd/root[root@db ~]# modinfo r8169filename: /lib/modules/3.10.0-1062.18.1.el7.x86_64/kernel/drivers/net/ethernet/realtek/r8169.ko.xzfirmware: rtl_nic/rtl8107e-2.fwfirmware: rtl_nic/rtl8107e-1.fwfirmware: rtl_nic/rtl8168h-2.fwfirmware: rtl_nic/rtl8168h-1.fwfirmware: rtl_nic/rtl8168g-3.fwfirmware: rtl_nic/rtl8168g-2.fwfirmware: rtl_nic/rtl8106e-2.fwfirmware: rtl_nic/rtl8106e-1.fwfirmware: rtl_nic/rtl8411-2.fwfirmware: rtl_nic/rtl8411-1.fwfirmware: rtl_nic/rtl8402-1.fwfirmware: rtl_nic/rtl8168f-2.fwfirmware: rtl_nic/rtl8168f-1.fwfirmware: rtl_nic/rtl8105e-1.fwfirmware: rtl_nic/rtl8168e-3.fwfirmware: rtl_nic/rtl8168e-2.fwfirmware: rtl_nic/rtl8168e-1.fwfirmware: rtl_nic/rtl8168d-2.fwfirmware: rtl_nic/rtl8168d-1.fwlicense: GPLsoftdep: pre: realtekdescription: RealTek RTL-8169 Gigabit Ethernet driverauthor: Realtek and the Linux r8169 crew &lt;netdev@vger.kernel.org&gt;retpoline: Yrhelversion: 7.7srcversion: 6A480409F7BC52AD7A76C65alias: pci:v00000001d00008168sv*sd00002410bc*sc*i*alias: pci:v00001737d00001032sv*sd00000024bc*sc*i*alias: pci:v000016ECd00000116sv*sd*bc*sc*i*alias: pci:v00001259d0000C107sv*sd*bc*sc*i*alias: pci:v00001186d00004302sv*sd*bc*sc*i*alias: pci:v00001186d00004300sv*sd*bc*sc*i*alias: pci:v00001186d00004300sv00001186sd00004B10bc*sc*i*alias: pci:v000010ECd00008169sv*sd*bc*sc*i*alias: pci:v000010FFd00008168sv*sd*bc*sc*i*alias: pci:v000010ECd00008168sv*sd*bc*sc*i*alias: pci:v000010ECd00008167sv*sd*bc*sc*i*alias: pci:v000010ECd00008161sv*sd*bc*sc*i*alias: pci:v000010ECd00008136sv*sd*bc*sc*i*alias: pci:v000010ECd00008129sv*sd*bc*sc*i*alias: pci:v000010ECd00002600sv*sd*bc*sc*i*alias: pci:v000010ECd00002502sv*sd*bc*sc*i*depends:intree: Yvermagic: 3.10.0-1062.18.1.el7.x86_64 SMP mod_unload modversionssigner: CentOS Linux kernel signing keysig_key: 7C:BA:6E:56:2A:CC:BE:D5:25:80:E7:39:32:4E:8A:D4:10:92:CF:1Fsig_hashalgo: sha256parm: debug:Debug verbosity level (0=none, ..., 16=all) (int)ll /lib/modules/`uname -r`/kernel[x@db kernel]$ pwd/lib/modules/3.10.0-1062.18.1.el7.x86_64/kernel[x@db kernel]$ modinfo arch/x86/crypto/sha512-ssse3.ko.xzfilename: /lib/modules/3.10.0-1062.18.1.el7.x86_64/kernel/arch/x86/crypto/sha512-ssse3.ko.xzalias: crypto-sha384alias: sha384alias: crypto-sha512alias: sha512description: SHA512 Secure Hash Algorithm, Supplemental SSE3 acceleratedlicense: GPLretpoline: Yrhelversion: 7.7srcversion: 7FA421199BB7545B6354892depends: sha512_genericintree: Yvermagic: 3.10.0-1062.18.1.el7.x86_64 SMP mod_unload modversionssigner: CentOS Linux kernel signing keysig_key: 7C:BA:6E:56:2A:CC:BE:D5:25:80:E7:39:32:4E:8A:D4:10:92:CF:1Fsig_hashalgo: sha256[x@db]$ lsmod[x@db]$ modprobe virtio_blk[x@db]$ vim /etc/sysconfig/modules/virtio.modulesmodprobe virtio_blkmodprobe virtio_scsi[x@db]$ chmod a+x /etc/sysconfig/modules/virtio.modules[x@db]$ insmod /lib/modules/`uname -r`/kernel/drivers/char/watchdog/softdog.ko[x@db]$ rmmod -s softdog[x@db]$ man 5 modprobe.conf kernel 12345678910111213141516[root@db ]# ll /proc/systotal 0dr-xr-xr-x 1 root root 0 Oct 27 10:08 abidr-xr-xr-x 1 root root 0 Oct 11 12:23 cryptodr-xr-xr-x 1 root root 0 Oct 27 10:08 debugdr-xr-xr-x 1 root root 0 Oct 27 10:08 devdr-xr-xr-x 1 root root 0 Oct 11 12:23 fsdr-xr-xr-x 1 root root 0 Oct 11 12:23 kerneldr-xr-xr-x 1 root root 0 Oct 11 12:23 netdr-xr-xr-x 1 root root 0 Oct 27 10:08 userdr-xr-xr-x 1 root root 0 Oct 11 12:23 vm[x@db]$ sysctl -a[x@db]$ sysctl -w[x@db]$ vim /etc/sysctl.confnet.ipv4.ip_forward = 1 network 1234567891011121314151617181920212223242526272829iwconfighwconfigethtoollspci| grep -i netsar -n DEV 1 2 //观察网卡流量@ mii-toolmii-tool -vmii-tool -wmii-tool -F 100baseTx-FD eth0 //将eth0改为100M,全双工工作模式mii-tool -r eth0 //恢复网卡工作模式ethtool eth0 //查询网卡基本设置ethtool -s eth0 autoneg off speed 100 duplex full //eth0设置为：100M，全双工，非协商@ ifconfigifconfig -h //打印帮助信息ifconfig -a //打印当前网卡信息ifconfig eth0 192.168.0.1 netmask 255.255.255.0 //设置eth0 IP及掩码ifconfig eth0:0 192.168.0.2 netmask 255.255.255.0 //设置eth0的第二个IPifconfig eth0:1 down //禁用eth0:0ifconfig eth0 up //启用eth0ifconfig eth0 hw ether xx:xx:xx:xx:xx:xx //修改网卡MAC地址ifconfig eth0 promisc //设置网卡工作于混杂模式下iwconfig eth0 essid &quot;tao&quot; //设置无线网卡的essid为“tao”iwconfig eth0 mode Managed //设置无线网卡工作在Managed模式下iwconfig eth0 mode Ad-hoc //设置无线网卡工作在Ad-hoc模式下iwconfig eth0 freq 2.422G //设置无线网卡工作频率 设备文件 字符型设备文件 块设备文件 网络设备文件 udev（device manager）[1][2] 1234udevadm info -a -p /sys/class/net/eth0cat /etc/udev/rules.d/70-persistent-net.rulesls -l /devls -l /sys/class/scsi_device disk 123fdisksmartctldd if=/dev/zero bs=512 count=100 | od -c 123sg_map -x (ll /sys/block/)echo &quot;- - -&quot; &gt; /sys/class/scsi_host/hostN/scanecho 1&gt; /sys/class/fc_host/hostN/issue_lip 123456789101112# 查看存储供应商参数及型号lsblk -Scat /sys/block/sdx/device/vendorcat /sys/block/sdx/device/model# 查看设备uuidlsscsi -iblkidll /dev/disk/by-idll /dev/disk/by-path/lib/udev/scsi_id --whitelisted --device=/dev/sd*/lib/udev/scsi_id -s 3 -g -u -d /dev/sd* 多路径[3] 123456789101112131415# rhel multipathmultipath -ll# EMC powerpathpowermt display dev=all# ultrapathupadmin show vlun# hitachi hdlmdlnkmgr view -pathdlnkmgr view -drvdlnkmgr view -sysdlnkmgr view -ludlnkmgr view -item -lu //查看存储SN和LUN_ID linux安装powerpath[4][5] 123456789101112131415# 安装软件rpm -ivh EMCPower.LINUX-6.0.1.00.00-043.RHEL6.x86_64.rpm# 注册licenseemcpreg -add key A3DF-3BDD-UHYT-CD6F-EV74-KJUTemcpreg -listpowermt check_registration# 查看服务ps -ef |grep powerservice powerpath status# 重启主机reboot# 用emc存储管理命令显示设备powermt display dev=all# 显示设备ls -l /dev/emcpower* Oracle绑定EMC设备规则rule 12345678910cat &gt;&gt; /etc/udev/rules.d/99-oracle-asmdevices.rules &lt;&lt; EOFSUBSYSTEM==&quot;block&quot;, KERNEL==&quot;emcpowera&quot;, GROUP=&quot;asmadmin&quot;, OWNER=&quot;grid&quot;, MODE=&quot;0660&quot;SUBSYSTEM==&quot;block&quot;, KERNEL==&quot;emcpowerb&quot;, GROUP=&quot;asmadmin&quot;, OWNER=&quot;grid&quot;, MODE=&quot;0660&quot;EOF/sbin/udevadm control --reload-rules/sbin/udevadm trigger --type=devices --action=changels -ltr /dev/emc*ASM 磁盘搜索路径需要改为/dev/emc* multipath[6][7] 12345678910111213yum install -y device-mapper*modprobe dm-multipathmodprobe dm-round-robinservice multipathd startmultipath -v2# 删除multipath -F# 查看wwidcat /etc/multipath/bindingsmultipath -v3multipath -llls -l /dev/mapper/* raid 123456789101112./MegaCli64 -FwTermLog -Dsply -aALL &gt; /tmp/ttylog.txt 创建 RAID 控制器日志（tty）./MegaCli64 -PDList -aALL &gt; /tmp/disks.txt 使用有关已安装的 RAID 控制器、虚拟磁盘和硬盘的信息创建列表./MegaCli64 -LDInfo -LALL -aALL &gt; /tmp/LDinfo.txt 使用有关现有 RAID 卷和配置的信息创建列表./MegaCli64 -AdpAllInfo -aALL &gt; /tmp/Adapterinfo.txt 使用有关 RAID 控制器设置的信息创建列表./MegaCli64 -AdpBbuCmd -aALL &gt; /tmp/Battery.txt 创建 RAID 控制器的电池状态的详细列表（充电状态、学习周期等）。./MegaCli64 -AdpEventLog -IncludeDeleted -f deleted.txt -aALL 使用自第一次控制器初始化以来的所有信息创建 RAID 控制器日志（tty）（注意：此文件将始终保存在 MegaCLI 根文件夹中） hba Linux 12345678910111213141516171819lspci | grep -i fibrelspci -vvv | grep -i fibresystool -av -c fc_host (ubuntu sysfsutils)@ 读取sys文件# HBA是否online和wwn号[root@361way.com ~]# cat /sys/class/fc_host/host4/port_stateOnline[root@361way.com ~]# cat /sys/class/fc_host/host4/port_name0x10000090fa9b1724#查看具体的HBA卡型号信息[root@361way.com ~]# cat /sys/class/scsi_host/host4/modelnameAJ763B/AH403A[root@361way.com ~]# cat /sys/class/scsi_host/host4/modeldescHP 8Gb Dual Channel PCI-e 2.0 FC HBA#常看ROM版本[root@irora09s ~]# cat /sys/class/scsi_host/host4/option_rom_version5.20x13 AIX 12lsdev -Cc adapter -S a | grep fcslscfg -pvl fcs_name HPUX 12ioscan -fnC fcfcmsutil /dev/fcd0 Reference oschina: Linux内核篇-硬件设备管理 sina blog: aix,hpux,linux查看FC HBA 卡信息 csdn: 查看FC HBA卡信息 csdn：各种平台查看HBA卡信息 cnblogs: CentOS新增硬盘，重新扫描总线 csdn: RAID原理分析总结 csdn: raid卡技术解析 cnblogs: sas3ircu linux.com Udev: Introduction-device-management-modern-linux ↩︎ csdn: redhat 7.x 、redhat 6.x查看硬盘UUID方法 ↩︎ 51cto: 深入理解iSCSI的2种多路径访问方式 ↩︎ 多路径软件查看命令及 EMC 绑定方法参考 ↩︎ Linux 6.5下安装EMC powerpath多路径软件安装 ↩︎ csdn: Linux下多路径multipath ↩︎ oschina: multipath配置指南 ↩︎","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"RAID阵列知识","slug":"os/rpm/linux-hardware-raid","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-10T03:40:58.404Z","comments":true,"path":"2019/09/01/os/rpm/linux-hardware-raid/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-hardware-raid/","excerpt":"","text":"raid Redundant Array of Independent (originally Inexpensive) Disks or RAID can be set up using hardware or software. Hardware RAID is more expensive, but offers better performance.Software RAID is cheaper and easier to manage, but it uses your CPU and your memory. technologies like mdadm, lvm and even zfs focus more on managability.The workload on the cpu for software RAID used to be high, but cpu’s have gotten a lot faster. raid level jbod jbod uses two or more disks, and is often called concatenating (spanning, spanned set, or spanned volume). Data is written to the first disk, until it is full. Then data is written to the second disk… The main advantage of jbod (Just a Bunch of Disks) is that you can create larger drives. JBOD offers no redundancy. raid 0 raid 0 uses two or more disks, and is often called striping (or stripe set, or striped volume). Data is divided in chunks, those chunks are evenly spread across every disk in the array. The main advantage of raid 0 is that you can create larger drives. raid 0 is the only raid without redundancy. raid 1 raid 1 uses exactly two disks, and is often called mirroring (or mirror set, or mirrored volume). All data written to the array is written on each disk. The main advantage of raid 1 is redundancy. The main disadvantage is that you lose at least half of your available disk space (in other words, you at least double the cost). raid2,3,4 raid 2 uses bit level striping, raid 3 byte level, and raid 4 is the same as raid 5, but with a dedicated parity disk. This is actually slower than raid 5, because every write would have to write parity to this one (bottleneck) disk. It is unlikely that you will ever see these raid levels in production. raid 5 raid 5 uses three or more disks, each divided into chunks. Every time chunks are written to the array, one of the disks will receive a parity chunk. Unlike raid 4, the parity chunk will alternate between all disks. The main advantage of this is that raid 5 will allow for full data recovery in case of one hard disk failure. raid6 raid 6 is very similar to raid 5, but uses two parity chunks. raid 6 protects against two hard disk failures. Oracle Solaris zfs calls this raidz2 (and also had raidz3 with triple parity).","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"Kernel configure and compile","slug":"os/rpm/linux-kernel-compile","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-09T06:33:29.172Z","comments":true,"path":"2019/09/01/os/rpm/linux-kernel-compile/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-kernel-compile/","excerpt":"","text":"123make config/menuconfig/xconfigmake modulesmake modules_install","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"认证体系 ldap","slug":"os/rpm/linux-ldap","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-09T06:21:10.321Z","comments":true,"path":"2019/09/01/os/rpm/linux-ldap/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-ldap/","excerpt":"","text":"LDAP 1yum install sssd authconfig-gtk krb5-workstation","categories":[{"name":"Security","slug":"Security","permalink":"http://jsunnyr.github.io/categories/Security/"}],"tags":[]},{"title":"user management用户管理","slug":"os/rpm/linux-management-user-management","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-10T03:44:45.274Z","comments":true,"path":"2019/09/01/os/rpm/linux-management-user-management/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-management-user-management/","excerpt":"","text":"用户管理文件 12345678910111213141516171819202122[root@centos7 ~]# rpm -qf /etc/default/useradd shadow-utils-4.1.5.1-25.el7_6.1.x86_64[root@centos7 ~]# rpm -ql shadow-utils/etc/default/useradd/etc/login.defs...output omitted[root@centos7 ~]# rpm -qf /etc/passwdsetup-2.8.71-10.el7.noarch[root@centos7 ~]# rpm -ql setup/etc/aliases/etc/bashrc/etc/csh.cshrc/etc/csh.login/etc/environment/etc/group/etc/gshadow/etc/passwd/etc/profile/etc/profile.d/etc/securetty/etc/shadow...output omitted Linux操作系统并不认识所谓的“用户名”，它辨识的标识是UID。 用户格式 1susu:x:1000:1000:,,,:/home/susu:/bin/bash 用户账户生命周期管理 12345# 修改密码老化时间chage -m 0 -M 90 -W 7 -I 14 username# 强制下次登陆修改密码chage -d 0 username","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"rhel 设置网络子接口，brctl调试bridge","slug":"os/rpm/linux-network-01-bridge-network","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-08T05:41:11.142Z","comments":true,"path":"2019/09/01/os/rpm/linux-network-01-bridge-network/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-network-01-bridge-network/","excerpt":"","text":"brctl 调试 bridge 123456789101112131415161718192021222324252627-- brctlbrctl addbr br0 #创建一个网桥br0brctl delbr br0 #删除网桥br0brctl addif br0 eth0 #把eth0 加入到网桥brctl addif br0 tap0 #把tap0 加入到网桥brctl delif br0 eth0 #把eth0 从网桥中删除brctl show #查看网桥信息iproute2:ip link add name br0 type bridge #新建一个网桥br0ip link set br0 up #开启br0ip link del dev br0 #删除br0ip link add set dev eth0 master br0 #添加eth0 到br0ip link add set dev tap0 master br0 #添加tap0 到br0 Reference qemu虚拟机网桥通讯过程","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"Linux 网络配置","slug":"os/rpm/linux-network-02-network-configuration-网络配置手册","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-08T05:51:15.009Z","comments":true,"path":"2019/09/01/os/rpm/linux-network-02-network-configuration-网络配置手册/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-network-02-network-configuration-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/","excerpt":"","text":"RHEL 对网卡接口设置网络参数后,可以指定网卡的默认网关,但无法设定通过特定网段的静态路由信息.","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"Linux ro","slug":"os/rpm/linux-network-03-route","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-08T05:51:06.738Z","comments":true,"path":"2019/09/01/os/rpm/linux-network-03-route/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-network-03-route/","excerpt":"","text":"route 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# 显示现在所有路由 #route -n root@Ubuntu:~# route Kernel IP routing table Destination Gateway Genmask Flags Metric Ref Use Iface 10.147.9.0 * 255.255.255.0 U 1 0 0 eth0 192.168.1.0 * 255.255.255.0 U 2 0 0 wlan0 192.168.122.0 * 255.255.255.0 U 0 0 0 virbr0 link-local * 255.255.0.0 U 1000 0 0 eth0 192.168.0.0 192.168.1.1 255.255.0.0 UG 0 0 0 wlan0 default 10.147.9.1 0.0.0.0 UG 0 0 0 eth0 root@Ubuntu:~# 结果是自上而下， 就是说， 哪条在前面， 哪条就有优先， 前面都没有， 就用最后一条default 举例， 添加一条路由(发往192.168.62这个网段的全部要经过网关192.168.1.1) route add -net 192.168.62.0 netmask 255.255.255.0 gw 192.168.1.1 删除一条路由 route del -net 192.168.122.0 netmask 255.255.255.0 删除的时候不用写网关 linux下添加路由的方法： 一：使用 route 命令添加 使用route 命令添加的路由，机器重启或者网卡重启后路由就失效了，方法： //添加到主机的路由 # route add –host 192.168.168.110 dev eth0 # route add –host 192.168.168.119 gw 192.168.168.1 //添加到网络的路由 # route add –net IP netmask MASK eth0 # route add –net IP netmask MASK gw IP # route add –net IP/24 eth1 //添加默认网关 # route add default gw IP //删除路由 # route del –host 192.168.168.110 dev eth0 二：在linux下设置永久路由的方法： 1.在/etc/rc.local里添加 方法： route add -net 192.168.3.0/24 dev eth0 route add -net 192.168.2.0/24 gw 192.168.3.254 2.在/etc/sysconfig/network里添加到末尾 方法：GATEWAY=gw-ip 或者 GATEWAY=gw-dev 3./etc/sysconfig/static-router : any net x.x.x.x/24 gw y.y.y.y ​ Route命令的正确用法 使用 Route 命令行工具查看并编辑计算机的 IP 路由表。Route 命令和语法如下所示： route [-f] [-p] [Command [Destination] [mask Netmask] [Gateway] [metric Metric]] [if Interface]] -f 清除所有网关入口的路由表。 -p 与 add 命令一起使用时使路由具有永久性。 Command 指定您想运行的命令 (Add/Change/Delete/Print)。 Destination 指定该路由的网络目标。 mask Netmask 指定与网络目标相关的网络掩码（也被称作子网掩码）。 Gateway 指定网络目标定义的地址集和子网掩码可以到达的前进或下一跃点 IP 地址。 metric Metric 为路由指定一个整数成本值标（从 1 至 ArrayArrayArrayArray），当在路由表(与转发的数据包目标地址最匹配)的多个路由中进行选择时可以使用。 if Interface 为可以访问目标的接口指定接口索引。若要获得一个接口列表和它们相应的接口索引，使用 route print 命令的显示功能。可以使用十进制或十六进制值进行接口索引。 /? 在命令提示符处显示帮助。 示例 若要显示 IP 路由表的全部内容，请键入： route print 若要显示以 10. 起始的 IP 路由表中的路由，请键入： route print 10.* 若要添加带有 1Array2.168.12.1 默认网关地址的默认路由，请键入： route add 0.0.0.0 mask 0.0.0.0 1Array2.168.12.1 若要向带有 255.255.0.0 子网掩码和 10.27.0.1 下一跃点地址的 10.41.0.0 目标中添加一个路由，请键入： route add 10.41.0.0 mask 255.255.0.0 10.27.0.1 若要向带有 255.255.0.0 子网掩码和 10.27.0.1 下一跃点地址的 10.41.0.0 目标中添加一个永久路由，请键入： route -p add 10.41.0.0 mask 255.255.0.0 10.27.0.1 若要向带有 255.255.0.0 子网掩码、10.27.0.1 下一跃点地址且其成本值标为 7 的 10.41.0.0 目标中添加一个路由，请键入： route add 10.41.0.0 mask 255.255.0.0 10.27.0.1 metric 7 若要向带有 255.255.0.0 子网掩码、10.27.0.1 下一跃点地址且使用 0x3 接口索引的 10.41.0.0 目标中添加一个路由，请键入： route add 10.41.0.0 mask 255.255.0.0 10.27.0.1 if 0x3 若要删除到带有 255.255.0.0 子网掩码的 10.41.0.0 目标的路由，请键入： route delete 10.41.0.0 mask 255.255.0.0 若要删除以 10. 起始的 IP 路由表中的所有路由，请键入： route delete 10.* 若要将带有 10.41.0.0 目标和 255.255.0.0 子网掩码的下一跃点地址从 10.27.0.1 修改为 10.27.0.25，请键入： route change 10.41.0.0 mask 255.255.0.0 10.27.0.25 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229------------------------------------------------------------------------- 首先,先了解传统的网络配置命令: 1. 使用ifconfig命令配置并查看网络接口情况 示例1: 配置eth0的IP，同时激活设备: # ifconfig eth0 192.168.4.1 netmask 255.255.255.0 up 示例2: 配置eth0别名设备 eth0:1 的IP，并添加路由 # ifconfig eth0:1 192.168.4.2 # route add –host 192.168.4.2 dev eth0:1 示例3:激活（禁用）设备 # ifconfig eth0:1 up(down) 示例4:查看所有（指定）网络接口配置 # ifconfig (eth0) 2. 使用route 命令配置路由表 示例1:添加到主机路由 # route add –host 192.168.4.2 dev eth0:1 # route add –host 192.168.4.1 gw 192.168.4.250 示例2:添加到网络的路由 # route add –net IP netmask MASK eth0 # route add –net IP netmask MASK gw IP # route add –net IP/24 eth1 示例3:添加默认网关 # route add default gw IP 示例4:删除路由 # route del –host 192.168.4.1 dev eth0:1 示例5:查看路由信息 # route 或 route -n (-n 表示不解析名字,列出速度会比route 快) 3.ARP 管理命令 示例1:查看ARP缓存 # arp 示例2: 添加 # arp –s IP MAC 示例3: 删除 # arp –d IP 4. ip是iproute2软件包里面的一个强大的网络配置工具，它能够替代一些传统的网络管理工具。例如：ifconfig、route等, 上面的示例完全可以用下面的ip命令实现,而且ip命令可以实现更多的功能.下面介绍一些示例: 4.0 ip命令的语法 ip命令的用法如下： ip [OPTIONS] OBJECT [COMMAND [ARGUMENTS]] 4.1 ip link set--改变设备的属性. 缩写：set、s 示例1：up/down 起动／关闭设备。 # ip link set dev eth0 up 这个等于传统的 # ifconfig eth0 up(down) 示例2：改变设备传输队列的长度。 参数:txqueuelen NUMBER或者txqlen NUMBER # ip link set dev eth0 txqueuelen 100 示例3：改变网络设备MTU(最大传输单元)的值。 # ip link set dev eth0 mtu 1500 示例4： 修改网络设备的MAC地址。 参数: address LLADDRESS # ip link set dev eth0 address 00:01:4f:00:15:f1 4.2 ip link show--显示设备属性. 缩写：show、list、lst、sh、ls、l -s选项出现两次或者更多次，ip会输出更为详细的错误信息统计。 示例: # ip -s -s link ls eth0 eth0: mtu 1500 qdisc cbq qlen 100 link/ether 00:a0:cc:66:18:78 brd ff:ff:ff:ff:ff:ff RX: bytes packets errors dropped overrun mcast 2449949362 2786187 0 0 0 0 RX errors: length crc fifo missed 0 0 0 0 0 TX: bytes packets errors dropped carrier collsns 178558497 1783946 332 0 332 35172 TX errors: aborted fifo window heartbeat 0 0 0 332 这个命令等于传统的 ifconfig eth0 5.1 ip address add--添加一个新的协议地址. 缩写：add、a 示例1：为每个地址设置一个字符串作为标签。为了和Linux-2.0的网络别名兼容，这个字符串必须以设备名开头，接着一个冒号， # ip addr add local 192.168.4.1/28 brd + label eth0:1 dev eth0 示例2: 在以太网接口eth0上增加一个地址192.168.20.0，掩码长度为24位(155.155.155.0)，标准广播地址，标签为eth0:Alias： # ip addr add 192.168.4.2/24 brd + dev eth1 label eth1:1 这个命令等于传统的: ifconfig eth1:1 192.168.4.2 5.2 ip address delete--删除一个协议地址. 缩写：delete、del、d # ip addr del 192.168.4.1/24 brd + dev eth0 label eth0:Alias1 5.3 ip address show--显示协议地址. 缩写：show、list、lst、sh、ls、l # ip addr ls eth0 5.4.ip address flush--清除协议地址. 缩写：flush、f 示例1 : 删除属于私网10.0.0.0/8的所有地址： # ip -s -s a f to 10/8 示例2 : 取消所有以太网卡的IP地址 # ip -4 addr flush label &quot;eth0&quot; 6. ip neighbour--neighbour/arp表管理命令 缩写 neighbour、neighbor、neigh、n 命令 add、change、replace、delete、fulsh、show(或者list) 6.1 ip neighbour add -- 添加一个新的邻接条目 ip neighbour change--修改一个现有的条目 ip neighbour replace--替换一个已有的条目 缩写：add、a；change、chg；replace、repl 示例1: 在设备eth0上，为地址10.0.0.3添加一个permanent ARP条目： # ip neigh add 10.0.0.3 lladdr 0:0:0:0:0:1 dev eth0 nud perm 示例2:把状态改为reachable # ip neigh chg 10.0.0.3 dev eth0 nud reachable 6.2.ip neighbour delete--删除一个邻接条目 示例1:删除设备eth0上的一个ARP条目10.0.0.3 # ip neigh del 10.0.0.3 dev eth0 6.3.ip neighbour show--显示网络邻居的信息. 缩写：show、list、sh、ls 示例1: # ip -s n ls 193.233.7.254 193.233.7.254. dev eth0 lladdr 00:00:0c:76:3f:85 ref 5 used 12/13/20 nud reachable 6.4.ip neighbour flush--清除邻接条目. 缩写：flush、f 示例1: (-s 可以显示详细信息) # ip -s -s n f 193.233.7.254 7. 路由表管理 7.1.缩写 route、ro、r 7.2.路由表 从Linux-2.2开始，内核把路由归纳到许多路由表中，这些表都进行了编号，编号数字的范围是1到255。另外， 为了方便，还可以在/etc/iproute2/rt_tables中为路由表命名。 默认情况下，所有的路由都会被插入到表main(编号254)中。在进行路由查询时，内核只使用路由表main。 7.3.ip route add -- 添加新路由 ip route change -- 修改路由 ip route replace -- 替换已有的路由 缩写：add、a；change、chg；replace、repl 示例1: 设置到网络10.0.0/24的路由经过网关193.233.7.65 # ip route add 10.0.0/24 via 193.233.7.65 示例2: 修改到网络10.0.0/24的直接路由，使其经过设备dummy # ip route chg 10.0.0/24 dev dummy 示例3: 实现链路负载平衡.加入缺省多路径路由，让ppp0和ppp1分担负载(注意：scope值并非必需，它只不过是告诉内核， 这个路由要经过网关而不是直连的。实际上，如果你知道远程端点的地址，使用via参数来设置就更好了)。 # ip route add default scope global nexthop dev ppp0 nexthop dev ppp1 # ip route replace default scope global nexthop dev ppp0 nexthop dev ppp1 示例4: 设置NAT路由。在转发来自192.203.80.144的数据包之前，先进行网络地址转换，把这个地址转换为193.233.7.83 # ip route add nat 192.203.80.142 via 193.233.7.83 示例5: 实现数据包级负载平衡,允许把数据包随机从多个路由发出。weight 可以设置权重. # ip route replace default equalize nexthop via 211.139.218.145 dev eth0 weight 1 nexthop via 211.139.218.145 dev eth1 weight 1 7.4.ip route delete-- 删除路由 缩写：delete、del、d 示例1:删除上一节命令加入的多路径路由 # ip route del default scope global nexthop dev ppp0 nexthop dev ppp1 7.5.ip route show -- 列出路由 缩写：show、list、sh、ls、l 示例1: 计算使用gated/bgp协议的路由个数 # ip route ls proto gated/bgp |wc 1413 9891 79010 示例2: 计算路由缓存里面的条数，由于被缓存路由的属性可能大于一行，以此需要使用-o选项 # ip -o route ls cloned |wc 159 2543 18707 示例3: 列出路由表TABLEID里面的路由。缺省设置是table main。TABLEID或者是一个真正的路由表ID或者是/etc/iproute2/rt_tables文件定义的字符串， 或者是以下的特殊值： all -- 列出所有表的路由； cache -- 列出路由缓存的内容。 ip ro ls 193.233.7.82 tab cache 示例4: 列出某个路由表的内容 # ip route ls table fddi153 示例5: 列出默认路由表的内容 # ip route ls 这个命令等于传统的: route 7.6.ip route flush -- 擦除路由表 示例1: 删除路由表main中的所有网关路由（示例：在路由监控程序挂掉之后）： # ip -4 ro flush scope global type unicast 示例2:清除所有被克隆出来的IPv6路由： # ip -6 -s -s ro flush cache 示例3: 在gated程序挂掉之后，清除所有的BGP路由： # ip -s ro f proto gated/bgp 示例4: 清除所有ipv4路由cache # ip route flush cache *** IPv4 routing cache is flushed. 7.7 ip route get -- 获得单个路由 .缩写：get、g 使用这个命令可以获得到达目的地址的一个路由以及它的确切内容。 ip route get命令和ip route show命令执行的操作是不同的。ip route show命令只是显示现有的路由，而ip route get命令在必要时会派生出新的路由。 示例1: 搜索到193.233.7.82的路由 # ip route get 193.233.7.82 193.233.7.82 dev eth0 src 193.233.7.65 realms inr.ac cache mtu 1500 rtt 300 示例2: 搜索目的地址是193.233.7.82，来自193.233.7.82，从eth0设备到达的路由（这条命令会产生一条非常有意思的路由，这是一条到193.233.7.82的回环路由） # ip r g 193.233.7.82 from 193.233.7.82 iif eth0 193.233.7.82 from 193.233.7.82 dev eth0 src 193.233.7.65 realms inr.ac/inr.ac cache mtu 1500 rtt 300 iif eth0 8. ip route -- 路由策略数据库管理命令 命令 add、delete、show(或者list) 注意：策略路由(policy routing)不等于路由策略(rouing policy)。 在某些情况下，我们不只是需要通过数据包的目的地址决定路由，可能还需要通过其他一些域：源地址、IP协议、传输层端口甚至数据包的负载。 这就叫做：策略路由(policy routing)。 8.1. ip rule add -- 插入新的规则 ip rule delete -- 删除规则 缩写：add、a；delete、del、d 示例1: 通过路由表inr.ruhep路由来自源地址为192.203.80/24的数据包 ip ru add from 192.203.80/24 table inr.ruhep prio 220 示例2:把源地址为193.233.7.83的数据报的源地址转换为192.203.80.144，并通过表1进行路由 ip ru add from 193.233.7.83 nat 192.203.80.144 table 1 prio 320 示例3:删除无用的缺省规则 ip ru del prio 32767 8.2. ip rule show -- 列出路由规则 缩写：show、list、sh、ls、l 示例1: # ip ru ls 0: from all lookup local 32762: from 192.168.4.89 lookup fddi153 32764: from 192.168.4.88 lookup fddi153 32766: from all lookup main 32767: from all lookup 253 9. ip maddress -- 多播地址管理 缩写：show、list、sh、ls、l 9.1.ip maddress show -- 列出多播地址 示例1: # ip maddr ls dummy 9.2. ip maddress add -- 加入多播地址 ip maddress delete -- 删除多播地址 缩写：add、a；delete、del、d 使用这两个命令，我们可以添加／删除在网络接口上监听的链路层多播地址。这个命令只能管理链路层地址。 示例1: 增加 # ip maddr add 33:33:00:00:00:01 dev dummy 示例2: 查看 # ip -O maddr ls dummy 2: dummy link 33:33:00:00:00:01 users 2 static link 01:00:5e:00:00:01 示例3: 删除 # ip maddr del 33:33:00:00:00:01 dev dummy 10.ip mroute -- 多播路由缓存管理 10.1. ip mroute show -- 列出多播路由缓存条目 缩写：show、list、sh、ls、l 示例1:查看 # ip mroute ls (193.232.127.6, 224.0.1.39) Iif: unresolved (193.232.244.34, 224.0.1.40) Iif: unresolved (193.233.7.65, 224.66.66.66) Iif: eth0 Oifs: pimreg 示例2:查看 # ip -s mr ls 224.66/16 (193.233.7.65, 224.66.66.66) Iif: eth0 Oifs: pimreg 9383 packets, 300256 bytes 11. ip tunnel -- 通道配置 缩写 tunnel、tunl 11.1.ip tunnel add -- 添加新的通道 ip tunnel change -- 修改现有的通道 ip tunnel delete -- 删除一个通道 缩写：add、a；change、chg；delete、del、d 示例1:建立一个点对点通道，最大TTL是32 # ip tunnel add Cisco mode sit remote 192.31.7.104 local 192.203.80.1 ttl 32 11.2.ip tunnel show -- 列出现有的通道 缩写：show、list、sh、ls、l 示例1: # ip -s tunl ls Cisco 12. ip monitor和rtmon -- 状态监视 ip命令可以用于连续地监视设备、地址和路由的状态。这个命令选项的格式有点不同，命令选项的名字叫做monitor，接着是操作对象： ip monitor [ file FILE ] [ all | OBJECT-LIST ] 示例1: # rtmon file /var/log/rtmon.log 示例2: # ip monitor file /var/log/rtmon.log r Reference csdn: RHEL7/CentOS7 ip 命令常用用法 csdn: linux iproute2包中ip命令的使用 csdn: linux网络工具iproute2的使用简介 cnblogs: linux中nmcli命令使用及网络配置 51cto:nmcli命令使用以及网卡绑定bond","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"nmcli configure network","slug":"os/rpm/linux-network-nmcli-nmcli","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-09T06:25:58.685Z","comments":true,"path":"2019/09/01/os/rpm/linux-network-nmcli-nmcli/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-network-nmcli-nmcli/","excerpt":"","text":"1234567# 修改配置文件[root@localhost ~ ] # nmcli connection add type bond ifname bond1 mode 1# 临时配置，不写入配置文件[root@localhost ~ ] # nmcli connection add type bond ifname bond1 mode 1 ip4 192.168.10.215/24 gw4 192.168.0.1[root@localhost ~ ] # nmcli connection add type bond-slave ifname eth0 master bond1[root@localhost ~ ] # nmcli connection add type bond-slave ifname eth1 master bond1","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"openssh ssh_config","slug":"os/rpm/linux-openssh-ssh-config","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-09T07:02:39.590Z","comments":true,"path":"2019/09/01/os/rpm/linux-openssh-ssh-config/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-openssh-ssh-config/","excerpt":"","text":"","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"openssh sshd_config","slug":"os/rpm/linux-openssh-sshd-config","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-09T07:02:32.920Z","comments":true,"path":"2019/09/01/os/rpm/linux-openssh-sshd-config/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-openssh-sshd-config/","excerpt":"","text":"123PermitRootLogin yes|no|without-passwordPasswordAuthentication noUseDNS no","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"linux history以用户名区分存储在/var/log/history/下","slug":"os/rpm/linux-profile-01-以用户名区分的history","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-21T04:27:25.836Z","comments":true,"path":"2019/09/01/os/rpm/linux-profile-01-以用户名区分的history/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-profile-01-%E4%BB%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%8C%BA%E5%88%86%E7%9A%84history/","excerpt":"","text":"将一下内容写入/etc/profile.通过上述步骤，可以在 /var/log/history 目录下以每个用户为名新建一个文件夹，每次用户退出后都会产生以用户名、登录IP、时间的日志文件，包含此用户本次的所有操作（root用户除外）。 1234567891011121314151617181920212223historyUSER=`whoami`USER_IP=`who -u am i 2&gt;/dev/null| awk &#x27;&#123;print $NF&#125;&#x27;|sed -e &#x27;s/[()]//g&#x27;`if [ &quot;$USER_IP&quot; = &quot;&quot; ]; then2USER_IP=`hostname`fiif [ ! -d /var/log/history ]; then2mkdir /var/log/history2chmod 777 /var/log/historyfiif [ ! -d /var/log/history/$&#123;LOGNAME&#125; ]; then2mkdir /var/log/history/$&#123;LOGNAME&#125;2chmod 300 /var/log/history/$&#123;LOGNAME&#125;fiexport HISTSIZE=4096DT=`date +&quot;%Y%m%d_%H:%M:%S&quot;`export HISTFILE=&quot;/var/log/history/$&#123;LOGNAME&#125;/$&#123;USER&#125;@$&#123;USER_IP&#125;_$DT&quot;chmod 600 /var/log/history/$&#123;LOGNAME&#125;/*history* 2&gt;/dev/null","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"Linux PXE","slug":"os/rpm/linux-pxe-PXE安装操作系统","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-09T06:16:09.282Z","comments":true,"path":"2019/09/01/os/rpm/linux-pxe-PXE安装操作系统/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-pxe-PXE%E5%AE%89%E8%A3%85%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"自动化部署操作系统的工具及方法 Linux kickstart 使用kickstart的方式： 图形化：system-config-kickstart 文本：修改 anaconda-ks.cfg 验证kickstart语法的方式： ksvalidator Windows IBM POWER HPUX BSD KS文件制作 anaconda system-config-kickstart","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"}],"tags":[]},{"title":"Linux ntp配置(ntp, chrony)","slug":"os/rpm/linux-rhel-centos-ntp-chronyd","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-08T05:43:01.100Z","comments":true,"path":"2019/09/01/os/rpm/linux-rhel-centos-ntp-chronyd/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-rhel-centos-ntp-chronyd/","excerpt":"","text":"Linux ntp / chrony / timedate / date / hwclock 1234systemctl status ntpd (systemctl status chronyd)ntpstat (chronyc tracking)ntpq -pn (chronyc -n sources -v / chronyc -n sourcestats -v / chronyc activity)ntpdate IP-addr (chronyc makestep) 1234567891011121314151617181920[x@db ~]$ systemctl status systemd-timedated.service● systemd-timedated.service - Time &amp; Date Service Loaded: loaded (/usr/lib/systemd/system/systemd-timedated.service; static; vendor preset: disabled) Active: inactive (dead) Docs: man:systemd-timedated.service(8) man:localtime(5) http://www.freedesktop.org/wiki/Software/systemd/timedated[x@db ~]$ [x@db ~]$ timedatectl list-timezones set-ntp set-timezone set-local-rtc set-time status [x@db ~]$ timedatectl status Local time: Tue 2020-10-27 00:42:00 CST Universal time: Mon 2020-10-26 16:42:00 UTC RTC time: Mon 2020-10-26 16:42:00 Time zone: Asia/Shanghai (CST, +0800) NTP enabled: noNTP synchronized: yes RTC in local TZ: no DST active: n/a 1234567891011121314151617181920212223242526272829[root@Geeklp-Administrator ~]# hwclock 2017年12月18日 星期一 16时39分40秒 -0.110050 秒[root@Geeklp-Administrator ~]# hwclock --show2017年12月18日 星期一 16时39分57秒 -0.293885 秒[root@Geeklp-Administrator ~]# hwclock -s[root@Geeklp-Administrator ~]# hwclock --hctosys[root@Geeklp-Administrator ~]# hwclock 2017年12月18日 星期一 17时17分39秒 -0.953704 秒[root@Geeklp-Administrator ~]# hwclock -w[root@Geeklp-Administrator ~]# hwclock 2017年12月18日 星期一 17时02分16秒 -0.646804 秒[root@Geeklp-Administrator ~]# hwclock --systohc[root@Geeklp-Administrator ~]# date2017年 12月 18日 星期一 17:14:08 CST[root@Geeklp-Administrator ~]# hwclock 2017年12月18日 星期一 17时14分17秒 -0.285800 秒[root@Geeklp-Administrator ~]# hwclock -s --date &quot;12 oct 2013 13:01&quot;[root@Geeklp-Administrator ~]# hwclock 2017年12月18日 星期一 17时09分37秒 -0.047061 秒[root@Geeklp-Administrator ~]# date2017年 12月 18日 星期一 17:09:44 CST[root@Geeklp-Administrator ~]# hwclock --set --date &quot;2015-11-23 21:17:23&quot; --utc[root@Geeklp-Administrator ~]# hwclock 2015年11月23日 星期一 21时18分53秒 -0.208850 秒[root@Geeklp-Administrator ~]# date 2017年 12月 18日 星期一 17:12:54 CST AIX Reference csdn: RHEL7/CentOS7 chronyc 命令常用用法,代替 ntpstat/ntpq/ntpdate csdn:ntp 、ntpdate 、chrony 时间同步 csdn: Linux（RHEL7及CentOS7）的时间设置篇（timedatectl，date，hwclock）","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"什么是src.rpm","slug":"os/rpm/linux-rhel-src-rpm","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-10T03:42:15.861Z","comments":true,"path":"2019/09/01/os/rpm/linux-rhel-src-rpm/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-rhel-src-rpm/","excerpt":"","text":"Reference redhat.com Production Support Scope of Coverage Development Support Scope of Coverage access.redhat.com documentation CHAPTER 3. PACKAGING SOFTWARE access.redhat.com case Does Red Hat Support Compiling RPMs? How do I build a source RPM using rpmbuild? How to create repository of source packages ? rpm .src.rpm Accord to the the “Production Support Scope of Coverage” and “Developer Support Scope of Coverage”, Red Hat doesn’t support any rpm packages which have been modified, even if the rpm package was compiled from the source code as shipped by Red Hat. 123456789101112131415# to check a validation of a rpm package from redhat or not$ rpm -qi firefoxName : firefox Relocations: (not relocatable)Version : 3.0.18 Vendor: Red Hat, Inc.Release : 1.el5_4 Build Date: Thu 04 Feb 2010 08:58:36 PM CSTInstall Date: Sat 20 Feb 2010 10:07:06 AM CST Build Host: ls20-bc2-14.build.redhat.comGroup : Applications/Internet Source RPM: firefox-3.0.18-1.el5_4.src.rpmSize : 15222260 License: MPLv1.1 or GPLv2+ or LGPLv2+Signature : DSA/SHA1, Tue 09 Feb 2010 04:48:54 PM CST, Key ID 5326810137017186Packager : Red Hat, Inc. &lt;http://bugzilla.redhat.com/bugzilla&gt;URL : http://www.mozilla.org/projects/firefox/Summary : Mozilla Firefox Web browser.Description :Mozilla Firefox is an open-source web browser, designed for standardscompliance, performance and portability. 1yum install rpm-build rpmdevtools get .src.rpm 12345678910111213141516# [How to create repository of source packages ?](https://access.redhat.com/solutions/2026833) # cat /etc/yum.repos.d/srpms.repo [rhel-src] name=Red Hat Enterprise Linux $releasever - $basearch - Source baseurl=http://ftp.redhat.com/pub/redhat/linux/enterprise/$releasever/en/os/SRPMS/ enabled=1 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release # rm -rf /var/cache/yum/* # yum clean all # reposync --repoid=rhel-src --source The Result of the command should be as below, # reposync --repoid=rhel-src --source [rhel-src: 1 of 6404 ] Downloading 389-ds-base-1.2.10.2-15.el6.src.rpm 389-ds-base-1.2.10.2-15.el6.src.rpm [rhel-src: 2 of 6404 ] Downloading 389-ds-base-1.2.10.2-18.el6_3.src.rpm","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"systemd","slug":"os/rpm/linux-rhel-systemd","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-10T03:43:20.139Z","comments":true,"path":"2019/09/01/os/rpm/linux-rhel-systemd/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-rhel-systemd/","excerpt":"","text":"reference Systemd systemd 123systemctl get-defaultsystemctl isolate targetsystemctl set-default target unit 1systemctl -t help","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"}],"tags":[]},{"title":"uuid","slug":"os/rpm/linux-rhel-uuid","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-10T03:45:33.160Z","comments":true,"path":"2019/09/01/os/rpm/linux-rhel-uuid/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-rhel-uuid/","excerpt":"","text":"uuid A uuid or universally unique identifier is used to identify objects which is 128bit long. Older versions of Linux have a vol_id utility to display the uuid of a file system.(RHEL 5 puts vol_id in /lib/udev/vol_id, which is not in the $PATH). The utility is not available in standard installations of RHEL6 or Debian6. 12345root@debian:~# vol_id --uuid /dev/sda1root@rhel5 ~# /lib/udev/vol_id -u /dev/sda1[root@centos7 ~]# tune2fs -l /dev/vda1 | grep -i uuidFilesystem UUID: 4b499d76-769a-40a0-93dc-4a31a59add28[root@centos7 ~]# grep ^[^#] /boot/grub2/grub.cfg","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"RHEL8 NetworkManager","slug":"os/rpm/linux-rhel8-network-NetworkManager","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-10T03:36:27.671Z","comments":true,"path":"2019/09/01/os/rpm/linux-rhel8-network-NetworkManager/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-rhel8-network-NetworkManager/","excerpt":"","text":"NetworkManager nmcli nmtui nm-connection-editor / control-center cockpit ansible role 1yum install NetworkManager NetworkManager-tui bash-completion","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"}],"tags":[]},{"title":"Linux iptables 主机防火墙","slug":"os/rpm/linux-security-iptabes","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-08T05:43:36.706Z","comments":true,"path":"2019/09/01/os/rpm/linux-security-iptabes/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-security-iptabes/","excerpt":"","text":"iptables 12345678910111213141516171819[root@master tmp]# cat /etc/redhat-release Red Hat Enterprise Linux Server release 5.1 (Santiago)[root@master tmp]# service iptables startiptables: No config file. [WARNING][root@master tmp]# service iptables statusTable: filterChain INPUT (policy ACCEPT)num target prot opt source destination Chain FORWARD (policy ACCEPT)num target prot opt source destination Chain OUTPUT (policy ACCEPT)num target prot opt source destination[root@master tmp]# service iptables stopiptables: Setting chains to policy ACCEPT: filter [ OK ]iptables: Flushing firewall rules: [ OK ]iptables: Unloading modules: [ OK ] 12345678910vim /etc/sysconfig/iptables-- 永久性生效，重启后不会复原chkconfig iptables on #开启 chkconfig iptables off #关闭 -- 即时生效，重启后复原service iptables stop --停止service iptables start --启动 [!NOTE] Reference https://blog.51cto.com/13677371/2094355 http://www.zsythink.net/archives/1199/ https://www.cnblogs.com/alimac/p/5848372.html","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"shell终端 bind","slug":"os/rpm/linux-terminal-bind","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-09T07:06:45.371Z","comments":true,"path":"2019/09/01/os/rpm/linux-terminal-bind/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-terminal-bind/","excerpt":"","text":"bind 12345678910[check@centos7 ~]$ help bindSet Readline key bindings and variables. Bind a key sequence to a Readline function or a macro, or set a Readline variable. The non-option argument syntax is equivalent to that found in ~/.inputrc, but must be passed as a single argument: e.g., bind &#x27;&quot;\\C-x\\C-r&quot;: re-read-init-file&#x27;.[check@centos7 ~]$ bind -x &#x27;&quot;\\C-t&quot;:pwd&#x27;/home/check[check@centos7 ~]$","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"Linux udev","slug":"os/rpm/linux-udev","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-08T05:44:17.336Z","comments":true,"path":"2019/09/01/os/rpm/linux-udev/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-udev/","excerpt":"","text":"RHEL udev Hotplugging (which is the word used to describe the process of inserting devices into a running system) is achieved in a Linux distribution by a combination of three components:¬†Udev, HAL, and Dbus. Udev[1] supplies a dynamic device directory containing only the nodes for devices which are connected to the system. It creates or removes the device node files in the /dev directory as they are plugged in or taken out. Dbus is like a system bus which is used for inter-process communication. The HAL gets information from the Udev service, when a device is attached to the system and it creates an XML representation of that device. It then notifies the corresponding desktop application like Nautilus through the Dbus and Nautilus will open the mounted device‚ linux.com Udev: Introduction to Device Management In Modern Linux System ↩︎","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"Linux terminal 快捷键组合","slug":"os/rpm/linux-unusual-character","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-08T05:45:24.675Z","comments":true,"path":"2019/09/01/os/rpm/linux-unusual-character/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-unusual-character/","excerpt":"","text":"• Command-line editing, allowing you to use vi- or emacs-style editing commands on your command lines. • Key bindings that allow you to set up customized editing key sequences. • Integrated programming features: the functionality of several external UNIX commands, including test, expr, getopt, and echo, has been integrated into the shell itself, enabling common programming tasks to be done more cleanly and efficiently. • Control structures, especially the select construct, which enables easy menu generation. • New options and variables that give you more ways to customize your environment. • One dimensional arrays that allow easy referencing and manipulation of lists of data. • Dynamic loading of built-ins, plus the ability to write your own and load them into the running shell. 转义字符 快捷键 含义 ASC码 \\a Ctrl-G 铃声 \\007 \\b Ctrl-H 退格符 \\010 \\f Ctrl-L 走行换页 \\014 \\n Ctrl-J 新行 \\012 \\r Ctrl-M 回车 \\015 \\t Ctrl-I Tab键 \\011","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"}],"tags":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/tags/GNULINUX/"}]},{"title":"RHEL yum repo变量详解","slug":"os/rpm/linux-yum-vars","date":"2019-08-31T16:00:00.000Z","updated":"2021-12-08T05:46:43.105Z","comments":true,"path":"2019/09/01/os/rpm/linux-yum-vars/","link":"","permalink":"http://jsunnyr.github.io/2019/09/01/os/rpm/linux-yum-vars/","excerpt":"","text":"yum yum 相关变量 $arch 作用：标识cpu的架构，如i386，i486，i586等 默认取值：默认根据cpu架构自动取值 设置方法： 在/etc/yum/vars/arch文件写入一个值，这个值就是这个变量的值（优先级高） $basearch 作用：标识cpu的基本架构。例如i486和i586等使用一个基本架构i386，AMD64和Intel64有一个基本的架构x86_64。 默认取值：默认根据cpu架构自动取值 设置方法：在/etc/yum/vars/basearch文件写入一个值，这个值就是这个变量的值（优先级高） $releasever 作用：标识操作系统的版本号。 默认取值：先查找/etc/yum.conf配置文件中distroverpkg配置的value，然后取得value对应的rpm包名，最后获取到这个rpm包的release版本号就是这个变量的值（如果是centos系统，默认情况下distroverpkg的value为centos-release，再取centos-release这个包的release号） 设置方法：在/etc/yum/vars/releasever文件写入一个值，这个值就是这个变量的值（优先级高） 获取相关变量 123456import yum;import pprint;yb = yum.YumBase();pprint.pprint(yb.conf.yumvar, width=1);","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"认证培训","slug":"security-cert","date":"2018-07-22T16:00:00.000Z","updated":"2021-12-10T04:19:14.965Z","comments":true,"path":"2018/07/23/security-cert/","link":"","permalink":"http://jsunnyr.github.io/2018/07/23/security-cert/","excerpt":"","text":"认证名称 机构 CompTIA Security+ Certificated Ethical Hacker CCSP OSCP CISSP cissp 需要从业4年与cissp认证者引荐 书籍： CISSP认证考试指南 ALL in ONE CISSP官方学习指南（白色封皮） Official ISC2 Guide to the CISSP CBK(课堂教材） 职称 上海中级经济师(工商管理) 上海理工科类职称(计算机)","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"RHEL 7 通过 network 服务配置ipv6地址","slug":"template","date":"2018-07-22T16:00:00.000Z","updated":"2021-12-10T04:18:55.366Z","comments":true,"path":"2018/07/23/template/","link":"","permalink":"http://jsunnyr.github.io/2018/07/23/template/","excerpt":"","text":"","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"RHEL 7 通过 network 服务配置ipv6地址","slug":"rhel-2018-01-configure-ipv6-address-配置ipv6地址","date":"2018-07-22T16:00:00.000Z","updated":"2021-12-07T05:11:23.216Z","comments":true,"path":"2018/07/23/rhel-2018-01-configure-ipv6-address-配置ipv6地址/","link":"","permalink":"http://jsunnyr.github.io/2018/07/23/rhel-2018-01-configure-ipv6-address-%E9%85%8D%E7%BD%AEipv6%E5%9C%B0%E5%9D%80/","excerpt":"","text":"RHEL 7 配置ipv6地址 12345678910vim /etc/sysconfig/network-scripts/ifcfg-etheIPV6INIT=yesIPV6_AUTOCONF=noIPV6ADDR=2402:3c00:1f03:2:10:219:52:27/64IPV6_DEFAULTGW=2402:3c00:1f03:2:10:219:52:254Isystemctl restart networkping6 2402:3c00:1f03:2:10:219:52:254","categories":[{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"}]},{"title":"ISO烧录","slug":"os/rpm/linux-disk-burning","date":"2015-08-31T16:00:00.000Z","updated":"2021-12-10T03:47:19.817Z","comments":true,"path":"2015/09/01/os/rpm/linux-disk-burning/","link":"","permalink":"http://jsunnyr.github.io/2015/09/01/os/rpm/linux-disk-burning/","excerpt":"","text":"rawrite Rawrite32 The NetBSD image writing tool disk druid PartitionMagic","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"彻底抹除磁盘上的用户数据","slug":"os/rpm/linux-disk-destory-data-破坏磁盘数据","date":"2015-08-31T16:00:00.000Z","updated":"2021-12-10T03:47:03.511Z","comments":true,"path":"2015/09/01/os/rpm/linux-disk-destory-data-破坏磁盘数据/","link":"","permalink":"http://jsunnyr.github.io/2015/09/01/os/rpm/linux-disk-destory-data-%E7%A0%B4%E5%9D%8F%E7%A3%81%E7%9B%98%E6%95%B0%E6%8D%AE/","excerpt":"","text":"shred -n表示写入随机数的次数，-z表示写入零1次，而-v表示显示详情。因此，本例中要写4次，前3次是写随机数，后一次写0。 1 su -c &quot;shred -n 3 -z -v /dev/sdb&quot; badblocks本来是检查磁盘坏道的程序，但因为它有读写检查的功能，因此，也可以用来擦洗硬盘。 -w表示写，-p表示pass，即次数，而-t表示test，即用随机数来测试。 1 su -c &quot;badblocks -v -w -p 9 -t random /dev/sdb&quot; dd程序 12 su -c &quot;dd bs=64k if=/dev/zero of=/dev/sdb&quot; su -c &quot;dd if=/dev/urandom of=/dev/sdb&quot;","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"MegaRAID","slug":"os/rpm/linux-hardware-megaraid","date":"2015-08-31T16:00:00.000Z","updated":"2021-12-17T10:52:28.951Z","comments":true,"path":"2015/09/01/os/rpm/linux-hardware-megaraid/","link":"","permalink":"http://jsunnyr.github.io/2015/09/01/os/rpm/linux-hardware-megaraid/","excerpt":"","text":"12345678910111213141516171819202122232425# RAID卡的全部基本信息/opt/MegaRAID/storcli/storcli64 /c0 show all# 系统下的实时log/opt/MegaRAID/storcli/storcli64 /c0 show termlog# Phy的连接错误/opt/MegaRAID/storcli/storcli64 /c0/pall show all# 硬盘的基本信息/opt/MegaRAID/storcli/storcli64 /c0/eall/sall show all# RAID阵列的信息/opt/MegaRAID/storcli/storcli64 /c0/vall show all# RAID卡的Eventlog/opt/MegaRAID/storcli/storcli64 /c0 show events# RAID卡的历史log/opt/MegaRAID/storcli/storcli64 /c0 show alilog# 最主要日志文件是如下命令收取的信息/opt/MegaRAID/storcli/storcli64 /c0 show alilog/opt/MegaRAID/storcli/storcli64 /c0 show termlog","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"log and logfile 管理","slug":"os/rpm/linux-maintance-log","date":"2015-08-31T16:00:00.000Z","updated":"2021-12-09T06:36:27.611Z","comments":true,"path":"2015/09/01/os/rpm/linux-maintance-log/","link":"","permalink":"http://jsunnyr.github.io/2015/09/01/os/rpm/linux-maintance-log/","excerpt":"","text":"涉及到： - logger - logrotate - systemctl 日志结构 12345678910# rhel7# 根据类别(facility)及优先级别(severity)筛选系统记录# 将信息写入 /var/log 下对应的日志文件，统一管理日志文件systemctl status rsyslog# 从内核收集消息# 包括启动进程、标准输出及错误、进程运行启动等记录# 重启不保存systemctl status systemd-journald 日志转储logrotate systemd日志 systemd的日志数据存储在带有索引的二进制文件，默认保存在/run/log/journal/目录中，重启系统会清空，可使用journalctl命令查看systemd日志信息。 123journalctl -fman journalctljournalctl -xfu service.name","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"}]},{"title":"Linux equipment management 设备管理","slug":"os/rpm/linux-management-equipment-management","date":"2015-08-31T16:00:00.000Z","updated":"2021-12-09T06:45:20.693Z","comments":true,"path":"2015/09/01/os/rpm/linux-management-equipment-management/","link":"","permalink":"http://jsunnyr.github.io/2015/09/01/os/rpm/linux-management-equipment-management/","excerpt":"","text":"操作系统五大管理功能： 处理器管理 存储器管理 设备管理 文件管理 作业管理 操作系统五大功能之设备管理","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"}],"tags":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/tags/GNULINUX/"}]},{"title":"linux file management文件管理","slug":"os/rpm/linux-management-file-management","date":"2015-08-31T16:00:00.000Z","updated":"2021-12-09T06:44:32.619Z","comments":true,"path":"2015/09/01/os/rpm/linux-management-file-management/","link":"","permalink":"http://jsunnyr.github.io/2015/09/01/os/rpm/linux-management-file-management/","excerpt":"","text":"操作系统五大管理功能： 处理器管理 存储器管理 设备管理 文件管理 作业管理 操作系统五大功能之文件管理 12345678910111213# 文件默认权限`umask`[root@centos7 ~]# rpm -ql bash/usr/bin/umask...output omitted# 文件权限# rwx(421)# ugoa# +-=# chmod a+x,a-w file.name[root@centos7 ~]# ls -l Dockerfile -rw-r--r-- 1 root root 97 Jun 4 10:01 Dockerfile","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"}],"tags":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/tags/GNULINUX/"}]},{"title":"linux 进程管理","slug":"os/rpm/linux-management-process-management","date":"2015-08-31T16:00:00.000Z","updated":"2021-12-10T03:40:01.878Z","comments":true,"path":"2015/09/01/os/rpm/linux-management-process-management/","link":"","permalink":"http://jsunnyr.github.io/2015/09/01/os/rpm/linux-management-process-management/","excerpt":"","text":"linux 进程 man 7 signal 123456789# 服务状态说明loaded 配置文件被处理active(running) 一个或多个进程持续运行active(exited) 成功完成一个“一次性”配置active(waiting) 运行但等待“事件”inactive 未运行enabled 开机启动disabled 不随开机启动static 不能被启用，但可以被已启用单元自动启动","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"}],"tags":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/tags/GNULINUX/"}]},{"title":"Linux process management 处理器管理","slug":"os/rpm/linux-management-processor-management","date":"2015-08-31T16:00:00.000Z","updated":"2021-12-10T03:40:08.966Z","comments":true,"path":"2015/09/01/os/rpm/linux-management-processor-management/","link":"","permalink":"http://jsunnyr.github.io/2015/09/01/os/rpm/linux-management-processor-management/","excerpt":"","text":"操作系统五大管理功能： 处理器管理 存储器管理 设备管理 文件管理 作业管理 操作系统五大功能之处理器管理","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"}],"tags":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/tags/GNULINUX/"}]},{"title":"Linux storage management 存储器管理","slug":"os/rpm/linux-management-storage-management","date":"2015-08-31T16:00:00.000Z","updated":"2021-12-09T06:46:23.519Z","comments":true,"path":"2015/09/01/os/rpm/linux-management-storage-management/","link":"","permalink":"http://jsunnyr.github.io/2015/09/01/os/rpm/linux-management-storage-management/","excerpt":"","text":"操作系统五大管理功能： 处理器管理 存储器管理 设备管理 文件管理 作业管理 操作系统五大功能之存储器管理","categories":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"}],"tags":[{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/tags/GNULINUX/"}]}],"categories":[{"name":"文章分类","slug":"文章分类","permalink":"http://jsunnyr.github.io/categories/%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/"},{"name":"Programming","slug":"Programming","permalink":"http://jsunnyr.github.io/categories/Programming/"},{"name":"Powershell","slug":"Programming/Powershell","permalink":"http://jsunnyr.github.io/categories/Programming/Powershell/"},{"name":"BSD","slug":"BSD","permalink":"http://jsunnyr.github.io/categories/BSD/"},{"name":"Knowledge","slug":"Knowledge","permalink":"http://jsunnyr.github.io/categories/Knowledge/"},{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/categories/Oracle/"},{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/categories/Linux/"},{"name":"OpenBSD","slug":"OpenBSD","permalink":"http://jsunnyr.github.io/categories/OpenBSD/"},{"name":"Kernel","slug":"Kernel","permalink":"http://jsunnyr.github.io/categories/Kernel/"},{"name":"Outline","slug":"Outline","permalink":"http://jsunnyr.github.io/categories/Outline/"},{"name":"MySQL","slug":"MySQL","permalink":"http://jsunnyr.github.io/categories/MySQL/"},{"name":"OS","slug":"OS","permalink":"http://jsunnyr.github.io/categories/OS/"},{"name":"Network","slug":"Network","permalink":"http://jsunnyr.github.io/categories/Network/"},{"name":"OpenStack","slug":"OpenStack","permalink":"http://jsunnyr.github.io/categories/OpenStack/"},{"name":"Security","slug":"Security","permalink":"http://jsunnyr.github.io/categories/Security/"},{"name":"JS","slug":"JS","permalink":"http://jsunnyr.github.io/categories/JS/"},{"name":"tools","slug":"tools","permalink":"http://jsunnyr.github.io/categories/tools/"},{"name":"CMD","slug":"Programming/CMD","permalink":"http://jsunnyr.github.io/categories/Programming/CMD/"},{"name":"Database","slug":"Database","permalink":"http://jsunnyr.github.io/categories/Database/"},{"name":"Oracle","slug":"Database/Oracle","permalink":"http://jsunnyr.github.io/categories/Database/Oracle/"},{"name":"Windows","slug":"Windows","permalink":"http://jsunnyr.github.io/categories/Windows/"},{"name":"MySQL","slug":"Database/MySQL","permalink":"http://jsunnyr.github.io/categories/Database/MySQL/"},{"name":"Profiling","slug":"Database/MySQL/Profiling","permalink":"http://jsunnyr.github.io/categories/Database/MySQL/Profiling/"},{"name":"Roadmap","slug":"Oracle/Roadmap","permalink":"http://jsunnyr.github.io/categories/Oracle/Roadmap/"},{"name":"ubuntu","slug":"OS/ubuntu","permalink":"http://jsunnyr.github.io/categories/OS/ubuntu/"},{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/categories/GNULINUX/"},{"name":"Command","slug":"GNULINUX/Command","permalink":"http://jsunnyr.github.io/categories/GNULINUX/Command/"},{"name":"Performance Tuning","slug":"GNULINUX/Performance-Tuning","permalink":"http://jsunnyr.github.io/categories/GNULINUX/Performance-Tuning/"},{"name":"RHEL","slug":"GNULINUX/RHEL","permalink":"http://jsunnyr.github.io/categories/GNULINUX/RHEL/"}],"tags":[{"name":"文章标签","slug":"文章标签","permalink":"http://jsunnyr.github.io/tags/%E6%96%87%E7%AB%A0%E6%A0%87%E7%AD%BE/"},{"name":"Powershell","slug":"Powershell","permalink":"http://jsunnyr.github.io/tags/Powershell/"},{"name":"UNIX","slug":"UNIX","permalink":"http://jsunnyr.github.io/tags/UNIX/"},{"name":"BSD","slug":"BSD","permalink":"http://jsunnyr.github.io/tags/BSD/"},{"name":"Knowledge","slug":"Knowledge","permalink":"http://jsunnyr.github.io/tags/Knowledge/"},{"name":"Programming","slug":"Programming","permalink":"http://jsunnyr.github.io/tags/Programming/"},{"name":"Oracle","slug":"Oracle","permalink":"http://jsunnyr.github.io/tags/Oracle/"},{"name":"asm","slug":"asm","permalink":"http://jsunnyr.github.io/tags/asm/"},{"name":"Linux","slug":"Linux","permalink":"http://jsunnyr.github.io/tags/Linux/"},{"name":"OpenBSD","slug":"OpenBSD","permalink":"http://jsunnyr.github.io/tags/OpenBSD/"},{"name":"Kernel","slug":"Kernel","permalink":"http://jsunnyr.github.io/tags/Kernel/"},{"name":"Outline","slug":"Outline","permalink":"http://jsunnyr.github.io/tags/Outline/"},{"name":"MySQL","slug":"MySQL","permalink":"http://jsunnyr.github.io/tags/MySQL/"},{"name":"Official doc","slug":"Official-doc","permalink":"http://jsunnyr.github.io/tags/Official-doc/"},{"name":"OS","slug":"OS","permalink":"http://jsunnyr.github.io/tags/OS/"},{"name":"Network","slug":"Network","permalink":"http://jsunnyr.github.io/tags/Network/"},{"name":"OpenStack","slug":"OpenStack","permalink":"http://jsunnyr.github.io/tags/OpenStack/"},{"name":"Experience","slug":"Experience","permalink":"http://jsunnyr.github.io/tags/Experience/"},{"name":"Security","slug":"Security","permalink":"http://jsunnyr.github.io/tags/Security/"},{"name":"Emacs","slug":"Emacs","permalink":"http://jsunnyr.github.io/tags/Emacs/"},{"name":"iptables","slug":"iptables","permalink":"http://jsunnyr.github.io/tags/iptables/"},{"name":"git","slug":"git","permalink":"http://jsunnyr.github.io/tags/git/"},{"name":"Perl","slug":"Perl","permalink":"http://jsunnyr.github.io/tags/Perl/"},{"name":"logstash","slug":"logstash","permalink":"http://jsunnyr.github.io/tags/logstash/"},{"name":"Ruby","slug":"Ruby","permalink":"http://jsunnyr.github.io/tags/Ruby/"},{"name":"npm","slug":"npm","permalink":"http://jsunnyr.github.io/tags/npm/"},{"name":"xls2csv","slug":"xls2csv","permalink":"http://jsunnyr.github.io/tags/xls2csv/"},{"name":"CMD","slug":"CMD","permalink":"http://jsunnyr.github.io/tags/CMD/"},{"name":"service-management","slug":"service-management","permalink":"http://jsunnyr.github.io/tags/service-management/"},{"name":"user-management","slug":"user-management","permalink":"http://jsunnyr.github.io/tags/user-management/"},{"name":"Peformance Tuning","slug":"Peformance-Tuning","permalink":"http://jsunnyr.github.io/tags/Peformance-Tuning/"},{"name":"Roadmap","slug":"Roadmap","permalink":"http://jsunnyr.github.io/tags/Roadmap/"},{"name":"package-management","slug":"package-management","permalink":"http://jsunnyr.github.io/tags/package-management/"},{"name":"RHEL","slug":"RHEL","permalink":"http://jsunnyr.github.io/tags/RHEL/"},{"name":"Command","slug":"Command","permalink":"http://jsunnyr.github.io/tags/Command/"},{"name":"Performance Tuning","slug":"Performance-Tuning","permalink":"http://jsunnyr.github.io/tags/Performance-Tuning/"},{"name":"GNULINUX","slug":"GNULINUX","permalink":"http://jsunnyr.github.io/tags/GNULINUX/"}]}